<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yang Cq</title>
  
  <subtitle>一个学习的网站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mindyu.com/"/>
  <updated>2018-12-24T14:18:14.377Z</updated>
  <id>http://mindyu.com/</id>
  
  <author>
    <name>Yang Cq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>品优购项目笔记（下）</title>
    <link href="http://mindyu.com/2018/12/22/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://mindyu.com/2018/12/22/品优购项目笔记（下）/</id>
    <published>2018-12-22T01:45:33.000Z</published>
    <updated>2018-12-24T14:18:14.377Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="购物车解决方案"><a href="#购物车解决方案" class="headerlink" title="购物车解决方案"></a>购物车解决方案</h3><p>用户在商品详细页点击加入购物车，提交商品 SKU 编号和购买数量，添加到购物车。当用户在未登录的情况下，将此购物车存入 cookies , 在用户登陆的情况下，将购物车数据存入 redis 。如果用户登陆时，cookies 中存在购物车，需要将 cookies 的购物车合并到 redis 中存储.<br><a id="more"></a><br>购物车数据存储结构：<br><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%88%97%E8%A1%A8%E6%A8%A1%E5%9E%8B.png" alt="购物车数据存储结构"></p><p>购物车实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cart</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;<span class="comment">// 对每一个商家购物车的封装</span></span><br><span class="line"><span class="keyword">private</span> String sellerId;<span class="comment">// 商家ID</span></span><br><span class="line"><span class="keyword">private</span> String sellerName;<span class="comment">// 商家名称</span></span><br><span class="line"><span class="keyword">private</span> List&lt;TbOrderItem&gt; orderItemList;<span class="comment">// 购物车明细</span></span><br><span class="line"> <span class="comment">// setter getter方法   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Cookie 存储购物车</strong></p><p>服务实现层：向购物车列表中添加物品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cart&gt; <span class="title">addGoodsToCartList</span><span class="params">(List&lt;Cart&gt; cartList, Long itemId, Integer num)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 根据skuID （itemId）查询商品明细sku的对象</span></span><br><span class="line">    TbItem item = itemMapper.selectByPrimaryKey(itemId);</span><br><span class="line">    <span class="keyword">if</span> (item == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"商品不存在"</span>);</span><br><span class="line">    <span class="comment">// 时间差，比如在添加提交订单时，商品下架了</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">"1"</span>.equals(item.getStatus())) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"商品不存在"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 根据sku对象获取商家ID</span></span><br><span class="line">    String sellerId = item.getSellerId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 根据商家ID在购物车列表中查询购物车对象</span></span><br><span class="line">    Cart cart = searchCartBySellerId(cartList, sellerId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.如果购物车列表中不存在该商家ID对应的购物车对象</span></span><br><span class="line">    <span class="keyword">if</span> (cart == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 4.1创建该商家的购物车对象</span></span><br><span class="line">        cart = <span class="keyword">new</span> Cart();</span><br><span class="line">        cart.setSellerId(sellerId);</span><br><span class="line">        cart.setSellerName(item.getSeller());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建购物车明细对象</span></span><br><span class="line">        List&lt;TbOrderItem&gt; orderItemList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        TbOrderItem orderItem = createOrderItem(item, num);</span><br><span class="line">        orderItemList.add(orderItem);</span><br><span class="line"></span><br><span class="line">        cart.setOrderItemList(orderItemList);</span><br><span class="line">        <span class="comment">// 4.2将该购物车对象添加到购物车列表中</span></span><br><span class="line">        cartList.add(cart);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123; <span class="comment">// 5. 如果购物车列表中存在该商家ID对应的购物车对象</span></span><br><span class="line">        <span class="comment">// 然后判断购物车对象中是否存在该商品的明细对象</span></span><br><span class="line">        TbOrderItem orderItem = searchOrderItemByItemId(cart.getOrderItemList(), itemId);</span><br><span class="line">        <span class="keyword">if</span> (orderItem == <span class="keyword">null</span>) &#123; <span class="comment">// 5.1 如果明细列表中不存在，创建明细对象添加到购物车对象中</span></span><br><span class="line">            <span class="comment">// 创建购物车明细对象</span></span><br><span class="line">            orderItem = createOrderItem(item, num);</span><br><span class="line">            cart.getOrderItemList().add(orderItem);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">// 5.2 如果明细列表中存在，则增加对应的数量</span></span><br><span class="line">            orderItem.setNum(orderItem.getNum()+num);<span class="comment">// 更改数量</span></span><br><span class="line">            orderItem.setTotalFee( <span class="keyword">new</span> BigDecimal(orderItem.getPrice().doubleValue()*orderItem.getNum()) );<span class="comment">// 更改价格</span></span><br><span class="line">            <span class="keyword">if</span>(orderItem.getNum()&lt;<span class="number">1</span>) cart.getOrderItemList().remove(orderItem);<span class="comment">// 当明细的数量小于1时移除</span></span><br><span class="line">            <span class="keyword">if</span> (cart.getOrderItemList().size()&lt;<span class="number">1</span>) cartList.remove(cart);<span class="comment">// 当购物车的明细项数为0时，移除购物车列表该对象</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cartList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据商家ID在购物车列表中查询该商家的购物车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cartList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sellerId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Cart <span class="title">searchCartBySellerId</span><span class="params">(List&lt;Cart&gt; cartList, String sellerId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Cart cart :cartList) &#123;</span><br><span class="line"><span class="keyword">if</span> (sellerId.equals(cart.getSellerId())) &#123;</span><br><span class="line"><span class="keyword">return</span> cart;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的购物明细对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> TbOrderItem <span class="title">createOrderItem</span><span class="params">(TbItem item, Integer num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&lt;<span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"非法数量"</span>);</span><br><span class="line">TbOrderItem order = <span class="keyword">new</span> TbOrderItem();</span><br><span class="line">order.setGoodsId(item.getGoodsId());</span><br><span class="line">order.setItemId(item.getId());</span><br><span class="line">order.setNum(num);</span><br><span class="line">order.setPicPath(item.getImage());</span><br><span class="line">order.setPrice(item.getPrice());</span><br><span class="line">order.setSellerId(item.getSellerId());</span><br><span class="line">order.setTitle(item.getTitle());</span><br><span class="line">order.setTotalFee(<span class="keyword">new</span> BigDecimal( item.getPrice().doubleValue()*num ));</span><br><span class="line"><span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在购物车明细列表中，根据SKUID查询购物车明细对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderItemList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> itemId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> TbOrderItem <span class="title">searchOrderItemByItemId</span><span class="params">(List&lt;TbOrderItem&gt; orderItemList, Long itemId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(TbOrderItem orderItem : orderItemList) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderItem.getItemId().longValue()==itemId.longValue()) &#123;</span><br><span class="line"><span class="keyword">return</span> orderItem;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车列表</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findCartList"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cart&gt; <span class="title">findCartList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String cartListString = util.CookieUtil.getCookieValue(request, <span class="string">"cartList"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="keyword">if</span> (cartListString == <span class="keyword">null</span> || cartListString.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">cartListString = <span class="string">"[]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Cart&gt; cartList_cookie = JSON.parseArray(cartListString, Cart.class);</span><br><span class="line"><span class="keyword">return</span> cartList_cookie;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加商品到购物车</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> itemId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/addGoodsToCartList"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">addGoodsToCartList</span><span class="params">(Long itemId, Integer num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;Cart&gt; cartList = findCartList();<span class="comment">// 获取购物车列表</span></span><br><span class="line">cartList = cartService.addGoodsToCartList(cartList, itemId, num);</span><br><span class="line">util.CookieUtil.setCookie(request, response, <span class="string">"cartList"</span>, JSON.toJSONString(cartList), <span class="number">3600</span> * <span class="number">24</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"添加成功"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"添加失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端服务层：将逻辑实现放在服务层，以便重用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 购物车明细求和</span></span><br><span class="line"><span class="keyword">this</span>.sum=<span class="function"><span class="keyword">function</span>(<span class="params">cartList</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> total = &#123;<span class="attr">totalNum</span>:<span class="number">0</span>, <span class="attr">totalMoney</span>:<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;cartList.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> cart = cartList[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;cart.orderItemList.length;j++)&#123;</span><br><span class="line"><span class="keyword">var</span> item=cart.orderItemList[j];<span class="comment">// 购物车明细</span></span><br><span class="line">total.totalNum +=item.num;</span><br><span class="line">total.totalMoney += item.totalFee;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Redis 存储购物车</strong></p><p>判断当前用户是否登陆，如果未登录采用 Cookie 存储，如果登录则采用 Redis 存储。登录后要进行 Cookie 购物车与 Redis 购物车的合并操作，并清除 Cookie 购物车。</p><ol><li>首先修改 spring-security 配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;http pattern="/cart/*.do" security="none"&gt;&lt;/http&gt; --&gt;</span><span class="comment">&lt;!-- 这种方式会导致不会经过登录认证操作，无法获取登录用户名 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--   entry-point-ref  入口点引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">use-expressions</span>=<span class="string">"false"</span> <span class="attr">entry-point-ref</span>=<span class="string">"casProcessingFilterEntryPoint"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/cart/*.do"</span> <span class="attr">access</span>=<span class="string">"IS_AUTHENTICATED_ANONYMOUSLY"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/**"</span> <span class="attr">access</span>=<span class="string">"ROLE_USER"</span>/&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">csrf</span> <span class="attr">disabled</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- custom-filter为过滤器， position 表示将过滤器放在指定的位置上，before表示放在指定位置之前  ，after表示放在指定的位置之后  --&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">"casAuthenticationFilter"</span>  <span class="attr">position</span>=<span class="string">"CAS_FILTER"</span> /&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">"requestSingleLogoutFilter"</span> <span class="attr">before</span>=<span class="string">"LOGOUT_FILTER"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">"singleLogoutFilter"</span> <span class="attr">before</span>=<span class="string">"CAS_FILTER"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之前配置的过滤购物车拦截的方式，会导致该逻辑不会经过spring security的生命周期。那么在 CartController 中就无法通过 <code>SecurityContextHolder.getContext().getAuthentication().getName()</code> 的方式来获取当前登录用户名。报空指针异常。</p><p>access=”IS_AUTHENTICATED_ANONYMOUSLY” 用于设置资源可以在不登陆时可以访问。此 配 置 与 security=”none” 的 区 别 在 于 当 用 户 未 登 陆 时 获 取 登 陆 人 账 号 的 值 为 anonymousUser ，而 security=”none”的话，无论是否登陆都不能获取登录人账号的值。</p><ol><li>服务层实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cart&gt; <span class="title">findCartListFromRedis</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// System.out.println("从redis中获取购物车数据");</span></span><br><span class="line">    List&lt;Cart&gt; cartList = (List&lt;Cart&gt;) redisTemplate.boundHashOps(<span class="string">"cartList"</span>).get(username);</span><br><span class="line">    <span class="keyword">if</span>(cartList == <span class="keyword">null</span>) cartList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> cartList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCartListToRedis</span><span class="params">(String username, List&lt;Cart&gt; cartList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// System.out.println("向Redis中存储购物车数据");</span></span><br><span class="line">    redisTemplate.boundHashOps(<span class="string">"cartList"</span>).put(username, cartList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>控制层实现，通过判断用户是否登录来选择从cookie还是redis中读取数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findCartList"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cart&gt; <span class="title">findCartList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前登录用户名</span></span><br><span class="line">    String username = SecurityContextHolder.getContext().getAuthentication().getName();</span><br><span class="line">    <span class="comment">// 从cookie中读取购物车数据</span></span><br><span class="line">    String cookieValue = util.CookieUtil.getCookieValue(request, <span class="string">"cartList"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="keyword">if</span> (cookieValue == <span class="keyword">null</span> || <span class="string">""</span>.equals(cookieValue)) cookieValue = <span class="string">"[]"</span>;</span><br><span class="line">    List&lt;Cart&gt; cartList_cookie = JSON.parseArray(cookieValue, Cart.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (username.equals(<span class="string">"anonymousUser"</span>)) &#123;<span class="comment">// 如果未登录从cookie中读取</span></span><br><span class="line">        <span class="comment">// System.out.println("从cookie中读取");</span></span><br><span class="line">        <span class="keyword">return</span> cartList_cookie;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;<span class="comment">// 用户已登录从redis中读取</span></span><br><span class="line">        List&lt;Cart&gt; cartList_redis = cartService.findCartListFromRedis(username);</span><br><span class="line">        <span class="keyword">if</span> (cartList_cookie.size()&gt;<span class="number">0</span>) &#123;<span class="comment">// 本地购物车未合并</span></span><br><span class="line">            <span class="comment">// System.out.println("合并本地和redis购物车数据");</span></span><br><span class="line">            <span class="comment">// 合并本地和redis购物车数据</span></span><br><span class="line">            cartList_redis = cartService.mergeCartList(cartList_cookie, cartList_redis);</span><br><span class="line">            <span class="comment">// 在存储到redis中</span></span><br><span class="line">            cartService.addCartListToRedis( username, cartList_redis);</span><br><span class="line">            <span class="comment">// 清空本地缓存购物车</span></span><br><span class="line">            util.CookieUtil.deleteCookie(request, response, <span class="string">"cartList"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cartList_redis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>合并购物车</strong></p><p>当用户登录时，需要将存储在cookie中的购物车数据添加到redis服务器中。同时清空本地cookie中的数据。已达到合并的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cart&gt; <span class="title">mergeCartList</span><span class="params">(List&lt;Cart&gt; cartList1, List&lt;Cart&gt; cartList2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cartList1==<span class="keyword">null</span> &amp;&amp; cartList2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Cart&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Cart cart : cartList2) &#123;</span><br><span class="line">        <span class="keyword">for</span>(TbOrderItem orderItem : cart.getOrderItemList()) &#123;</span><br><span class="line">            cartList1 = addGoodsToCartList(cartList1, orderItem.getItemId(), orderItem.getNum());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cartList1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环一个 cartList 中的 orderItem 数据，然后逐个添加到另一个 cartList 中。然后控制层在 findCartList 中调用，因为用户登录之后，进入购物车页面时必定经过查询购物车数据的方法。在前面的控制层实现中已经给出代码实现。</p><p><em>跳板页的思想</em></p><p>用户添加购物车完成之后，如果需要购买那么必须先完成登录。该系统使用cas实现的单点登录。如果我们通过直接跳转到 <code>http://localhost:9100/cas/login</code> cas服务器地址来完成登录，这样会出现登录完成之后页面会跳转到cas服务器的登录成功的提示页面，而不是我们想要的购物车页面。</p><p>我们可以采用一种跳板页的方法来实现。点击登录然后跳转到跳板页 login.html。但是由于当前状态为未登录，该页面会被Spring Security拦截然后重定向到cas服务器的登录页，登录成功后会重新回到 login.html 页面。然后在 login.html 页面中执行 js 回跳到购物车页面即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- login.html中添加跳转页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">location.href=<span class="string">"cart.html"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="跨域解决方案与提交订单"><a href="#跨域解决方案与提交订单" class="headerlink" title="跨域解决方案与提交订单"></a>跨域解决方案与提交订单</h3><p><strong>JS  跨域请求</strong></p><p>通过 js 在不同的域之间进行数据传输或通信，比如用 ajax 向一个不同的域请求数据，或者通过 js 获取页面中不同域的框架中(iframe)的数据。只要<strong>协议、域名、端口</strong>有任何一个不同，都被当作是不同的域。这也是面试中经常会问到的一个问题。</p><p>商品详情页面点击提交订单，就会异步调用购物车模块的添加商品到购物车的逻辑。该过程就会用到跨域操作。如果不考虑跨域问题会出现如下问题。点击添加购物车没有响应。<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98.png" alt="跨域存在的问题"></p><p>  <strong>跨域解决方案 CORS</strong></p><p>CORS 是一个 W3C 标准，全称是”跨域资源共享”（Cross-origin resource sharing）。CORS 需要浏览器和服务器同时支持。除了 IE10 以前的浏览器之外其它浏览器都支持。（IE并未实现W3C标准）</p><p>CORS 可以解决跨越问题，允许浏览器向跨源服务器发出 XMLHttpRequest 请求。当存在跨域请求时，浏览器会自动添加附加的头信息，有时候会多一次附加请求，但是用户不会察觉。实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。</p><p>请求过程：首先浏览器向服务器发送一个预请求，服务器返回一个 Preflight Response，如果服务器同意跨域请求，那么浏览器才能继续发送跨域请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务器只需要配置 response 响应头信息即可</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://localhost:9105"</span>);<span class="comment">// 允许跨域请求</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);<span class="comment">// 允许携带cookie （方法中如果会操作cookie的话，必须添加该配置）</span></span><br></pre></td></tr></table></figure><p><code>Access-Control-Allow-Origin</code> 的配置表示服务器支持跨域请求的地址。此时也就是允许 <code>http://localhost:9105</code> 该地址的跨域请求。</p><p>另外 Spring 4.2 版本之后支持注解式跨域请求<code>@CrossOrigin(origins=&quot;http://localhost:9105&quot;,allowCredentials=&quot;true&quot;)    // spring 4.2版本以上支持注解的方式，allowCredentials=&quot;true&quot;可以缺省</code></p><p>CORS 请求默认不发送 Cookie 和 HTTP 认证信息。如果要把 Cookie 发到服务器，一方面要服务器同意，指定 Access-Control-Allow-Credentials 字段。另一方面，<strong>开发者必须在 AJAX 请求中打开 withCredentials 属性</strong>。否则，即使服务器同意发送 Cookie，浏览器也不会发送（点击添加购物车，登录之后，cookie中的购物车数据不会合并到用户的购物车中）。或者，服务器要求设置 Cookie，浏览器也不会处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加到购物车</span></span><br><span class="line">$scope.addToCart=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="comment">// alert('sku_id:'+ $scope.sku.id);</span></span><br><span class="line"> <span class="comment">// 执行跨域请求</span></span><br><span class="line"> $http.get(<span class="string">"http://localhost:9107/cart/addGoodsToCartList.do?itemId="</span>+ $scope.sku.id +<span class="string">"&amp;num="</span> </span><br><span class="line"> + $scope.num, &#123;<span class="string">'withCredentials'</span>:<span class="literal">true</span>&#125;).success(</span><br><span class="line"> <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (response.success) &#123;</span><br><span class="line">location.href=<span class="string">"http://localhost:9107/cart.html"</span>;<span class="comment">// 跳转到购物车页面</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(response.message);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结算页信息显示</strong></p><p><em>收件人的的选择</em></p><p>点击购物车进入结算页，首先会让用户选择收货地址以及收货人信息。而收获人信息是个用户进行关联的，所以将该模块放置在user模块中，在 AddressService 中新增一个通过用户ID查询收货人的信息的方法。然后在controller层，通过SpringSecurityu获取当前登录用户的ID，然后通过服务方法从数据库中取出用户的收获信息列表。前端以列表的信息显示出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询用户的收货地址信息</span></span><br><span class="line">$scope.findAddress=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    cartService.findAddress().success(</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">                $scope.addressList = response;</span><br><span class="line">                <span class="comment">// 查找默认地址</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;$scope.addressList.length;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>($scope.addressList[i].isDefault==<span class="string">'1'</span>)&#123;</span><br><span class="line">                        $scope.address=$scope.addressList[i];<span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择地址</span></span><br><span class="line">$scope.selectAddress=<span class="function"><span class="keyword">function</span>(<span class="params">address</span>)</span>&#123;</span><br><span class="line">    $scope.address = address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该地址是否被选</span></span><br><span class="line">$scope.isSelectedAddress=<span class="function"><span class="keyword">function</span>(<span class="params">address</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ($scope.address == address);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>支付方式</em></p><p>通过 <code>$scope.order={paymentType:&#39;1&#39;};</code>中的paymentType字段来绑定页面的支付方式，1表示微信支付，2表示货到付款 。</p><p><em>商品清单与金额显示</em></p><p>cartController.js 中之前实现了获取购物车的信息。此处的商品清单也可以通过该方法，从redis中获取用户购买的信息。然后通过 ng-repeat 循环遍历显示即可。合计金额也可以通过 sum 方法计算求和。</p><p>  <strong>分布式 ID  生成器</strong></p><p>snowflake 算法。由 Twitter 推出的一款开源的<strong>分布式自增ID</strong>生成算法。</p><p>结构：</p><p>0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000</p><p>第一位为未使用，接下来的41位为毫秒级时间(41位的长度可以使用69年)，然后是5位datacenterId和5位workerId(10位的长度最多支持部署1024个节点），最后12位是毫秒内的计数（12位的计数顺序号支持每个节点每毫秒产生4096个ID序号）</p><p>一共加起来刚好64位，为一个Long型。(转换成字符串后长度最多19)</p><p>snowflake生成的ID整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和workerId作区分不同机器之间也就不会出现重复ID的情况），并且效率较高。经测试snowflake每秒能够产生26万个ID。</p><p><em>注：UUID 存在的问题：128位（16字节）较占内存，无法生成有序的ID。</em></p><p>IdWorker 生成器工具类位于 common 工程。创建一个 IdWorker 对象，然后调用 nextId() 即可生成一个全局唯一ID。在Spring工程中，我们可以通过配置的方式来构造bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"idWorker"</span> <span class="attr">class</span>=<span class="string">"util.IdWorker"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进程 ID --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据中心 ID --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>保存订单</strong></p><p>取出 redis 中存储的用户购物车数据，生成对应的订单项，采用 snowflake 算法生成唯一的订单ID，然后根据商品的SKU信息生成多个订单项。</p><h3 id="微信二维码支付模块"><a href="#微信二维码支付模块" class="headerlink" title="微信二维码支付模块"></a>微信二维码支付模块</h3><p><strong>二维码生成插件 qrious</strong><br>    qrious 是一款基于 HTML5 Canvas 的纯 JS 二维码生成插件。通过 qrious.js 可以快速生成各种二维码，你可以控制二维码的尺寸颜色，还可以将生成的二维码进行 Base64 编码。</p><p>配置参数：<br><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/qriousc%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.png" alt="qrious配置参数"></p><p><strong>微信扫码支付</strong></p><p>商户系统按微信支付协议生成支付二维码，用户再用微信“扫一扫”完成支付的模式。该模式适用于 PC 网站支付、实体店单品或订单支付、媒体广告支付等场景。</p><p>具体开发文档：<a href="https://pay.weixin.qq.com/wiki/doc/api/index.html" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/index.html</a> 主要了解Native支付的统一下单和查询订单API。</p><p>实现原理：首先引入微信支付的sdk依赖。使用 <strong>HttpClient 工具类</strong>，来模拟浏览器行为，去调用微信支付的 api 接口，向该地址提交相应的数据，然后获取结果。</p><p>由于使用微信扫码支付的申请条件比较苛刻，所以这一模块无法完成测试。提供的公共号、商户号、秘钥信息等，无法完成签名。返回的信息为签名错误。</p><p><em>服务接口层</em></p><p>pay-interface </p><p><em>服务实现层</em></p><p>pay-service 依赖 pay 接口，和common模块（将 httpclient 工具类放在公共层、以及微信支付的基本信息配置），spring dubbo 依赖以及微信的 SDK。实现生成二维码和查询订单状态的方法。</p><p><em>控制层</em></p><p>cart-web 模块依赖支付服务，生成订单之后进入支付页面，调用服务层的生成二维码的方法，得到返回的 code_url ，然后让前端 qrious 插件根据该 url 去生成二维码即可。然后后端定时调用查询订单状态的方法，每隔3秒钟去查询订单支付状态，同时每隔五分钟之后就提示二维码支付超时，然后前端就收到超时信息之后，可以将其显示出来或者重新生成二维码信息。同时如果前端页面被关闭，后端会在五分钟之后返回超时的提示。</p><p><strong>支付日志</strong></p><p> （1）在用户下订单时，判断如果为微信支付，就向支付日志表添加一条记录，信息包括支付总金额、订单 ID（一个支付日志对应多个订单）、用户 ID 、下单时间等信息，支付状态为 0（未支付）<br>    （2）生成的支付日志对象放入 redis 中，以用户 ID 作为 key，这样在生成支付二维码时就可以从 redis 中提取支付日志对象中的金额和订单号。<br>    （3）当用户支付成功后，修改支付日志的支付状态为 1（已支付），并记录微信传递给我们的交易流水号。根据订单 ID（多个）修改订单的状态为 2（已付款）。同时删除缓存中的支付日志。</p><h3 id="秒杀解决方案"><a href="#秒杀解决方案" class="headerlink" title="秒杀解决方案"></a>秒杀解决方案</h3><p>秒杀的特点就是在特定的时间对限量的商品进行抢购。在该时间可能存在很高的并发请求，而造成对后端数据库的巨大压力。此时可以采用缓存机制，来避免用户直接与数据库的交互。<em>秒杀时说有数据都存储在缓存中，只有当商品抢购完或者时间到期时才将缓存中的数据一次性存入数据库中。</em></p><p>模块需求：</p><p>（1）商家提交秒杀商品申请，录入秒杀商品数据，主要包括：商品标题、原价、秒杀价、商品图片、介绍等信息</p><p>（2）运营商审核秒杀申请</p><p>（3）秒杀频道首页列出正在秒杀的商品，用户点击秒杀商品图片跳转到秒杀商品详细页。</p><p>（4）商品详细页显示秒杀商品信息，点击立即抢购实现秒杀下单，下单时扣减库存。当库存为 0 或不在活动期范围内时无法秒杀。</p><p>（5）秒杀下单成功，直接跳转到支付页面（微信扫码），支付成功，跳转到成功页，填写收货地址、电话、收件人等信息，完成订单。</p><p>（6）当用户秒杀下单 5 分钟内未支付，取消预订单，调用微信支付的关闭订单接口，恢复库存。</p><p><strong>秒杀频道首页</strong></p><p>seckill 模块服务层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回当前正在参与秒杀的商品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TbSeckillGoods&gt; <span class="title">findList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;TbSeckillGoods&gt; seckillGoodsList = redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).values();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (seckillGoodsList==<span class="keyword">null</span> || seckillGoodsList.size()==<span class="number">0</span>) &#123; <span class="comment">// 当前缓存还没有数据</span></span><br><span class="line">        TbSeckillGoodsExample example = <span class="keyword">new</span> TbSeckillGoodsExample();</span><br><span class="line">        Criteria criteria = example.createCriteria();</span><br><span class="line">        criteria.andStatusEqualTo(<span class="string">"1"</span>);<span class="comment">// 已审核状态</span></span><br><span class="line">        criteria.andStockCountGreaterThan(<span class="number">0</span>);<span class="comment">// 库存量&gt;0</span></span><br><span class="line">        criteria.andStartTimeLessThanOrEqualTo(<span class="keyword">new</span> Date());<span class="comment">// 当前时间大于等于开始时间</span></span><br><span class="line">        criteria.andEndTimeGreaterThanOrEqualTo(<span class="keyword">new</span> Date());<span class="comment">// 当前时间晚于结束时间</span></span><br><span class="line">        seckillGoodsList = seckillGoodsMapper.selectByExample(example );<span class="comment">// 从数据库中读取数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(TbSeckillGoods seckillGood : seckillGoodsList) &#123;<span class="comment">// 将当前时间的秒杀商品按商品ID存入缓存</span></span><br><span class="line">            redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).put(seckillGood.getId(), seckillGood);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"从数据库中读取秒杀商品并放入缓存"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"从缓存中读取秒杀商品数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> seckillGoodsList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TbSeckillGoods <span class="title">findOneFromRedis</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (TbSeckillGoods) redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).get(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中查询当前秒杀的商品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findList"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TbSeckillGoods&gt; <span class="title">findList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> seckillGoodsService.findList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findOneFromRedis"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> TbSeckillGoods <span class="title">findOneFromRedis</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> seckillGoodsService.findOneFromRedis(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端服务层</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.service(<span class="string">'seckillGoodsService'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$http</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取列表数据绑定到表单中</span></span><br><span class="line"><span class="keyword">this</span>.findList=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> $http.get(<span class="string">'seckillGoods/findList.do'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.findOne=<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> $http.get(<span class="string">'seckillGoods/findOneFromRedis.do?id='</span>+id); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.submitOrder=<span class="function"><span class="keyword">function</span>(<span class="params">seckillId</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> $http.get(<span class="string">'seckillOrder/submitOrder.do?seckillId='</span>+seckillId);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>前端控制层</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">app.controller(<span class="string">'seckillGoodsController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $location, $interval, seckillGoodsService</span>)</span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取列表数据绑定到表单中</span></span><br><span class="line">$scope.findList=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">seckillGoodsService.findList().success(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">$scope.list=response;</span><br><span class="line">&#125; </span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询实体点击秒杀首页商品的详情页时，跳转到详情页，传递商品的ID信息</span></span><br><span class="line">$scope.findOne=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">seckillGoodsService.findOne($location.search()[<span class="string">'id'</span>]).success(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">$scope.entity = response;</span><br><span class="line">totalSecond = <span class="built_in">Math</span>.floor((<span class="keyword">new</span> <span class="built_in">Date</span>($scope.entity.endTime).getTime() - (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()))/<span class="number">1000</span>);</span><br><span class="line">time = $interval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 倒计时的实现</span></span><br><span class="line"><span class="keyword">if</span> (totalSecond&gt;<span class="number">0</span>) &#123;</span><br><span class="line">$scope.timeString = convertSecondToTime(totalSecond);</span><br><span class="line">--totalSecond;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">"秒杀已结束"</span>);</span><br><span class="line">$interval.cancel(time);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">convertSecondToTime=<span class="function"><span class="keyword">function</span>(<span class="params">totalSecond</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> sec = totalSecond%<span class="number">60</span>;</span><br><span class="line">totalSecond = <span class="built_in">Math</span>.floor(totalSecond/<span class="number">60</span>);</span><br><span class="line"><span class="keyword">var</span> min = totalSecond%<span class="number">60</span>;</span><br><span class="line">totalSecond = <span class="built_in">Math</span>.floor(totalSecond/<span class="number">60</span>);</span><br><span class="line"><span class="keyword">var</span> hour = totalSecond%<span class="number">24</span>;</span><br><span class="line">totalSecond = <span class="built_in">Math</span>.floor(totalSecond/<span class="number">24</span>);</span><br><span class="line"><span class="keyword">var</span> day = totalSecond;</span><br><span class="line"><span class="keyword">return</span> day==<span class="number">0</span>? hour+<span class="string">":"</span>+min+<span class="string">":"</span>+sec : day+<span class="string">"天 "</span>+hour+<span class="string">":"</span>+min+<span class="string">":"</span>+sec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$scope.submitOrder=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">seckillGoodsService.submitOrder($scope.entity.id).success(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (response.success) &#123;</span><br><span class="line">alert(<span class="string">"抢购成功，请在五分钟内付款"</span>);</span><br><span class="line">location.href=<span class="string">"pay.html"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(response.message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>秒杀倒计时效果</strong></p><p>$interval 服务用来间歇性处理某事务</p><p>格式：$interval(执行的函数,间隔的毫秒数,运行次数);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">time = $interval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 倒计时的实现</span></span><br><span class="line">    <span class="keyword">if</span> (totalSecond&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        $scope.timeString = convertSecondToTime(totalSecond);<span class="comment">// 格式转换</span></span><br><span class="line">        --totalSecond;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">"秒杀已结束"</span>);</span><br><span class="line">        $interval.cancel(time); <span class="comment">// 退出定时任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><strong>秒杀提交订单</strong></p><p>服务层逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitOrder</span><span class="params">(Long seckillId, String userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从缓存中查询商品</span></span><br><span class="line">    TbSeckillGoods seckillGoods = (TbSeckillGoods) redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).get(seckillId);</span><br><span class="line">    <span class="comment">// 判断商品状态</span></span><br><span class="line">    <span class="keyword">if</span> (seckillGoods == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"商品不存在"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(seckillGoods.getStockCount()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"商品已抢购一空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 商品库存 -1</span></span><br><span class="line">    seckillGoods.setStockCount(seckillGoods.getStockCount()-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (seckillGoods.getStockCount() == <span class="number">0</span>) &#123;<span class="comment">// 商品被抢空</span></span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).delete(seckillId);<span class="comment">// 删除缓存中该商品</span></span><br><span class="line">        seckillGoodsMapper.updateByPrimaryKey(seckillGoods);<span class="comment">// 同步到数据库 </span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 更新秒杀商品中数据</span></span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).put(seckillId, seckillGoods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成订单信息</span></span><br><span class="line">    TbSeckillOrder order = <span class="keyword">new</span> TbSeckillOrder();</span><br><span class="line">    order.setId(idWorker.nextId());<span class="comment">// 生成订单ID</span></span><br><span class="line">    order.setSeckillId(seckillId);<span class="comment">// 秒杀商品ID</span></span><br><span class="line">    order.setMoney(seckillGoods.getCostPrice());<span class="comment">// 秒杀价格</span></span><br><span class="line">    order.setUserId(userId);</span><br><span class="line">    order.setSellerId(seckillGoods.getSellerId()); <span class="comment">// 商家ID</span></span><br><span class="line">    order.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    order.setStatus(<span class="string">"0"</span>); <span class="comment">// 状态</span></span><br><span class="line">    redisTemplate.boundHashOps(<span class="string">"seckillOrder"</span>).put(userId, order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/submitOrder"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">submitOrder</span><span class="params">(Long seckillId)</span> </span>&#123;</span><br><span class="line">    String username = SecurityContextHolder.getContext().getAuthentication().getName();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"anonymousUser"</span>.equals(username)) &#123; <span class="comment">// 如果未登录</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"用户未登录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        seckillOrderService.submitOrder(seckillId, username);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"订单提交成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, e.getMessage());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"订单提交失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>秒杀支付</strong></p><p>用户抢购成功之后跳转到支付页面。调用微信二维码支付接口，生成二维码，用户支付完成之后跳转到收获人地址信息填写页面。超过五分钟未付款就取消订单，恢复redis中的库存量，同时关闭微信订单，防止用户支付无效的订单。由于微信支付接口无法测试该功能预留。</p><h3 id="SpringTask-任务调度"><a href="#SpringTask-任务调度" class="headerlink" title="SpringTask 任务调度"></a>SpringTask 任务调度</h3><p>实现上述秒杀功能之后，我想你一定也有和我一样的疑惑，那就是秒杀的商品什么时候从数据库中实时更新了，先前实现的逻辑只有在第一次访问秒杀系统时，即判断 redis 缓存中是否存在对应的商品信息，如果不存在就从数据库中取出数据同时还需要全量添加到缓存中。但是之后就一直从缓存中取数据。</p><p>此时就可以使用 SpringTask 任务调度来实现计划任务，即在某个时间点执行某件事。实现每秒钟去增量更新redis数据库中的秒杀商品信息。</p><p> <strong>Cron 表达式格式</strong><br>    Cron 表达式是一个字符串，字符串以 5 或 6 个空格隔开，分为 6 或 7 个域，每一个域代表一个含义，Cron 有如下两种语法格式：<br>（1）Seconds Minutes Hours DayofMonth Month DayofWeek Year<br>（2）Seconds Minutes Hours DayofMonth Month DayofWeek</p><p>每一个域可出现的字符如下：</p><ul><li>Seconds: 可出现”, - * /“四个字符，有效范围为 0-59 的整数</li><li>Minutes: 可出现”, - * /“四个字符，有效范围为 0-59 的整数</li><li>Hours: 可出现”, - * /“四个字符，有效范围为 0-23 的整数</li><li>DayofMonth: 可出现”, - * / ? L W C”八个字符，有效范围为 1-31 的整数</li><li>Month: 可出现”, - * /“四个字符，有效范围为 1-12 的整数或 JAN-DEC(英文单词的前三个字母)</li><li>DayofWeek: 可出现”, - * / ? L C #”四个字符，有效范围为 1-7 的整数或 SUN-SAT 两个范围。1表示星期天，2 表示星期一， 依次类推</li><li>Year: 可出现”, - * /“四个字符，有效范围为 1970-2099 年</li></ul><p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">(1)*: 表示匹配该域的任意值，假如在 Minutes 域使用, 即表示每分钟都会触发事件。</span><br><span class="line"></span><br><span class="line">(2)?: 只能用在 DayofMonth 和 DayofWeek 两个域。它也匹配域的任意值，但实际不会。因为DayofMonth 和 DayofWeek 会相互影响。例如想在每月的 20 日触发调度，不管 20 日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用，如果使用表示不管星期几都会触发，实际上并不是这样。</span><br><span class="line"></span><br><span class="line">(3)-: 表示范围，例如在 Minutes 域使用 5-20，表示从 5 分到 20 分钟每分钟触发一次</span><br><span class="line"></span><br><span class="line">(4)/: 表示起始时间开始触发，然后每隔固定时间触发一次，例如在 Minutes 域使用 5/20,则意味着 5 分钟触发一次，而 25，45 等分别触发一次.</span><br><span class="line"></span><br><span class="line">(5),: 表示列出枚举值值。例如：在 Minutes 域使用 5,20，则意味着在 5 和 20 分每分钟触发一次。</span><br><span class="line"></span><br><span class="line">(6)L: 表示最后，只能出现在 DayofWeek 和 DayofMonth 域，如果在 DayofWeek 域使用 5L,意味着在最后的一个星期四触发。</span><br><span class="line"></span><br><span class="line">(7)W: 表示有效工作日(周一到周五),只能出现在 DayofMonth 域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth 使用 5W，如果 5 号是星期六，则将在最近的工作日：星期五，即 4 号触发。如果 5 号是星期天，则在 6 号(周一)触发；如果 5 号在星期一到星期五中的一天，则就在 5 号触发。另外一点，W 的最近寻找不会跨过月份。</span><br><span class="line"></span><br><span class="line">(8)LW: 这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</span><br><span class="line"></span><br><span class="line">(9)#: 用于确定每个月第几个星期几，只能出现在 DayofMonth 域。例如在 4#2，表示某月的第二个星期三。</span><br><span class="line"></span><br><span class="line">Cron 表达式例子：</span><br><span class="line">0 0 10,14,16 * * ? 每天上午 10 点，下午 2 点，4 点</span><br><span class="line">0 0/30 9-17 * * ? 每天上午九点到下午五点每半小时</span><br><span class="line">0 0 12 ? * WED 表示每个星期三中午 12 点</span><br><span class="line">&quot;0 0 12 * * ?&quot; 每天中午 12 点触发</span><br><span class="line">&quot;0 15 10 ? * *&quot; 每天上午 10:15 触发</span><br><span class="line">&quot;0 15 10 * * ?&quot; 每天上午 10:15 触发</span><br><span class="line">&quot;0 15 10 * * ? *&quot; 每天上午 10:15 触发</span><br><span class="line">&quot;0 15 10 * * ? 2005&quot; 2005 年的每天上午 10:15 触发</span><br><span class="line">&quot;0 * 14 * * ?&quot; 在每天下午 2 点到下午 2:59 期间的每 1 分钟触发</span><br><span class="line">&quot;0 0/5 14 * * ?&quot; 在每天下午 2 点到下午 2:55 期间的每 5 分钟触发</span><br><span class="line">&quot;0 0/5 14,18 * * ?&quot; 在每天下午 2 点到 2:55 期间和下午 6 点到 6:55 期间的每 5 分钟触发</span><br><span class="line">&quot;0 0-5 14 * * ?&quot; 在每天下午 2 点到下午 2:05 期间的每 1 分钟触发</span><br><span class="line">&quot;0 10,44 14 ? 3 WED&quot; 每年三月的星期三的下午 2:10 和 2:44 触发</span><br><span class="line">&quot;0 15 10 ? * MON-FRI&quot; 周一至周五的上午 10:15 触发</span><br><span class="line">&quot;0 15 10 15 * ?&quot; 每月 15 日上午 10:15 触发</span><br><span class="line">&quot;0 15 10 L * ?&quot; 每月最后一日的上午 10:15 触发</span><br><span class="line">&quot;0 15 10 ? * 6L&quot; 每月的最后一个星期五上午 10:15 触发</span><br><span class="line">&quot;0 15 10 ? * 6L 2002-2005&quot; 2002 年至 2005 年的每月的最后一个星期五上午 10:15 触发</span><br><span class="line">&quot;0 15 10 ? * 6#3&quot; 每月的第三个星期五上午 10:15 触发</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">表达式</th><th>表示含义</th></tr></thead><tbody><tr><td style="text-align:left">0 0 10,14,16 <em> </em> ?</td><td>每天上午 10 点，下午 2 点，4 点</td></tr><tr><td style="text-align:left">0 0/30 9-17 <em> </em> ?</td><td>每天上午九点到下午五点每半小时</td></tr><tr><td style="text-align:left">0 0 12 ? * WED</td><td>每个星期三中午 12 点</td></tr><tr><td style="text-align:left">0 0 12 <em> </em> ?</td><td>每天中午 12 点触发</td></tr><tr><td style="text-align:left">0 15 10 ? <em> </em></td><td>每天上午 10:15 触发</td></tr><tr><td style="text-align:left">0 15 10 <em> </em> ?</td><td>每天上午 10:15 触发</td></tr><tr><td style="text-align:left">0 15 10 <em> </em> ? *</td><td>每天上午 10:15 触发</td></tr><tr><td style="text-align:left">0 15 10 <em> </em> ? 2018</td><td>2018 年的每天上午 10:15 触发</td></tr><tr><td style="text-align:left">0 <em> 14 </em> * ?</td><td>在每天下午 2 点到下午 2:59 期间的每 1 分钟触发</td></tr><tr><td style="text-align:left">0 0/5 14 <em> </em> ?</td><td>在每天下午 2 点到下午 2:55 期间的每 5 分钟触发</td></tr><tr><td style="text-align:left">0 0-5 14 <em> </em> ?</td><td>每天下午 2 点到下午 2:05 期间的每 1 分钟触发</td></tr><tr><td style="text-align:left">0 10,44 14 ? 3 WED</td><td>每年三月的星期三的下午 2:10 和 2:44 触发</td></tr><tr><td style="text-align:left">0 15 10 ? * MON-FRI</td><td>周一至周五的上午 10:15 触发</td></tr><tr><td style="text-align:left">0 15 10 ? * 6L</td><td>每月的最后一个星期五上午 10:15 触发</td></tr><tr><td style="text-align:left">0 15 10 ? * 6L 2002-2005</td><td>2002 年至 2005 年的每月的最后一个星期五上午 10:15 触发</td></tr><tr><td style="text-align:left">0 15 10 ? * 6#3</td><td>每月的第三个星期五上午 10:15 触发</td></tr></tbody></table><p><strong>秒杀商品的增量更新和过期删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TbSeckillGoodsMapper seckillGoodsMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定时刷新秒杀商品</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Scheduled</span>(cron=<span class="string">"0/5 * * * * ?"</span>)<span class="comment">// 每分钟执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshSeckillGoods</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"执行了增量更新任务调度"</span>+<span class="keyword">new</span> Date()); </span><br><span class="line"><span class="comment">// 查询 Redis 中所有商品键集合</span></span><br><span class="line">List ids =  <span class="keyword">new</span> ArrayList&lt;&gt;(redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).keys()); <span class="comment">// 第一次执行为 []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询正在秒杀的商品列表</span></span><br><span class="line">TbSeckillGoodsExample example = <span class="keyword">new</span> TbSeckillGoodsExample();</span><br><span class="line">Criteria criteria = example.createCriteria();</span><br><span class="line">criteria.andStatusEqualTo(<span class="string">"1"</span>);<span class="comment">// 已审核状态</span></span><br><span class="line">criteria.andStockCountGreaterThan(<span class="number">0</span>);<span class="comment">// 库存量&gt;0</span></span><br><span class="line">criteria.andStartTimeLessThanOrEqualTo(<span class="keyword">new</span> Date());<span class="comment">// 当前时间大于等于开始时间</span></span><br><span class="line">criteria.andEndTimeGreaterThanOrEqualTo(<span class="keyword">new</span> Date());<span class="comment">// 当前时间晚于结束时间</span></span><br><span class="line"><span class="keyword">if</span>(ids.size()&gt;<span class="number">0</span>)</span><br><span class="line">criteria.andIdNotIn(ids);<span class="comment">// 排除已存在的商品，实现增量更新</span></span><br><span class="line">List&lt;TbSeckillGoods&gt; seckillGoodsList = seckillGoodsMapper.selectByExample(example );<span class="comment">// 从数据库中读取数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 装入缓存</span></span><br><span class="line"><span class="keyword">for</span>( TbSeckillGoods seckill:seckillGoodsList )&#123;</span><br><span class="line">redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).put(seckill.getId(), seckill);</span><br><span class="line">System.out.println(<span class="string">"添加商品："</span> + seckill.getId());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"将"</span>+seckillGoodsList.size()+<span class="string">"条商品装入缓存"</span>);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 每秒钟在缓存中查询已过期的商品，发现过期的秒杀商品后同步到数据库，并在缓存中移除该秒杀商品</span></span><br><span class="line"><span class="meta">@Scheduled</span>(cron=<span class="string">"* * * * * ?"</span>)<span class="comment">// 每秒钟执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeSeckillGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"执行了删除过期商品任务调度"</span>+<span class="keyword">new</span> Date()); </span><br><span class="line">List&lt;TbSeckillGoods&gt; seckillGoodsList =redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).values();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( TbSeckillGoods seckillGood : seckillGoodsList) &#123;</span><br><span class="line"><span class="keyword">if</span> (seckillGood.getEndTime().getTime()&lt;<span class="keyword">new</span> Date().getTime()) &#123;</span><br><span class="line">redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).delete(seckillGood.getId());<span class="comment">// 删除缓存数据</span></span><br><span class="line">seckillGoodsMapper.updateByPrimaryKey(seckillGood);<span class="comment">// 向数据库保存记录</span></span><br><span class="line">System.out.println(<span class="string">"移除秒杀商品："</span>+seckillGood.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Maven Profile</strong></p><p>项目开发中会用到很多配置文件，比如 mysql 、redis 以及其他很多的 properties 配置文件。而在我们开发和部署的时候（开发环境、测试环境、生产环境），这些配置文件往往是不同的。而如果需要我们每次去切换也是非常麻烦的。而 Maven Profile 就可以帮我们完成动态选择配置文件的工作。profile 可以让我们定义一系列的配置信息，然后指定其激活条件。</p><ol><li><strong>动态切换模块的端口号</strong>，比如对于 page-web 模块来说，默认端口号为9105.</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置默认属性 方式一</span></span><br><span class="line"><span class="comment">  &lt;properties&gt;</span></span><br><span class="line"><span class="comment">&lt;port&gt;9105&lt;/port&gt;</span></span><br><span class="line"><span class="comment">  &lt;/properties&gt; </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>9105<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span><span class="comment">&lt;!-- 配置默认属性 方式二 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>9205<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>$&#123;port&#125;<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们执行命令 tomcat7:run -P pro 发现以 9205 端口启动，执行命令 tomcat7:run -P dev 发现以 9105 端口启动。 （-P 后边为 profile 的 id）而当我们不指定环境时，默认环境为开发环境。上述代码提供两种配置方式。</p><ol start="2"><li><strong>切换数据库连接配置</strong></li></ol><p>对于数据库操作模块（dao）在 <code>src/main/resources/properties/</code>目录下有 db.properties 配置文件。其中配置了连接数据库的相关配置，数据库驱动、url、用户名、密码等。</p><p>(1) 首先编写不同的环境配置文件，在资源文件夹目录下创建 filter 文件夹，添加多个不同环境下配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 生成环境下的配置文件</span><br><span class="line">env.jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">env.jdbc.url=jdbc:mysql://localhost:3306/pinyougoudb?characterEncoding=utf-8</span><br><span class="line">env.jdbc.username=root</span><br><span class="line">env.jdbc.password=123456</span><br></pre></td></tr></table></figure><p>将原来的 db.properties 文件修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=$&#123;env.jdbc.driver&#125;</span><br><span class="line">jdbc.url=$&#123;env.jdbc.url&#125;</span><br><span class="line">jdbc.username=$&#123;env.jdbc.username&#125;</span><br><span class="line">jdbc.password=$&#123;env.jdbc.password&#125;</span><br></pre></td></tr></table></figure><p>(2)  定义 Profile</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">env</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)  资源过滤与变量替换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 资源过滤与变量替换 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span>&gt;</span>src/main/resources/filters/db_$&#123;env&#125;.properties<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>maven filter可利用指定的xxx.properties文件中对应的key=value对资源文件中的${key}进行替换，最终把你的资源文件中的 username=${key}替换成 username=value</code></p><p>即可完成对配置文件的动态选择。<strong>打包</strong>：对 dao 工程执行 <code>package -P pro</code>打包为jar文件。解压 jar 文件后可以发现 db.properties 配置中被替换为生产环境。<strong>测试运行</strong>时通过 <code>install -P pro</code> 执令，将生产环境添加到本地仓库中。</p><p><strong>切换注册中心连接配置</strong></p><p>在每一个项目中都存在对注册中心的配置，而这个 IP 地址信息在生产环境下肯定是需要进行修改的。</p><ol><li>首先集中配置注册中心地址。</li></ol><p>(1) 在 common 模块下的<code>src/main/resources/properties</code>目录中创建 dubbox.properties 配置文件并配置全局dubbox的地址：<code>address=192.168.25.130:2181</code></p><p>(2) Spring 目录下创建 spring 配置文件 applicationContext-dubbox.xml 配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath*:properties/*.properties"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"$&#123;address&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3) 所有的服务工程与 web 工程都要依赖 pinyougou-common 。 并删除每个工程中关于注册中心地址的配置<br>    (4) 安装 pinyougou-common 到本地仓库，然后测试运行。</p><ol start="2"><li>MavenProfile 配置</li></ol><p>(1) 创建 filters 文件夹，建立多个不同环境的 dubbox 配置。<code>env.address=192.168.25.130:2181</code></p><p>(2) 修改 properties/dubbox.properties 文件。<code>address=${env.address}</code></p><p>(3) 定义 profile</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">env</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(4) 资源配置与变量替换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span>src/main/resources/filters/dubbox_$&#123;env&#125;.properties<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>遇到的问题：</em></p><p>所有的 web 工程在依赖 common 工程的情况下，如果不配置 &lt;dubbo:registry &gt; 的话会报错。<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/error_dubbox_profile.png" alt=""></p><p>原因是 web 工程中无法依赖的 common 公共模块中的 <code>applicationContext-dubbox.xml</code>文件中的配置。存在两种问题: 1.该web工程为依赖 common 模块  2. 加载 spring 容器时，未添加 common 中<code>applicationContext-dubbox.xml</code>文件地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-security.xml,classpath*:spring/applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>param-value 标签中如果有配置，则用逗号分隔即可。classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找。有时候会用模糊匹配的方式去配置多个配置文件。 但是<strong>如果配置文件是在jar包里，模糊匹配就找不到了</strong>。可以用逗号隔开的方式配置多个配置文件。</p><p><strong>MongoDB </strong> </p><p>一个跨平台的，面向文档的数据库。它介于关系数据库和非关系数据库之间，是非关系数据库当中功能最丰富，最像关系数据库的产品。它支持的数据结构非常松散，是类似 JSON 的 BSON 格式，因此可以存储比较复杂的数据类型。</p><p>特性：</p><ul><li>面向集合存储、易于存储对象类型的数据</li><li>模式自由，对象的字段没有固定的限制</li><li>支持动态查询，查询语言强大</li><li>支持完全索引</li><li>支持复制和故障恢复</li><li>使用高效的二进制数据存储，可存放图片、视频等大文件</li><li>支持多种语言</li></ul><p><em>结构层次：</em><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/mongodb%E7%BB%93%E6%9E%84.png" alt="mongodb结构层次"></p><p>使用场景： 数据量较大时，数据价值不高时。比如评论系统、商品足迹信息。</p><p><strong>其他业务功能分析</strong></p><p><em>用户中心</em></p><p>订单中心：订单信息、商品收获、商品评价、物流信息跟踪</p><p>秒杀订单中心：同用户中心</p><p>我的收藏：商品收藏信息的管理</p><p>我的足迹：足迹信息管理</p><p>个人信息管理：信息完善、收货地址信息、密码管理、手机认证</p><p><em>商家后台</em></p><p>订单管理： 查询、发货、退货</p><p>秒杀订单管理：秒杀中的商品在redis中、已完成的秒杀商品在数据库中</p><p><em>运营商后台</em></p><p>订单管理：所有商家订单的信息管理</p><p>秒杀订单管理：查询</p><p><em>评价系统</em></p><p>数据访问层：对 mongodb 数据库的操作</p><p>服务层：逻辑实现</p><p>评价系统在工程中的调用：<br>（1）在商品详细页显示该商品的所有评论信息（CORS 跨域）<br>（2）用户中心 web 工程引用评价服务 可以对已收货的订单追加评价。<br>（3）商家后台 web 工程引用评价服务 可以查看订单的评价<br>（4）运营商后台 web 工程引用评价服务 可以查看订单的评价<br>（5）任务服务 pinyougou-task-service 引用评价服务和搜索服务，统计每个商品的评价更新到 solr 索引库中。</p><p><em>商家首页</em></p><p>商家商品信息的显示、用户也可以直接进入商家的首页选择该商家的商品</p><p><em>资金结算</em></p><p>平台作为第三方，用户付款到平台，然后平台定时给商家结算。存在佣金的问题，平台可能按照不同商品类型收取不同比例的销售提成。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;购物车解决方案&quot;&gt;&lt;a href=&quot;#购物车解决方案&quot; class=&quot;headerlink&quot; title=&quot;购物车解决方案&quot;&gt;&lt;/a&gt;购物车解决方案&lt;/h3&gt;&lt;p&gt;用户在商品详细页点击加入购物车，提交商品 SKU 编号和购买数量，添加到购物车。当用户在未登录的情况下，将此购物车存入 cookies , 在用户登陆的情况下，将购物车数据存入 redis 。如果用户登陆时，cookies 中存在购物车，需要将 cookies 的购物车合并到 redis 中存储.&lt;br&gt;
    
    </summary>
    
      <category term="项目学习" scheme="http://mindyu.com/categories/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="品优购" scheme="http://mindyu.com/tags/%E5%93%81%E4%BC%98%E8%B4%AD/"/>
    
      <category term="电商系统" scheme="http://mindyu.com/tags/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="项目实战" scheme="http://mindyu.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>品优购项目笔记（中）</title>
    <link href="http://mindyu.com/2018/12/20/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
    <id>http://mindyu.com/2018/12/20/品优购项目笔记（中）/</id>
    <published>2018-12-20T02:56:33.000Z</published>
    <updated>2018-12-20T03:06:14.212Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="网页静态化技术"><a href="#网页静态化技术" class="headerlink" title="网页静态化技术"></a>网页静态化技术</h3><p>网页静态化技术和缓存技术的共同点都是为了<strong>减轻数据库的访问压力</strong>，但是具体的应用场景不同，缓存比较适合小规模的数据，而网页静态化比较适合大规模且相对变化不太频繁的数据。另外网页静态化还有利于 SEO（搜索引擎优化）。静态界面通过 Nginx 服务器部署可以达到5万的并发，而Tomcat只有几百。</p><p><em>Freemarker</em> 模板引擎，基于模板来生成文本输出。与web容器无关。</p><p><strong>模板文件的元素</strong></p><ul><li>文本，直接输出的部分</li><li>注释，&lt;#– 该内容不会输出 –&gt;</li><li>插值，${…} 将使用数据模型中的部分来替代输出</li><li>FTL 指令，实现逻辑</li></ul><a id="more"></a><p><strong>生成文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TemplateException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建一个配置对象</span></span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration(Configuration.getVersion());</span><br><span class="line"><span class="comment">// 2. 设置模板所在的目录</span></span><br><span class="line">configuration.setDirectoryForTemplateLoading(<span class="keyword">new</span> File(<span class="string">"E:\\eclipse-workspace\\freemarkerDemo\\src\\main\\resources\\"</span>));</span><br><span class="line"><span class="comment">// 3. 设置默认字符编码</span></span><br><span class="line">configuration.setDefaultEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">// 4. 加载模板，创建一个模板对象</span></span><br><span class="line">Template template = configuration.getTemplate(<span class="string">"test.ftl"</span>);</span><br><span class="line"><span class="comment">// 5. 模板的数据集模型</span></span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">"name"</span>, <span class="string">"Mindyu"</span>);</span><br><span class="line">map.put(<span class="string">"message"</span>, <span class="string">"this is a freemarker demo!"</span>);</span><br><span class="line"><span class="comment">// 6. 模板输出流对象</span></span><br><span class="line">Writer out = <span class="keyword">new</span> FileWriter(<span class="string">"d:\\src\\test.html"</span>);</span><br><span class="line"><span class="comment">// 7. 输出文件</span></span><br><span class="line">template.process(map, out);</span><br><span class="line"><span class="comment">// 8. 关闭输出流对象</span></span><br><span class="line">out.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>FTL 指令</strong></p><ul><li><p>assgin 用于在页面上定义一个变量：&lt;#assign info={“mobile”:”aa”,’address’:’11’} &gt;</p></li><li><p>include 用于模板文件的嵌套：&lt;#include “head.ftl”&gt;</p></li><li><p>if 指令 条件判断语句</p></li><li><p>list 指令 对集合的遍历 (goods_index 获得索引)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list goodsList as goods&gt;</span><br><span class="line">$&#123;goods_index+<span class="number">1</span>&#125; 商品名称： $&#123;goods.name&#125; 价格：$&#123;goods.price&#125;&lt;br&gt;</span><br><span class="line">&lt;<span class="regexp">/#list&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>内建函数</strong> （语法格式：变量+?+函数名称）</p><ul><li>${goodsList?size} 获取集合的大小</li><li>&lt;#assign object=text?eval&gt; 转换 JSON 字符串为对象</li><li>${today?date} 当前日期 （dataModel.put(“today”, new Date());）</li><li>${today?time} 当前时间</li><li>${today?datetime} 当前日期+时间</li><li>${today?string(“yyyy年MM月”)} 日期格式化</li><li>${number} 数字会以每三位一个分隔符显示 123,456,789</li><li>${number?c} 将数字转换为字符串</li><li>空值处理运算符<ul><li>variable?? 判断变量是否存在，存在则返回true</li><li>${aaa!’-‘} 缺失变脸默认值,若aaa为空值则使用默认值‘-’</li></ul></li><li>运算符<ul><li>算数运算符 +、-、*、/</li><li>逻辑运算符 &amp;&amp; || ! </li><li>比较运算符 = 、==、!=、&gt;(gt)、&lt;(lt)、&gt;=(gte)、&lt;=(lte)</li></ul></li></ul><p><strong>商品详情页的数据显示</strong></p><p>​    创建 pinyougou-page-interface 工程，创建 com.pinyougou.page.service 包,包下创建接口 ItemPageService。然后再创建服务层，来实现接口方法。pom 文件中添加 freemarker 依赖。Spring 配置文件中添加 freemarker 的bean.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"freemarkerConfig"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateLoaderPath"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/ftl/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务层生成静态页面的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">genItemHtml</span><span class="params">(Long goodsId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Configuration configuration = freeMarkerConfig.getConfiguration();</span><br><span class="line">Template template = configuration.getTemplate(<span class="string">"item.ftl"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数据模型</span></span><br><span class="line">Map&lt;Object, Object&gt; dataModel = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 1.商品主表信息</span></span><br><span class="line">TbGoods goods = goodsMapper.selectByPrimaryKey(goodsId);</span><br><span class="line">dataModel.put(<span class="string">"goods"</span>, goods);</span><br><span class="line"><span class="comment">// 2.商品详细信息</span></span><br><span class="line">TbGoodsDesc goodsDesc = goodsDescMapper.selectByPrimaryKey(goodsId);</span><br><span class="line">dataModel.put(<span class="string">"goodsDesc"</span>, goodsDesc);</span><br><span class="line"><span class="comment">// 3.读取商品分类</span></span><br><span class="line">String itemCat1 = itemCatMapper.selectByPrimaryKey(goods.getCategory1Id()).getName();</span><br><span class="line">String itemCat2 = itemCatMapper.selectByPrimaryKey(goods.getCategory2Id()).getName();</span><br><span class="line">String itemCat3 = itemCatMapper.selectByPrimaryKey(goods.getCategory3Id()).getName();</span><br><span class="line">dataModel.put(<span class="string">"itemCat1"</span>, itemCat1);</span><br><span class="line">dataModel.put(<span class="string">"itemCat2"</span>, itemCat2);</span><br><span class="line">dataModel.put(<span class="string">"itemCat3"</span>, itemCat3);</span><br><span class="line"><span class="comment">// 4.读取SKU列表信息</span></span><br><span class="line">TbItemExample example = <span class="keyword">new</span> TbItemExample();</span><br><span class="line">Criteria criteria = example.createCriteria();</span><br><span class="line">criteria.andGoodsIdEqualTo(goodsId);<span class="comment">// 设置SPU信息</span></span><br><span class="line">criteria.andStatusEqualTo(<span class="string">"1"</span>);<span class="comment">// 存在状态</span></span><br><span class="line">example.setOrderByClause(<span class="string">"is_default desc"</span>);<span class="comment">// 按是否默认降序排序,目的是为了方便前端可以直接取出默认选项</span></span><br><span class="line">List&lt;TbItem&gt; itemList = itemMapper.selectByExample(example);</span><br><span class="line">dataModel.put(<span class="string">"itemList"</span>, itemList);</span><br><span class="line"></span><br><span class="line">Writer out = <span class="keyword">new</span> FileWriter(<span class="string">"D:\\src\\item\\"</span>+goodsId+<span class="string">".html"</span>);</span><br><span class="line">template.process(dataModel, out);</span><br><span class="line">out.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (TemplateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运营商管理后台引入依赖，因为需要在运营商审核之后生成静态页面。</p><p>freemarker 图片列表的生成（扩展属性、规格列表类似）</p><p>​    通过 assign指令，将字符串转换为对象格式<code>&lt;#assign imageList=goodsDesc.itemImages?eval /&gt;</code>，然后在图片显示区遍历图片对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认第一个预览--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"preview"</span> <span class="attr">class</span>=<span class="string">"spec-preview"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> (<span class="attr">imageList</span>?<span class="attr">size</span>&gt;</span>0)&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"jqzoom"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">jqimg</span>=<span class="string">"$&#123;imageList[0].url&#125;"</span> <span class="attr">src</span>=<span class="string">"$&#123;imageList[0].url&#125;"</span> <span class="attr">width</span>=<span class="string">"400px"</span> <span class="attr">height</span>=<span class="string">"400px"</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下方的缩略图--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"spec-scroll"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"prev"</span>&gt;</span>&amp;lt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--左右按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"items"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">imageList</span> <span class="attr">as</span> <span class="attr">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;item.url&#125;"</span> <span class="attr">bimg</span>=<span class="string">"$&#123;item.url&#125;"</span> <span class="attr">onmousemove</span>=<span class="string">"preview(this)"</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span>&amp;gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>商品详情页-前端逻辑</strong></p><p>​    静态页面的动态效果，就需要 angularjs 来实现。比如商品购买数量的点击事件对应到angularjs的变量中、规格的选择。都已变量的形式与页面进行绑定。</p><p>​    不同规格的标题、价格等信息都不相同（SKU信息），为了实现静态页面的效果可以在将SKU信息生成到静态页面。以变量的形式保存在前端。然后用户点击不同规格时，去匹配对应的SKU列表中的某一条数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//控制层 </span></span><br><span class="line">app.controller(<span class="string">'itemController'</span> ,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line"> $scope.specificationItems=&#123;&#125;;<span class="comment">// 存储用户选择的规格</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 数量加减</span></span><br><span class="line"> $scope.addNum=<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"> $scope.num+=x;</span><br><span class="line"> <span class="keyword">if</span> ($scope.num&lt;<span class="number">1</span>) $scope.num=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 选择规格</span></span><br><span class="line"> $scope.selectSpecification=<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line"> $scope.specificationItems[key]=value;</span><br><span class="line"> searchSku();<span class="comment">// 查询sku</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 判断规格是否被选中</span></span><br><span class="line"> $scope.isSelected=<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>($scope.specificationItems[key]==value)&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> $scope.sku=&#123;&#125;;</span><br><span class="line"> <span class="comment">// 加载默认的sku信息</span></span><br><span class="line"> $scope.loadSku=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> $scope.sku=skuList[<span class="number">0</span>];</span><br><span class="line"> $scope.specificationItems=<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify($scope.sku.spec)); <span class="comment">// 深克隆</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 判断两个对象是否匹配</span></span><br><span class="line"> isEqual=<span class="function"><span class="keyword">function</span>(<span class="params">map1,map2</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> map1)&#123;</span><br><span class="line"> <span class="keyword">if</span>(map1[k]!=map2[k])&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> map2)&#123;</span><br><span class="line"> <span class="keyword">if</span>(map2[k]!=map1[k])&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 根据规格查询sku信息</span></span><br><span class="line"> searchSku=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;skuList.length;i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>( isEqual($scope.specificationItems, skuList[i].spec) )&#123;</span><br><span class="line"> $scope.sku=skuList[i];</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> $scope.sku=&#123;<span class="attr">id</span>:<span class="number">0</span>,<span class="attr">title</span>:<span class="string">'--------'</span>,<span class="attr">price</span>:<span class="number">0</span>&#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 添加到购物车</span></span><br><span class="line"> $scope.addToCart=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> alert(<span class="string">'sku_id:'</span>+ $scope.sku.id);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>系统模块的对接</strong></p><p>​    运营商管理后台在审核之后进行静态页面的生成。创建 page-web 工程，用于存储生成页面。实现前端 angular 动态逻辑和静态模板的实现。</p><p>​    修改搜索系统模块中的search.html。点击搜索页面的图片跳转到静态页面。</p><h3 id="消息中间件解决方案-JMS"><a href="#消息中间件解决方案-JMS" class="headerlink" title="消息中间件解决方案 JMS"></a>消息中间件解决方案 JMS</h3><p><em>消息中间件</em></p><p>​    消息中间件利用<strong>高效可靠的消息传递机制进行平台无关的数据交流</strong>，并基于数据通信来进行分布式系统的集成。通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。对于消息中间件，常见的角色大致也就有 Producer（生产者）、Consumer（消费者）。</p><p><em>常见产品:</em></p><ul><li>ActiveMQ  Apache 出品，最流行的，能力强劲的开源消息总线。</li><li>RabbitMQ AMQP 协议的领导实现，支持多种场景。</li><li>ZeroMQ 史上最快的消息队列系统</li><li>Kafka 高吞吐，在一台普通的服务器上就可以达到 10W/s的吞吐速率；完全的分布式系统。适合处理海量数据。</li></ul><p><em>JMS（Java 消息服务）</em></p><p>​     Java 平台上有关面向消息中间件的技术规范，它便于消息系统中的 Java 应用程序进行消息交换，并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发。<strong>是一系列接口规范</strong>。</p><p>​    消息是 JMS 中的一种类型对象，由两部分组成：<strong>报头和消息主体</strong>。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。消息正文格式：</p><ul><li>TextMessage–一个字符串对象</li><li>MapMessage–一套名称-值对</li><li>ObjectMessage–一个序列化的 Java 对象</li><li>BytesMessage–一个字节的数据流</li><li>StreamMessage – Java 原始值的数据流</li></ul><p><em>JMS 消息传递类型</em></p><ul><li>点对点模式：一个生产者一个消费者，存在多个消费者时，只有一个消费者可以获取消息。（未消费的消息会存储在队列中直到被消费）</li><li>发布订阅模式：一个生产者产生消息并进行发送后，可以由多个消费者进<br>行接收。（如果消息发送时没有消费者，那么这个消息无效，不会再被消费）</li></ul><p><em>安装</em></p><p>​    下载、解压、赋权、启动服务（./activemq start）。ActiveMQ 管理页面端口8161。（用户：admin 密码：admin）<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/activemq.png" alt="activemq管理界面"></p><p><em>点对点模式案例</em></p><p>​    引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.13.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    消息生产者:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line"><span class="comment">// 1. 创建连接工厂</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://192.168.25.130:61616"</span>);</span><br><span class="line"><span class="comment">// 2. 创建连接对象</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">// 3. 启动连接</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">// 4. 获取session（会话对象） 参数1：是否启动事务  参数2：消息确认方式</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">// 5. 创建队列对象</span></span><br><span class="line">Queue queue = session.createQueue(<span class="string">"test-queue"</span>);</span><br><span class="line"><span class="comment">// 6. 创建消息生产者对象</span></span><br><span class="line">MessageProducer producer = session.createProducer(queue);</span><br><span class="line"><span class="comment">// 7. 创建消息对象（TextMessage）</span></span><br><span class="line">TextMessage message = session.createTextMessage(<span class="string">"这是一条text消息"</span>);</span><br><span class="line"><span class="comment">// 8. 发送消息 </span></span><br><span class="line">producer.send(message);</span><br><span class="line"><span class="comment">// 9. 关闭资源</span></span><br><span class="line">producer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：创建session的第二个参数为消息确认模式：AUTO_ACKNOWLEDGE = 1 自动确认、CLIENT_ACKNOWLEDGE = 2 客户端手动确认、DUPS_OK_ACKNOWLEDGE = 3 自动批量确认、SESSION_TRANSACTED = 0 事务提交并确认。</p><p>​    消息消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1. 创建连接工厂</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://192.168.25.130:61616"</span>);</span><br><span class="line"><span class="comment">// 2. 创建连接对象</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">// 3. 启动连接</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">// 4. 获取session（会话对象） 参数1：是否启动事务 参数2：消息确认方式</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">// 5. 创建队列对象</span></span><br><span class="line">Queue queue = session.createQueue(<span class="string">"test-queue"</span>);</span><br><span class="line"><span class="comment">// 6. 创建消息的消费者对象</span></span><br><span class="line">MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line"><span class="comment">// 7. 设置监听</span></span><br><span class="line">consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">TextMessage textMessage = (TextMessage) message;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">""</span>+ textMessage.getText());</span><br><span class="line">&#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 8. 等待键盘输入</span></span><br><span class="line">System.in.read();</span><br><span class="line"><span class="comment">// 9. 关闭资源</span></span><br><span class="line">consumer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>发布订阅模式</em></p><p>​    只需要修改上述第五步中，创建对应的主题对象即可<code>Topic topic = session.createTopic(&quot;test-topic&quot;);</code></p><p><em>JMS 应用</em></p><p>​    运营商后台管理模块中，商品审核之后需要导入 solr 索引库和生成静态页面。对于这种同步调用的情况存在<strong>耦合度高、后期不易维护、同步执行、导致审核过程缓慢、用户体验性不好</strong>等多种问题。我们可以采用消息中间件来进行解耦，实现运营商后端与搜索服务的零耦合。运营商执行审核后，向activeMQ 发送消息（SKU列表），搜索服务从activeMQ接收到消息执行导入操作。</p><p>​    然后搜索模块采用 solr 系统实现，那么我们可以采用点对点的方式实现消息服务，而静态页面生成服务，由于静态页面存储于多个服务器，并且各个服务器数据相同，需要实现服务器之间同步更新的效果，所以需要采用发布订阅的方式实现。</p><p>导入搜索系统的消息生产者实现：</p><ol><li>解除耦合（移除itemService服务依赖）</li><li>引入activeMQ客户端依赖、spring-jms依赖。</li><li>创建jms生产者配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://192.168.25.130:61616"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>      </span><br><span class="line">   <span class="comment">&lt;!--这个是队列目的地，点对点的  文本信息--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueSolrDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"pinyougou_queue_solr"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!--这个是队列目的地，点对点的  文本信息，删除操作--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueSolrDeleteDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"pinyougou_queue_solr_delete"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这个是订阅模式  生成页面--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicPageDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"pinyougou_topic_page"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--这个是订阅模式  删除页面--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicPageDeleteDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"pinyougou_topic_page_delete"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>web.xml文件中引入该配置文件(contextConfigLocation)</li><li>代码实现，注入所用的对象服务(jmsTemplate、queueSolrDestination、queueSolrDeleteDestination)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/********导入到索引库**********/</span><br><span class="line">// 得到需要的SKU列表</span><br><span class="line">List&lt;TbItem&gt; itemList = goodsService.findItemListByGoodsIdAndStatus(ids, status);</span><br><span class="line">// 导入到solr </span><br><span class="line">// itemSearchService.importItemList(itemList);</span><br><span class="line">final String jsonString = JSON.toJSONString(itemList);// 转换为json字符串</span><br><span class="line"></span><br><span class="line">jmsTemplate.send(queueSolrDestination, new MessageCreator() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Message createMessage(Session session) throws JMSException &#123;</span><br><span class="line">return session.createTextMessage(jsonString);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/********生成静态页面**********/</span><br><span class="line">/*for (final Long id : ids) &#123;</span><br><span class="line">itemPageService.genItemHtml(id);</span><br><span class="line">&#125;*/</span><br><span class="line">jmsTemplate.send(topicPageDestination, new MessageCreator() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Message createMessage(Session session) throws JMSException &#123;</span><br><span class="line">return session.createObjectMessage(ids);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>消息消费者（搜索服务）</p><ol><li>添加 activeMQ 依赖</li><li>添加spring配置文件  applicationContext-jms-consumer.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://192.168.25.130:61616"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这个是队列目的地，导入到索引库--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueSolrDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"pinyougou_queue_solr"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 消息监听容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"queueSolrDestination"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"itemSearchListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这个是队列目的地，删除索引库--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueSolrDeleteDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"pinyougou_queue_solr_delete"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 消息监听容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"queueSolrDeleteDestination"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"itemDeleteListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>消息监听类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemSearchListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ItemSearchService itemSearchService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">TextMessage textMessage = (javax.jms.TextMessage) message;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String text = textMessage.getText();</span><br><span class="line">System.out.println(<span class="string">"监听到消息："</span>+text);</span><br><span class="line"></span><br><span class="line">List&lt;TbItem&gt; itemlist = JSON.parseArray(text,TbItem.class);</span><br><span class="line">itemSearchService.importItemList(itemlist);</span><br><span class="line">System.out.println(<span class="string">"导入到solr索引库"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品删除（移除solr索引库记录）类似。以及网页静态化，主要是消息模式为发布订阅模式。运营商执行商品审核后，向 activeMQ 发送消息（商品 ID集合），网页生成服务从 activeMQ 接收到消息后执行网页生成操作。</p><p>系统模块依赖关系图<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%9B%BE_13.png" alt="系统模块依赖图"></p><p><em>存在的问题</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'dataSource' defined in URL [jar:file:/D:/Program%20Files/Maven/repository/com/pinyougou/pinyougou-dao/0.0.1-SNAPSHOT/pinyougou-dao-0.0.1-SNAPSHOT.jar!/spring/applicationContext-dao.xml]: Could not resolve placeholder 'jdbc.url' in string value "&#123;jdbc.url&#125;"; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'jdbc.url' in string value "&#123;jdbc.url&#125;"</span><br></pre></td></tr></table></figure><p>提示找不到配置文件中的jdbc.url配置。是因为在page-service中，在生成静态页面时会用到一个页面生成路径的配置信息。然后在spring中的配置文件中设置<code>&lt;context:property-placeholder location=&quot;classpath:config/page.properties&quot; /&gt;</code> 。但是该服务依赖dao模块，这个模块中的数据库连接池的配置信息存放在 properties/db.properties 中，然后在 dao 模块中配置了 <code>&lt;context:property-placeholder location=&quot;classpath*:properties/*.properties&quot; /&gt;</code> 。此时 page-service 模块中的配置会覆盖该配置，就导致了无法访问 properties/db.properties 中数据库连接池的配置信息。解决方法就是使 <code>&lt;context:property-placeholder location=&quot;classpath*:*/*.properties&quot; /&gt;</code> 包含 dao 模块中的加载配置即可。</p><h3 id="SpringBoot-框架与短信解决方案"><a href="#SpringBoot-框架与短信解决方案" class="headerlink" title="SpringBoot 框架与短信解决方案"></a>SpringBoot 框架与短信解决方案</h3><p><strong>Spring Boot入门</strong></p><p>Spring 为企业级 Java 开发提供了一种相对简单的方法，通过依赖注入和面向切面编程，用简单的 Java 对象（Plain Old Java Object，POJO）实现了 EJB 的功能。</p><p>虽然 Spring 的组件代码是轻量级的，但它的配置却是重量级的。开始的基于XML配置，Spring2.5引入基于注解的组件扫描，3.0引入基于java的配置。主要是希望简化繁琐的配置。另外项目依赖管理也是一个难题，依赖的版本库会不会起冲突。</p><p>而Spring Boot解决了上述问题，它致力于帮助开发者更容易的创建基于 Spring 的应用程序和服务，让更多人的人更快的对 Spring 进行入门体验，为 Spring生态系统提供了一种固定的、<strong>约定优于配置风格</strong>的框架。</p><p>Spring Boot 具有的特性：</p><ul><li>提供更快的入门体验</li><li>开箱即用，没有代码生成，也无需XML配置。也可以实现修改默认值。</li><li>提供大型项目中常见的非功能特性，如嵌入式服务器、安全、指标。</li><li>并不是Spring功能的增强，而是提供一种快速使用Spring的方式。</li></ul><p><em>Spring Boot Demo</em></p><ol><li>添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web的启动器， 通过依赖传递引入web项目所需的jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>定义引导类 Application</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@SpringBootApplication 其实就是以下三个注解的总和</span></span><br><span class="line"><span class="comment">@Configuration： 用于定义一个配置类</span></span><br><span class="line"><span class="comment">@EnableAutoConfiguration ：Spring Boot 会自动根据你 jar包的依赖来自动配置项目。</span></span><br><span class="line"><span class="comment">@ComponentScan： 告诉 Spring 哪个 packages 的用注解标识的类会被 spring 自动扫描并且装入 bean容器。*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Spring MVC 实现 hello world输出</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloWorldController &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private Environment env;// 用于获取 application.properties 配置中的属性</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/info&quot;)</span><br><span class="line">public String info() &#123;</span><br><span class="line">return &quot;hello world. url:&quot;+env.getProperty(&quot;url&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>启动引导类即可， <a href="http://localhost:8080/info" target="_blank" rel="noopener">http://localhost:8080/info</a></li></ol><p>常用配置：</p><ul><li>端口号修改（只需要在  application.properties 文件中配置 server.port）</li><li>读取配置文件信息（注入 Environment 对象，使用getProperty方法）</li><li>热部署（pom文件中添加 spring-boot-devtools 依赖即可）</li></ul><p><strong>Spring Boot与ActiveMQ整合</strong>    </p><ol><li>使用内嵌服务 spring-boot-starter-activemq</li><li>创建消息生产者</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class QueueController &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/send&quot;)</span><br><span class="line">public void sendMessage(String text) &#123;</span><br><span class="line">jmsMessagingTemplate.convertAndSend(&quot;spring_boot_text&quot;, text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建消息消费者</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class Consumer &#123;</span><br><span class="line"></span><br><span class="line">@JmsListener(destination=&quot;spring_boot_text&quot;)// destination和消息生产者相同</span><br><span class="line">public void readMessage(String text) &#123;</span><br><span class="line">System.out.println(&quot;接收到消息：&quot;+text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>启动服务即可。<a href="http://localhost:8088/send.do?text=aaaaaa" target="_blank" rel="noopener">http://localhost:8088/send.do?text=aaaaaa</a> Spring Boot内置了ActiveMQ服务。</li></ol><p>常用配置：</p><p><em>注：引入外部的ActiveMQ服务</em><code>spring.activemq.broker-url=tcp://192.168.25.130:61616</code></p><p><strong>短信解决方案</strong></p><p><em>项目需求</em></p><p>构建一个通用的短信发送服务（独立于品优购的单独工程），接收 activeMQ 的消息（MAP类型） 消息包括手机号（mobile）、短信模板号（template_code）、签名（sign_name）、参数字符串（param ）。该微服务通过短信验证码平台的API，实现验证码的发送功能。</p><p><em>验证码发送平台</em></p><p>​    由于阿里大于注册需要认证，比较繁琐，所以此处先不实现验证码发送模块。腾讯云的短信服务可以个人认证，但是需要域名备案，这个功能先预留，后期继续完成。</p><p><strong>用户注册模块</strong></p><p><em>工程搭建</em></p><ol><li>用户服务接口层 user-interface</li><li>用户服务实现层 user-service</li><li>用户中心控制层 user-web<ul><li>添加web.xml</li><li>引入依赖 user接口、spring依赖</li><li>添加 Spring 配置文件</li><li>静态原型页面</li></ul></li></ol><p><em>注册判断短信验证码</em></p><p>​    输入手机号，用户点击“获取验证码”，向后端传递手机号。后端随机生成六位数字作为验证码，同时将其保存在redis中（手机号作为key、验证码作为value）, 同时向 ActiveMQ 发送消息。然后短信监听服务接受消息然后向验证码平台发送消息。</p><p>​    用户点击完成注册时，后端根据手机号查询用户输入的验证码与redis中的验证码是否匹配，如果匹配那么就执行注册，向数据库添加一条用户记录，否则提示不能完成注册。</p><p>服务层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSmsCode</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.生成六位随机码</span></span><br><span class="line">    String smsCode = (<span class="keyword">long</span>)(Math.random()*<span class="number">1000000</span>)+<span class="string">""</span>;</span><br><span class="line">    System.out.println(<span class="string">"验证码："</span>+smsCode);</span><br><span class="line">    <span class="comment">// 2.将验证码存入redis</span></span><br><span class="line">    redisTemplate.boundHashOps(<span class="string">"smscode"</span>).put(phone, smsCode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.发送相应的消息给ActiveMQ</span></span><br><span class="line">    <span class="comment">// 待完成..... 将消息发送给ActiveMQ即可</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkSmsCode</span><span class="params">(String phone, String smsCode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取redis中的验证码</span></span><br><span class="line">    String systemCode = (String) redisTemplate.boundHashOps(<span class="string">"smscode"</span>).get(phone);</span><br><span class="line">    <span class="keyword">if</span> (systemCode == <span class="keyword">null</span> || !systemCode.equals(smsCode)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(@RequestBody TbUser user,String smsCode)</span></span>&#123;</span><br><span class="line">     <span class="comment">// 用户注册前进行校验（用户输入的验证码和redis中的验证码进行比较）</span></span><br><span class="line">    <span class="keyword">if</span> (!userService.checkSmsCode(user.getPhone(), smsCode)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"验证码有误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        userService.add(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"注册成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"注册失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/createSmsCode"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">createSmsCode</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (PhoneFormatCheckUtils.isPhoneLegal(phone)) &#123;</span><br><span class="line">        userService.createSmsCode(phone);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"验证码发送成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"验证码发送失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端控制层：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> //控制层 </span><br><span class="line">app.controller(&apos;userController&apos; ,function($scope,$controller,userService)&#123;</span><br><span class="line"></span><br><span class="line">// 注册</span><br><span class="line">$scope.register=function()&#123;</span><br><span class="line">// 判断两次输入密码是否一致</span><br><span class="line">if ($scope.entity.password!=$scope.password) &#123;</span><br><span class="line">alert(&quot;两次输入的密码不一致，请重新输入&quot;);</span><br><span class="line">$scope.entity.password = &quot;&quot;;</span><br><span class="line">$scope.password = &quot;&quot;;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">// 新增</span><br><span class="line">userService.add($scope.entity,$scope.smsCode).success(</span><br><span class="line">function(response)&#123;</span><br><span class="line">alert(response.message);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 生成验证码</span><br><span class="line">$scope.createSmsCode=function()&#123;</span><br><span class="line">userService.createSmsCode($scope.entity.phone).success(</span><br><span class="line">function(response)&#123;</span><br><span class="line">alert(response.message);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>单点登录解决方案</strong></p><p>​    单点登录（Single Sign On），是目前比较流行的企业业务整合的解决方案之一。SSO 的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。对于分布式的项目，多个子系统分别部署在不同的服务器中，此时采用传统的 session 来记录用户信息是无法实现的。</p><p>CAS</p><p>​    CAS 为 Web 应用系统提供一种可靠的单点登录方法。CAS 包含两个部分： CAS Server 和 CAS Client。CAS Server 需要独立部署，主要负责对用户的认证工作；CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到 CAS Server。</p><p>原理图<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/cas%E5%8E%9F%E7%90%86.png" alt="cas原理"></p><p>访问流程：</p><ol><li>访问服务：用户发送请求访问应用系统提供的服务资源（也是cas client）</li><li>定向认证：cas client 会<strong>重定向(浏览器url会变化)</strong>用户请求到 cas server </li><li>用户认证：和用户进行身份认证</li><li>发送票据：cas server生成一个ticket ，先给浏览器用户，然后浏览器将其带入到cas client端</li><li>验证票据：cas client 向 cas server 请求验证 ticket 的合法性</li><li>传输用户信息：验证通过，cas server 会将用户的信息传输给cas client</li></ol><p><em>cas 服务端部署</em></p><p>​    cas 服务端就是一个 war 包，解压对应的压缩包，将cas-server-webapp-4.0.0.war放入tomcat的webapps下，启动tomcat完成解压。</p><p>常用配置修改</p><ol><li>默认用户和密码为 casuser、Mellon。可以在 cas 的 WEB-INF-&gt;deployerConfigContext.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"primaryAuthenticationHandler"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.authentication.AcceptUsersAuthenticationHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"casuser"</span> <span class="attr">value</span>=<span class="string">"Mellon"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"admin"</span> <span class="attr">value</span>=<span class="string">"admin"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>端口号修改：修改tomcat的默认端口（conf/server.xml），然后 cas 的 WEB-INF/cas.properties 修改<code>server.name=http://localhost:9100</code></li><li>单点退出然后跳转到目标页面 cas 的 WEB-INF/cas-servlet.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logoutAction"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.web.flow.LogoutAction"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:servicesManager-ref</span>=<span class="string">"servicesManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:followServiceRedirects</span>=<span class="string">"$&#123;cas.logout.followServiceRedirects:true&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>去除https认证，cas 默认使用的是 https 协议，该协议需要申请 SSL 证书。一般在开发测试阶段可以使用http协议即可。</li></ol><ul><li>修改 cas 的 WEB-INF/deployerConfigContext.xml，增加 p:requireSecure=”false”</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Required for proxy ticket mechanism. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"proxyAuthenticationHandler"</span>   <span class="attr">class</span>=<span class="string">"org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:httpClient-ref</span>=<span class="string">"httpClient"</span> <span class="attr">p:requireSecure</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改 cas 的/WEB-INF/spring-configuration/ticketGrantingTicketCookieGenerator.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ticketGrantingTicketCookieGenerator"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.web.support.CookieRetrievingCookieGenerator"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookieSecure</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookieMaxAge</span>=<span class="string">"3600"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookieName</span>=<span class="string">"CASTGC"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookiePath</span>=<span class="string">"/cas"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改 cas 的 WEB-INF/spring-configuration/warnCookieGenerator.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"warnCookieGenerator"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.web.support.CookieRetrievingCookieGenerator"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookieSecure</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookieMaxAge</span>=<span class="string">"3600"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookieName</span>=<span class="string">"CASPRIVACY"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookiePath</span>=<span class="string">"/cas"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><em>注：参数 p:cookieSecure=”true”，TRUE 为采用 HTTPS 验证，FALSE 为不采用 https 验证。参数 p:cookieMaxAge=”-1”，是 COOKIE 的最大生命周期，-1 为无生命周期，即只在当前打开的窗口有效，关闭或重新打开其它窗口，仍会要求验证。可以根据需要修改为大于 0 的数字，比如 3600 等，意思是在 3600 秒内，打开任意窗口，都不需要验证。</em></p><p><em>CAS 客户端Demo</em></p><p>创建 casclient_demo1 工程(war) 引入cas client依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cas --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jasig.cas.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-client-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">webResources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp/WEB-INF<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>WEB-INF<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9001<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加 web.xml 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于单点退出，该过滤器用于实现单点登出功能，可选配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.jasig.cas.client.session.SingleSignOutHttpSessionListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 该过滤器用于实现单点登出功能，可选配置。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Single Sign Out Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.session.SingleSignOutFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Single Sign Out Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 该过滤器负责用户的认证工作，必须启用它 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CASFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.authentication.AuthenticationFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>casServerLoginUrl<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://localhost:9100/cas/login<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里的 server 是服务端的 IP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>serverName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://localhost:9001<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CASFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 该过滤器负责对 Ticket 的校验工作，必须启用它 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Validation Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>casServerUrlPrefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://localhost:9100/cas<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>serverName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://localhost:9001<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Validation Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 该过滤器负责实现 HttpServletRequest 请求的包裹， 比如允许开发者通过 HttpServletRequest 的 getRemoteUser() 方法获得 SSO 登录用户的登录名，可选配置。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS HttpServletRequest Wrapper Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        org.jasig.cas.client.util.HttpServletRequestWrapperFilter</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS HttpServletRequest Wrapper Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 该过滤器使得开发者可以通过 org.jasig.cas.client.util.AssertionHolder 来获取用户的登录名。 比如 AssertionHolder.getAssertion().getPrincipal().getName()。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Assertion Thread Local Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.util.AssertionThreadLocalFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Assertion Thread Local Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主页面 index.jsp <code>&lt;%=request.getRemoteUser()%&gt;</code> 获取远程登录用户名</p><p>然后再创建客户端工程2。启动cas服务端和cas客户端，然后<code>http://localhost:9001</code> 和9002端口，都会跳转到cas的登录页面。实现单点登录。单点退出只需访问 <code>http://localhost:9100/cas/logout</code>即可。</p><p><em>CAS 服务端数据源设置</em></p><p>​    使用项目中 user 表中的用户信息来实现登录验证。</p><ol><li>修改 cas 服务端的 WEB-INF/deployerConfigContext.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:jdbcUrl</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/pinyougoudb?characterEncoding=utf8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:user</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:password</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认密码解码方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"passwordEncoder"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.jasig.cas.authentication.handler.DefaultPasswordEncoder"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">c:encodingAlgorithm</span>=<span class="string">"MD5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:characterEncoding</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dbAuthHandler"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:sql</span>=<span class="string">"select password from tb_user where username = ?"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:passwordEncoder-ref</span>=<span class="string">"passwordEncoder"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!----------------------另外配置认证管理器-------------------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"proxyAuthenticationHandler"</span> <span class="attr">value-ref</span>=<span class="string">"proxyPrincipalResolver"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 默认的认证处理方式 &lt;entry key-ref="primaryAuthenticationHandler" value-ref="primaryPrincipalResolver" /&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"dbAuthHandler"</span> <span class="attr">value-ref</span>=<span class="string">"primaryPrincipalResolver"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置了数据库连接池相关信息，那么就需要把数据库相应的jar包引入</li></ol><p><em>CAS 服务端界面改造</em></p><p>​    cas server 服务端提供了默认的登录界面，那我们如何修改为我们自己需要的登录页面了。步骤如下：</p><ol><li>将 login.html 拷贝到 cas 系统下的  WEB-INF\view\jsp\default\ui 目录下</li><li>将 css、js、img 等静态资源文件夹拷贝到 cas 目录下。web 工程的根目录</li><li>将原来的 casLoginView.jsp 改名（以做参照模板），将 login.html 改名为 casLoginView.jsp<ul><li>添加 jsp 指令</li><li>修改 form 标签，保留原页面样式</li><li>修改用户名输入框，保留原页面样式</li><li>修改密码框，保留源页面样式</li><li>修改登录按钮，保留原页面的样式</li><li>错误提示<code>&lt;form:errors path=&quot;*&quot; id=&quot;msg&quot; cssClass=&quot;errors&quot; element=&quot;div&quot; htmlEscape=&quot;false&quot; /&gt;</code></li></ul></li></ol><p>注：错误提示信息默认为英文，使用了国际化标准。在 cas 的  WEB-INF\classes 中的 messages_zh_CN.properties 文件中添加配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">authenticationFailure.AccountNotFoundException=用户名或密码错误</span><br><span class="line">authenticationFailure.FailedLoginException=用户名或密码错误</span><br></pre></td></tr></table></figure><p>第一个是用户名不存在时的错误提示<br>    第二个是密码错误的提示</p><p>修改 cas-servlet.xml，设置国际化为 zn_CN（默认为 en ） 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.CookieLocaleResolver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:defaultLocale</span>=<span class="string">"zh_CN"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>国际化：i18n。英文为：internationalization 。18表示中间的字符数。</p><p><strong>用户中心实现单点登录（cas client与Spring Security集成）</strong></p><ol><li>引入 springSecurity、cas 客户端和 springSecurity Cas 整合包依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-security配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring-security-cas --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-cas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jasig.cas.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-client-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>web.xml 添加 spring-security 过滤器，设置首页</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>home-index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 省略post乱码过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-security.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>构建 UserDetailsServiceImpl 认证类，实现UserDetailsService接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"经过认证类："</span>+username);</span><br><span class="line">Collection&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 角色固定了，如果存在多种角色的话，那么此处可能会去数据库中查找来实现动态设置用户角色</span></span><br><span class="line">authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_USER"</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(username, <span class="string">""</span>, authorities);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>添加 spring-security.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans:beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/security"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:beans</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 匿名访问资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/css/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/js/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/img/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/plugins/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册登陆 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/register.html"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/user/add.do"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/user/createSmsCode.do"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--   entry-point-ref  入口点引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">use-expressions</span>=<span class="string">"false"</span> <span class="attr">entry-point-ref</span>=<span class="string">"casProcessingFilterEntryPoint"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/**"</span> <span class="attr">access</span>=<span class="string">"ROLE_USER"</span>/&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">csrf</span> <span class="attr">disabled</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- custom-filter为过滤器， position 表示将过滤器放在指定的位置上，before表示放在指定位置之前  ，after表示放在指定的位置之后  --&gt;</span>           </span><br><span class="line">        <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">"casAuthenticationFilter"</span>  <span class="attr">position</span>=<span class="string">"CAS_FILTER"</span> /&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">"requestSingleLogoutFilter"</span> <span class="attr">before</span>=<span class="string">"LOGOUT_FILTER"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">"singleLogoutFilter"</span> <span class="attr">before</span>=<span class="string">"CAS_FILTER"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- CAS入口点 开始 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"casProcessingFilterEntryPoint"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.cas.web.CasAuthenticationEntryPoint"</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 单点登录服务器登录URL --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"http://localhost:9100/cas/login"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"serviceProperties"</span> <span class="attr">ref</span>=<span class="string">"serviceProperties"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"serviceProperties"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.cas.ServiceProperties"</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!--service 配置自身工程的根地址+/login/cas   --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"service"</span> <span class="attr">value</span>=<span class="string">"http://localhost:9106/login/cas"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- CAS入口点 结束 --&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 认证过滤器 开始 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"casAuthenticationFilter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.cas.web.CasAuthenticationFilter"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"authenticationManager"</span> <span class="attr">ref</span>=<span class="string">"authenticationManager"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 认证管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">authentication-manager</span> <span class="attr">alias</span>=<span class="string">"authenticationManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">authentication-provider</span>  <span class="attr">ref</span>=<span class="string">"casAuthenticationProvider"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">authentication-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">authentication-manager</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 认证提供者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"casAuthenticationProvider"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.cas.authentication.CasAuthenticationProvider"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"authenticationUserDetailsService"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper"</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">beans:constructor-arg</span> <span class="attr">ref</span>=<span class="string">"userDetailsService"</span> /&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"serviceProperties"</span> <span class="attr">ref</span>=<span class="string">"serviceProperties"</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- ticketValidator 为票据验证器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"ticketValidator"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.client.validation.Cas20ServiceTicketValidator"</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">beans:constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"http://localhost:9100/cas"</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"key"</span> <span class="attr">value</span>=<span class="string">"an_id_for_this_auth_provider_only"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>        </span><br><span class="line">   <span class="comment">&lt;!-- 认证类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"userDetailsService"</span> <span class="attr">class</span>=<span class="string">"com.pinyougou.user.service.UserDetailServiceImpl"</span>/&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 认证过滤器 结束 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单点登出  开始  --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"singleLogoutFilter"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.client.session.SingleSignOutFilter"</span>/&gt;</span>          </span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"requestSingleLogoutFilter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.web.authentication.logout.LogoutFilter"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:constructor-arg</span> <span class="attr">value</span>=<span class="string">"http://localhost:9100/cas/logout?service=http://localhost:9103"</span>/&gt;</span>  <span class="comment">&lt;!-- 退出登陆并跳转到首页 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:constructor-arg</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">beans:constructor-arg</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"filterProcessesUrl"</span> <span class="attr">value</span>=<span class="string">"/logout/cas"</span>/&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 此时直接请求 logout/cas 即可实现单点退出，相当于上面链接的一个别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 单点登出  结束 --&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取当前登录用户名，借助Spring Security的方法。<code>SecurityContextHolder.getContext().getAuthentication().getName();</code>即可得到用户名信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;网页静态化技术&quot;&gt;&lt;a href=&quot;#网页静态化技术&quot; class=&quot;headerlink&quot; title=&quot;网页静态化技术&quot;&gt;&lt;/a&gt;网页静态化技术&lt;/h3&gt;&lt;p&gt;网页静态化技术和缓存技术的共同点都是为了&lt;strong&gt;减轻数据库的访问压力&lt;/strong&gt;，但是具体的应用场景不同，缓存比较适合小规模的数据，而网页静态化比较适合大规模且相对变化不太频繁的数据。另外网页静态化还有利于 SEO（搜索引擎优化）。静态界面通过 Nginx 服务器部署可以达到5万的并发，而Tomcat只有几百。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Freemarker&lt;/em&gt; 模板引擎，基于模板来生成文本输出。与web容器无关。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模板文件的元素&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文本，直接输出的部分&lt;/li&gt;
&lt;li&gt;注释，&amp;lt;#– 该内容不会输出 –&amp;gt;&lt;/li&gt;
&lt;li&gt;插值，${…} 将使用数据模型中的部分来替代输出&lt;/li&gt;
&lt;li&gt;FTL 指令，实现逻辑&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="项目学习" scheme="http://mindyu.com/categories/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="品优购" scheme="http://mindyu.com/tags/%E5%93%81%E4%BC%98%E8%B4%AD/"/>
    
      <category term="电商系统" scheme="http://mindyu.com/tags/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="项目实战" scheme="http://mindyu.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>品优购项目笔记（上）</title>
    <link href="http://mindyu.com/2018/12/19/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://mindyu.com/2018/12/19/品优购项目笔记（上）/</id>
    <published>2018-12-19T12:45:32.000Z</published>
    <updated>2018-12-19T12:48:29.373Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="品牌管理模块"><a href="#品牌管理模块" class="headerlink" title="品牌管理模块"></a>品牌管理模块</h3><p><strong>功能实现</strong></p><ol><li>运用AngularJS前端框架的常用指令</li><li>完成品牌管理的列表功能<br><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86.png" alt="品牌管理"></li><li>完成品牌管理的分页列表功能</li><li>完成品牌管理的增加功能</li><li>完成品牌管理的修改功能<a id="more"></a><br><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%93%81%E7%89%8C%E4%BF%AE%E6%94%B9%E4%B8%8E%E6%96%B0%E5%A2%9E.png" alt="品牌新增与修改"></li><li>完成品牌管理的删除功能</li><li>完成品牌管理的条件查询功能</li></ol><p><strong>前端框架 AngularJS</strong><br><em>四大特征</em></p><ol><li>MVC 模式</li></ol><ul><li>Model: 数据,其实就是angular变量($scope.XX);</li><li>View: 数据的呈现,Html+Directive(指令);</li><li>Controller: 操作数据,就是function,数据的增删改查;<ol><li>双向绑定<br>框架采用并扩展了传统HTML，通过双向的数据绑定来适应动态内容，双向的数据绑定允许模型和视图之间的自动同步。遵循声明式编程应该用于构建用户界面以及编写软件构建，而指令式编程非常适合来表示业务逻辑的理念。</li><li>依赖注入<br>对象在创建的时候，其依赖对象由框架来自动创建并注入进来。即最少知道法则。</li><li>模块化设计</li></ol></li><li>高内聚低耦合法则<br>1)官方提供的模块   ng、ngRoute、ngAnimate<br>2)用户自定义的模块     angular.module(‘模块名’,[ ])</li></ul><p><em>常见指令</em></p><ul><li><p>ng-app 定义 AngularJS 应用程序的根元素，表示以下的指令 angularJS 都会识别，且在页面加载完时会自动初始化。</p></li><li><p>ng-model 指令用于绑定变量,将用户在文本框输入的内容绑定到变量上，而表达式可以实时地输出变量。</p></li><li><p>ng-init 对变量初始化或调用某方法。</p></li><li><p>ng-controller 用于指定所使用的控制器，在控制器中定义函数和变量，通过scope 对象来访问。</p></li><li><p>ng-click 单击事件指令，点击时触发控制器的某个方法。</p></li><li><p>ng-if 判断语句，条件不存在就不执行。</p></li><li><p>ng-repeat 指令用于循环集合变量。</p></li><li><p>$index 用于获取 ng-repeat 指令循环中的索引。</p></li><li><p>$http 内置服务，用于访问后端数据。</p></li><li><p>$location 服务，用于获取链接地址中的参数值。<code>$location.search()[&#39;id&#39;]</code>id对应的值。(注：地址中 ? 前需要添加 # )</p><p>eg:  <a href="http://localhost:9102/admin/goods_edit.html#?id=149187842867969" target="_blank" rel="noopener">http://localhost:9102/admin/goods_edit.html#?id=149187842867969</a></p></li><li><p>ng-bind-html 指令用于显示 html 内容</p></li><li><p>app.filter 过滤器，通过 | 来调用过滤器</p></li><li><p>$sce 服务 严格控制上下文访问，为防止 跨站XSS。该服务可以实现安全控制，比如允许html标签的插入转换。</p></li></ul><p><em>复选框的使用</em></p><p>​    定义一个用于存储选中 ID 的数组，当我们点击复选框后判断是选择还是取消选择，如果是选择就加到数组中，如果是取消选择就从数组中移除。在后续点击删除按钮时需要用到这个存储了 ID 的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储当前选中复选框的id集合</span></span><br><span class="line">$scope.selectIds = [];</span><br><span class="line">$scope.updateSelection = <span class="function"><span class="keyword">function</span>(<span class="params">$event, id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($event.target.checked) &#123;<span class="comment">// 当前为勾选状态</span></span><br><span class="line">        $scope.selectIds.push(id); <span class="comment">// 向selectIds集合中添加元素</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = $scope.selectIds.indexOf(id); </span><br><span class="line">        $scope.selectIds.splice(index, <span class="number">1</span>); <span class="comment">// 参数1：移除的下标位置，参数2：需要移除的元素个数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="规格及模板管理"><a href="#规格及模板管理" class="headerlink" title="规格及模板管理"></a>规格及模板管理</h3><p><em>前端分层开发</em></p><p>​    运用 MVC 的思想，将 js 和 html 代码分离，提高程序的可维护性。</p><p>​    实现方式：自定义服务，同后端的 service 层，封装一些操作，比如请求后端数据。在不同控制器通过依赖注入相关服务，即可调用服务的方法。将代码分为前端页面、前端服务层、前端控制层。</p><p><em>主键回填</em></p><p>​    修改 Mapper.xml 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Long"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">SELECT LAST_INSERT_ID() AS id</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    对于规格与具体规格选项，可以创建一个组合实体类，包括 规格 和 规格选项的集合。在插入规格之后，通过主键回填，获取规格 ID ，然后将 ID 作为外键添加到规格选项中去。</p><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E8%A7%84%E6%A0%BC%E7%AE%A1%E7%90%86.png" alt="规格管理"></p><p>  <em>select2 组件-多选下拉列表</em></p><ol><li><p>引入 select 2 相关的 js 和 css。</p></li><li><p>设置数据源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$scope.brandList=&#123;<span class="attr">data</span>:[&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">text</span>:<span class="string">'联想'</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">text</span>:<span class="string">'华为'</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">text</span>:<span class="string">'小米'</span>&#125;]&#125;;<span class="comment">// 品牌列表</span></span><br></pre></td></tr></table></figure></li><li><p>实现多选下拉框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">select2</span>  <span class="attr">select2-model</span>=<span class="string">"entity.brandIds"</span>  <span class="attr">config</span>=<span class="string">"brandList"</span>  <span class="attr">multiple</span> <span class="attr">placeholder</span>=<span class="string">" 选择品牌（可多选）"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>multiple 表示可多选</p><pre><code>Config 用于配置数据来源select2-model 用于指定用户选择后提交的变量![select2多选下拉列表](https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%A4%9A%E9%80%89%E4%B8%8B%E6%8B%89%E6%A1%86.png)</code></pre></li></ol><p><em>模板列表显示</em></p><p>​    将从后台获取的 json 字符串中的某个属性的值提取出来，用逗号分隔，更直观的显示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提取 json 字符串数据中某个属性，返回拼接字符串逗号分隔</span></span><br><span class="line">$scope.jsonToString = <span class="function"><span class="keyword">function</span>(<span class="params">jsonString,key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> json=<span class="built_in">JSON</span>.parse(jsonString); <span class="comment">// 将 json 字符串转换为 json 对象</span></span><br><span class="line"><span class="keyword">var</span> value=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;json.length;i++)&#123; </span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>) value += <span class="string">","</span>；</span><br><span class="line">value += json[i][key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%95%86%E5%93%81%E7%B1%BB%E5%9E%8B%E6%A8%A1%E6%9D%BF%E7%AE%A1%E7%90%86.png" alt="类型模板管理"></p><h3 id="Spring-Security-安全框架"><a href="#Spring-Security-安全框架" class="headerlink" title="Spring Security  安全框架"></a>Spring Security  安全框架</h3><p>​    为基于 Spring 的企业应用系统提供声明式的安全访问控制的解决方案。提供一组可以在 Spring 应用上下文中配置的 Bean。</p><p><em>使用步骤</em></p><ul><li>引入 jar 包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>web.xml 文件中引入 spring-security.xml 配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-security.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spring-security.xml 配置文件设置页面拦截规则、认证管理器以及不拦截的资源（静态资源、登陆页面）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置页面不登陆也可以访问 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/*.html"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/css/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/img/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/js/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/plugins/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 页面的拦截规则    use-expressions:是否启动SPEL表达式 默认是true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">use-expressions</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当前用户必须有ROLE_USER的角色 才可以访问根目录及所属子目录的资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/**"</span> <span class="attr">access</span>=<span class="string">"ROLE_ADMIN"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启表单登陆功能 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form-login</span> <span class="attr">login-page</span>=<span class="string">"/login.html"</span> <span class="attr">default-target-url</span>=<span class="string">"/admin/index.html"</span> <span class="attr">authentication-failure-url</span>=<span class="string">"/login.html"</span> <span class="attr">always-use-default-target</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">csrf</span> <span class="attr">disabled</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">headers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frame-options</span> <span class="attr">policy</span>=<span class="string">"SAMEORIGIN"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">headers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logout</span>/&gt;</span><span class="comment">&lt;!-- 退出登录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 认证管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">authentication-manager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">authentication-provider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user-service</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">authorities</span>=<span class="string">"ROLE_ADMIN"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"yang"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">authorities</span>=<span class="string">"ROLE_ADMIN"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user-service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">authentication-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">authentication-manager</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。</p><p>​    XSS(跨站脚本攻击)利用站点内的信任用户，往Web页面里插入恶意Script代码 。</p><p>​    CSRF通过伪装来自受信任用户的请求来利用受信任的网站。 </p><h3 id="商家系统登录安全控制"><a href="#商家系统登录安全控制" class="headerlink" title="商家系统登录安全控制"></a>商家系统登录安全控制</h3><p><em>安全控制</em></p><ol><li>自定义认证类，创建类 UserDetailsServiceImpl.java 实现 UserDetailsService 接口</li><li>实现类中添加 SellerService 属性、和 setter 注入方法，修改 loadUserByUserName 方法。</li><li>配置 spring-security.xml。认证管理器中 authentication-provider 引用userDetailService 的bean，同时通过 dobbo 去依赖一个 sellerService 对象。</li></ol><p><em>BCrypt 加密算法</em></p><p>​    用户表的密码通常使用 MD5 等不可逆算法加密后存储，为防止彩虹表破解更会先使用<br>一个特定的字符串（如域名）加密，然后再使用一个随机的 salt（盐值）加密。 特定字符串是程序代码中固定的，salt 是每个密码单独随机，一般给用户表加一个字段单独存储，比较麻烦。 BCrypt 算法将 salt 随机并混入最终加密后的密码，验证时也无需单独提供之前的 salt，从而无需单独处理 salt 问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  认证类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YCQ</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SellerService sellerService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSellerService</span><span class="params">(SellerService sellerService)</span> </span>&#123;<span class="comment">// 通过配置的方式添加</span></span><br><span class="line"><span class="keyword">this</span>.sellerService = sellerService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println("执行 UserDetailsServiceImpl 认证");</span></span><br><span class="line"><span class="comment">// 构建角色列表</span></span><br><span class="line">List&lt;GrantedAuthority&gt; grantAuths = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">grantAuths.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_SELLER"</span>));</span><br><span class="line"></span><br><span class="line">TbSeller seller = sellerService.findOne(username);</span><br><span class="line"><span class="keyword">if</span> (seller!=<span class="keyword">null</span> &amp;&amp; <span class="string">"1"</span>.equals(seller.getStatus())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(username, seller.getPassword(), grantAuths);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring-security 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 认证管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">authentication-manager</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">authentication-provider</span> <span class="attr">user-service-ref</span>=<span class="string">"userDetailService"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password-encoder</span> <span class="attr">ref</span>=<span class="string">"bcryptEncoder"</span>&gt;</span><span class="tag">&lt;/<span class="name">password-encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">authentication-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">authentication-manager</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 认证类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"userDetailService"</span> <span class="attr">class</span>=<span class="string">"com.pinyougou.service.UserDetailsServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"sellerService"</span> <span class="attr">ref</span>=<span class="string">"mSellerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用dubbo 服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"pinyougou-shop-web"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://107.191.52.91:2181"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"mSellerService"</span> <span class="attr">interface</span>=<span class="string">"com.pinyougou.sellergoods.service.SellerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"bcryptEncoder"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"</span>&gt;</span><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>注：浏览器控制台提示 [DOM] Input elements should have autocomplete attributes (suggested: “current-password”) 为浏览器表单默认的记忆功能，可以在 input 标签中添加 autocomplete=”off|on” 即可。</em></p><h3 id="商品分类管理"><a href="#商品分类管理" class="headerlink" title="商品分类管理"></a>商品分类管理</h3><p><em>多级分类列表</em></p><p>​    将商品分类分为三级，进入页面首先显示所有一级分类（主分类），点击查询下级，可查看当前主分类下的次分类，再次点击进入三级分类。三级分类为最后一级，列表中不显示查询下级按钮，同时更新面包屑导航。直接点击面包屑导航，可以实现直接层级跳转。</p><p><em>面包屑导航</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前面包屑等级</span></span><br><span class="line">$scope.grade = <span class="number">1</span>;</span><br><span class="line">$scope.setGrade=<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    $scope.grade = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$scope.selectList=<span class="function"><span class="keyword">function</span>(<span class="params">p_entity</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($scope.grade == <span class="number">1</span>) &#123;</span><br><span class="line">        $scope.entity_1 = <span class="literal">null</span>;</span><br><span class="line">        $scope.entity_2 = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($scope.grade == <span class="number">2</span>)&#123;</span><br><span class="line">        $scope.entity_1 = p_entity;</span><br><span class="line">        $scope.entity_2 = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $scope.entity_2 = p_entity;</span><br><span class="line">    &#125;</span><br><span class="line">    $scope.findByParentId(p_entity.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">ng-click</span>=<span class="string">"grade=1;selectList(&#123;id:0&#125;)"</span>&gt;</span>顶级分类列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">ng-click</span>=<span class="string">"grade=2;selectList(entity_1)"</span>&gt;</span>&#123;&#123;entity_1.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-if</span>=<span class="string">"entity_2!=null"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">ng-click</span>=<span class="string">"grade=3;selectList(entity_2)"</span>&gt;</span>&#123;&#123;entity_2.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>修改商品分类</em></p><p>​    实现类型模板的下拉框，采用 select2 组件实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>类型模板<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">select2</span> <span class="attr">ng-model</span>=<span class="string">"entity.typeId"</span> <span class="attr">config</span>=<span class="string">"itemList"</span> <span class="attr">placeholder</span>=<span class="string">"商品类型模板"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    config 为数据来源</p><p>​    ng-model 绑定类型对象数据</p><p>​    itemList 的来源：itemCatController 中 findItemList() 方法 -&gt; typeTemplateService 的 selectOptionList() 方法 -&gt; 请求后端 /typeTemplate/selectOptionList -&gt; TypeTemplateService 服务层 -&gt; TypeTemplateMapper 层方法</p><p><em>删除商品分类</em></p><p>​    判断所选分类下是否存在子分类，存在则不能删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(Long[] ids)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 判断当前所有分类是否存在子分类</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">// 不存在</span></span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            <span class="keyword">if</span>(itemCatService.findByParentId(id)!=<span class="keyword">null</span> &amp;&amp; itemCatService.findByParentId(id).size()!=<span class="number">0</span>)&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"当前所选分类存在子分类，切勿删除"</span>); </span><br><span class="line"></span><br><span class="line">        itemCatService.delete(ids);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"删除成功"</span>); </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"删除失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>SPU 与 SKU</em></p><p>​    SPU （标准产品单位）为商品信息聚合的最小单位是一组可复用、易检索的标准化信息的集合,该集合描述了一个产品的特性。属性相同、特性相同的商品为一个SPU。</p><p>​    SKU （库存量单位） 为物理上不可分割的最小存货单元。不同的规格、颜色、款式为不同的SKU。</p><p><em>分布式文件服务器 FastDFS</em></p><p>​    FastDFS 是用 c 语言编写的一款开源的分布式文件系统。FastDFS 为互联网量身定制,充分考虑了<strong>冗余备份、负载均衡、线性扩容</strong>等机制,并注重<strong>高可用、高性能</strong>等指标,使用FastDFS 很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。<br>    FastDFS 架构包括 Tracker server 和 Storage server。</p><ul><li><p>Tracker server （追踪服务器、调度服务器）作用为负载均衡和调度。</p></li><li><p>Storage server （存储服务器）作用为文件存储。</p><p>客户端请求 Tracker server 进行文件上传、下载,通过 Tracker server 调度最终由 Storage server 完成文件上传和下载。    </p><p>服务端角色：</p></li><li><p>Tracker : 管理集群，tracker也可以实现集群，每一个节点地位平等，一种备份的机制。tracker负责收集 storage 集群的存储状态。</p></li><li><p>Stroage ：实际保存文件。分为多个组，组内文件相同，起到备份作用。组间文件不同，起到分布式存储。</p></li></ul><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0.png" alt="图片上传"></p><p><em>商品分类级联刷新</em></p><p>​    通过 Angular JS 变量监控方法，实现选择一级分类之后，初始化二级分类的列表信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// angularjs变量监控方法,查询二级分类信息</span></span><br><span class="line">$scope.$watch(<span class="string">'entity.goods.category1Id'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newValue != <span class="literal">undefined</span> &amp;&amp; newValue != <span class="string">""</span>) &#123;</span><br><span class="line">        <span class="comment">// alert("category1Id"+newValue);</span></span><br><span class="line">        itemCatService.findByParentId(newValue).success(</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">                    $scope.itemCat2List = response;</span><br><span class="line">                    $scope.entity.goods.category2Id = <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E7%BA%A7%E8%81%94%E5%88%B7%E6%96%B0.png" alt="商品分类级联刷新"></p><p><em>商品录入【SKU商品信息】</em> </p><p>对于同一个产品分为多种不同的规格组合。根据选择的规格录入商品的 SKU 信息，当用户选择相应的规格，下面的 SKU 列表就会自动生成。<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%95%86%E5%93%81%E8%A7%84%E6%A0%BC%E7%BB%84%E5%90%88.png" alt="规格管理"></p><p>实现思路：<br>（1）我们先定义一个初始的不带规格名称的集合，只有一条记录。<br>（2）循环用选择的规格，根据规格名称和已选择的规格选项对原集合进行扩充，添加规格名称和值，新增的记录数与选择的规格选项个数相同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建SKU列表</span></span><br><span class="line">$scope.creatItemList=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 列表初始化，规格对象、价格、库存量、状态、是否默认</span></span><br><span class="line">    $scope.entity.itemList = [ &#123;<span class="attr">spec</span>:&#123;&#125;,<span class="attr">price</span>:<span class="number">0</span>,<span class="attr">num</span>:<span class="number">9999</span>,<span class="attr">status</span>:<span class="string">'0'</span>,<span class="attr">isDefault</span>:<span class="string">'0'</span>&#125; ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> items = $scope.entity.goodsDesc.specificationItems;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">        $scope.entity.itemList = addColumn($scope.entity.itemList, items[i].attributeName, items[i].attributeValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $scope.entity.itemList:</span></span><br><span class="line"><span class="comment"> * [&#123;"spec":&#123;"网络":"移动3G","机身内存":"16G"&#125;,"price":0,"num":9999,"status":"0","isDefault":"0"&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;"spec":&#123;"网络":"移动3G","机身内存":"32G"&#125;,"price":0,"num":9999,"status":"0","isDefault":"0"&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;"spec":&#123;"网络":"联通3G","机身内存":"16G"&#125;,"price":0,"num":9999,"status":"0","isDefault":"0"&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;"spec":&#123;"网络":"联通3G","机身内存":"32G"&#125;,"price":0,"num":9999,"status":"0","isDefault":"0"&#125;]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深克隆方法   原集合、列名、列值</span></span><br><span class="line">addColumn=<span class="function"><span class="keyword">function</span>(<span class="params">list, columnName, columnValues</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newList = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> oldRow = list[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; columnValues.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> newRow = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify(oldRow) );</span><br><span class="line">            newRow.spec[columnName] = columnValues[j];</span><br><span class="line">            newList.push(newRow);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>商家后台列表显示</em><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%95%86%E5%AE%B6%E5%95%86%E5%93%81%E7%AE%A1%E7%90%86.png" alt="商家商品管理"></p><p>状态显示：</p><p>​    商品信息表（goods）中状态子段为 audit_status 。存储的为数字，0表示未审核、1表示已审核、2表示审核未通过、3为已关闭。从后台获取的状态值，直接在前端进行修改。通过一个status数组存储：</p><p>​    $scope.status=[‘未审核’,’已审核’,’审核未通过’,’关闭’];//商品状态</p><p>​    然后列表中显示为 。</p><p>分类信息显示：</p><p>​    商品分为三级分类。存储于 tb_item_cat 表中。包括 id、父级id、分类名称、对应绑定的类型id。但是为了避免商品查询时重复的关联查询，可以采用现将所有分类信息读取到本地，然后在前端进行分类id到分类名称的转换操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$scope.itemCatList = [];</span><br><span class="line"><span class="comment">// 全部商品分类查询，存储在itemList数组中，然后再前端页面通过数组下标直接将商品分类ID转换为商品分类名称，避免后端连接查询。</span></span><br><span class="line">$scope.findItemList = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    itemCatService.findAll().success(</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; response.length; i++) &#123;</span><br><span class="line">                    $scope.itemCatList[response[i].id] = response[i].name;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    将分类结果 response 对象封装为数组类型，数组下标为商品分类id，数组值为商品分类的名称。然后在列表项中通过  将id转换为名称。</p><p><em>存在的问题</em></p><p>​    pinyougou-shop-web 模块中分页插件提示 ClassNotFoundException。但是页面可以访问。<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/error_page.png" alt=""></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    如上配置之后，又出现下图错误，导致商品列表无法显示。（但是 manager-web 模块中也没有引入pagehelper,但是没有出现问题）<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/error_RowBounds.png" alt=""></p><p>商品删除</p><p>​    逻辑删除，通过修改数据库表中的 is_delete 字段为1，然后过滤掉商品。然后查询时，在 findPage() 方法中添加 criteria.andIsDeleteIsNull() 条件。</p><p><em>注解式事务配置</em></p><p>​    创建  applicationContext-tx.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启事务控制的注解支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​    然后在方法或服务实现类上添加 @Transactional 注解。</p><p><em>网站前台广告服务</em></p><p>​    设计为广告分类表（id、name）与广告内容表（id、categoryId、title、url、pic、status、order）。广告有首页轮播广告、今日推荐、各品类楼层广告等分类。</p><p>​    Redis 缓存数据库用于解决高访问量对后端数据库造成的很大的访问压力。（另一种解决方案为网页静态化）</p><p>​    Spring Data Redis 提供了在 srping 应用中通过简单的配置访问 redis 服务，对 reids 底层开发包(Jedis, JRedis, and RJC)进行了高度封装，RedisTemplate 提供了 redis 各种操作、异常处理及序列化，支持发布订阅，并对 spring 3.1 cache 进行了实现。</p><p>spring-data-redis 针对 jedis 提供了如下功能：<br>    1.连接池自动管理，提供了一个高度封装的“RedisTemplate”类。<br>    2.针对 jedis 客户端中大量 api 进行了归类封装,将同一类型操作封装为 operation 接口</p><p>操作样例：</p><p>key-value 键值对操作</p><p>​    插入：redisTemplate.boundValueOps(“name”).set(“mindyu”);</p><p>​    读取：redisTemplate.boundValueOps(“name”).get();</p><p>​    删除：redisTemplate.delete(“name”);</p><p>Set 类型操作（无序集合）</p><p>​    插入：redisTemplate.boundSetOps(“nameset”).add(“曹操”); </p><p>​    读取：redisTemplate.boundSetOps(“nameset”).members();</p><p>​    删除：redisTemplate.boundSetOps(“nameset”).remove(“曹操”);    // 单一元素</p><p>redisTemplate.delete(“name”);  // 整个集合</p><p>List 集合 （有序）</p><p>​    rightPush() 、leftPush()、读取：range(0,10)、index(1)、remove(1, “value”) // 1 表示删除数据的个数</p><p>Hash 类型</p><p>​    put(“key”,”value”)、读取所有键：keys()、读取所有值：values()、get(“key”)、delete(“key”)</p><p>​    使用 Redis 缓存时，需要注意，当数据修改时需要清除缓存数据，使其达到一致性约束。必须修改广告时，如果修改了该广告所属的分类，那么需要同时清除原分类以及新分类的缓存信息。</p><p>出现的问题：</p><p>​    首页在加载广告模块时，出现 “Failed to load resource: net::ERR_BLOCKED_BY_CLIENT” 错误，是因为谷歌浏览器的广告插件，导致无法加载该图片。</p><h3 id="搜索解决方案"><a href="#搜索解决方案" class="headerlink" title="搜索解决方案"></a>搜索解决方案</h3><p><em>简介</em></p><p>​    Solr 是一个开源搜索平台，用于构建搜索应用程序。 它建立在 Lucene(全文搜索引擎)之上。 Solr 是企业级的，快速的和高度可扩展的。 使用 Solr 构建的应用程序非常复杂，可提供高性能。Solr 是一个<strong>可扩展的</strong>，<strong>可部署</strong>，<strong>搜索/存储引擎</strong>，<strong>优化搜索大量以文本为中心的数据</strong>。</p><p><em>安装及配置</em></p><ol><li>安装 Tomcat，解压缩。</li><li>解压 solr。</li><li>把 solr 下的 dist 目录 solr-4.10.3.war 部署到 webapps 下(去掉版本号，方便访问)。</li><li>启动 Tomcat 解压缩 war 包</li><li>把solr下 example/lib/ext 目录下的所有的扩展 jar 包，添加到 solr 的工程中(\WEB-INF\lib目录下)。</li><li>创建一个 solrhome 。solr 下的 /example/solr 目录就是一个 solrhome。复制此目录到 D 盘改名为 solrhome</li><li>关联 solr 及 solrhome。需要修改 solr 工程的 web.xml 文件。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">env-entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">env-entry-name</span>&gt;</span>solr/home<span class="tag">&lt;/<span class="name">env-entry-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">env-entry-value</span>&gt;</span>d:\solrhome<span class="tag">&lt;/<span class="name">env-entry-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">env-entry-type</span>&gt;</span>java.lang.String<span class="tag">&lt;/<span class="name">env-entry-type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">env-entry</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>启动 Tomcat 。访问 <a href="http://localhost:8080/solr" target="_blank" rel="noopener">http://localhost:8080/solr</a> 即可<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/solr%E6%8E%A7%E5%88%B6%E5%8F%B0.png" alt="solr"></li></ol><p><em>中文分析器 IK Analyzer</em></p><p>​    IK Analyzer 是一个开源的，基于 java 语言开发的轻量级的中文分词工具包。</p><p>配置</p><ol><li><p>把 IKAnalyzer2012FF_u1.jar 添加到 solr 工程的 lib 目录下</p></li><li><p>solr 工程下创建 WEB-INF/classes 文件夹，用于存放扩展词典、停用词词典、配置文件。</p></li><li><p>修改 Solrhome 中的 schema.xml 文件，配置一个 FieldType，使用 IKAnalyzer </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_ik"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKAnalyzer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>配置域 </p><p>​    域相当于数据库的表字段，用户存放数据，用户可根据业务需要去定义相关的 Field（域），一般来说，每一种域对应着一种数据，用户对同一种数据进行相同的操作。域的常用属性：</p><ul><li>name  域的名称</li><li>type 域的类型</li><li>indexed 是否索引</li><li>stored 是否存储</li><li>required 是否必须</li><li>multiValued 是否多值</li></ul><p>复制域：</p><p>​    将某一个域中的数据复制到另一个域中。比如商品查询时，同样一个关键字可能是品牌、商品标题、商品分类、商家名称等多种可能。此时就需要复制域。</p><p>动态域：</p><p>​    对于字段名称不固定的情况下，用于动态扩充字段。比如商品的规格的值不是固定的（不同商品可能存在不同的规格项）。</p><p>出现的错误</p><ol><li>前端可以从后台获取数据（ itemsearch/search.do正常获取数据 ），但是控制台显示” TypeError: Cannot read property ‘success’ of undefined “错误。<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/success_undefined.png" alt="success_of_undefined"></li></ol><p>原因是因为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.service(<span class="string">'searchService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$http</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.search=<span class="function"><span class="keyword">function</span>(<span class="params">searchMap</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> $http.post(<span class="string">'itemsearch/search.do'</span>,searchMap);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>angularjs 服务层的search方法并未 return。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. 服务启动超时：com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout. start time: 2018-12-02 08:35:41.093, end time: 2018-12-02 08:35:46.094, client elapsed: 0 ms, server elapsed: 5001 ms, timeout: 5000 ms。</span><br></pre></td></tr></table></figure><ul><li>网站前台 portal-web 模块出现的原因是因为没有启动 redis 服务器。然后前台广告数据获取不到。</li><li>搜索模块 search-web ：就很奇怪，dubbox 服务正常、solr 服务正常。昨天晚上还是正常的，上午纠结了半天，然后不知道为啥突然又好了。。。 烦躁</li></ul><p><em>批量数据导入 solr 系统</em></p><p>​    将商品数据导入到 solr 系统。</p><ul><li>创建 solr-util (jar)，引入 dao 模块以及 spring 相关依赖。</li><li>创建spring 的配置文件，添加包扫描。</li></ul><p>&lt;context:component-scan base-package=”com.pinyougou.solrutil”&gt;<br>&lt;/context:component-scan&gt;</p><ul><li><p>依赖 pojo 模块，为实体类添加 @Field 注解。</p></li><li><p>pojo 中引入 spring-data-solr 依赖（会自动引入其所依赖solr包）动态域中@Dynamic 注解是该包提供的</p></li><li><p>添加 solr.xml 配置文件与 spring 目录中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- solr 服务器地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">solr:solr-server</span> <span class="attr">id</span>=<span class="string">"solrServer"</span> <span class="attr">url</span>=<span class="string">"http://127.0.0.1:8080/solr"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- solr 模板，使用 solr 模板可对索引库进行 CRUD 的操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"solrTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.solr.core.SolrTemplate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"solrServer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过 spring 注入 SolrTemplate 模板类对象。</p></li><li><p>使用 SolrTemplate 对象执行相应的方法。</p></li></ul><p><em>关键字搜索模块</em></p><p>​    通过注入 SolrTemplate 对象，使用该对象实现关键字搜索。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(timeout=<span class="number">5000</span>)<span class="comment">// 超时5S，默认是1S</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemSearchServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemSearchService</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SolrTemplate solrTemplate; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">search</span><span class="params">(Map searchMap)</span> </span>&#123;</span><br><span class="line">Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">Query query = <span class="keyword">new</span> SimpleQuery(<span class="string">"*:*"</span>);</span><br><span class="line">Criteria criteria = <span class="keyword">new</span> Criteria(<span class="string">"item_keywords"</span>).is(searchMap.get(<span class="string">"keywords"</span>));</span><br><span class="line">query.addCriteria(criteria);</span><br><span class="line"></span><br><span class="line">ScoredPage&lt;TbItem&gt; page = solrTemplate.queryForPage(query, TbItem.class);</span><br><span class="line">map.put(<span class="string">"rows"</span>, page.getContent());<span class="comment">// page.getContent() 返回一个 List 集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>搜索结果高亮显示</em></p><p>​    将搜索关键字在搜索结果中，高亮显示出来。实现原理也就是在关键字前后添加html标签：<em style="color:red">关键字</em></p><p>​    后端实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">search</span><span class="params">(Map searchMap)</span> </span>&#123;</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Query query = new SimpleQuery("*:*");</span></span><br><span class="line"><span class="comment">    Criteria criteria = new Criteria("item_keywords").is(searchMap.get("keywords"));</span></span><br><span class="line"><span class="comment">    query.addCriteria(criteria);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ScoredPage&lt;TbItem&gt; page = solrTemplate.queryForPage(query, TbItem.class);</span></span><br><span class="line"><span class="comment">    map.put("rows", page.getContent());// page.getContent() 返回一个 List 集合</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 高亮显示</span></span><br><span class="line">    HighlightQuery query = <span class="keyword">new</span> SimpleHighlightQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建高亮选项</span></span><br><span class="line">    HighlightOptions highlightOptions = <span class="keyword">new</span> HighlightOptions().addField(<span class="string">"item_title"</span>);<span class="comment">// 高亮域（可以为多个）</span></span><br><span class="line">    highlightOptions.setSimplePrefix(<span class="string">"&lt;em style='color:red'&gt;"</span>);<span class="comment">// 前缀</span></span><br><span class="line">    highlightOptions.setSimplePostfix(<span class="string">"&lt;/em&gt;"</span>);<span class="comment">// 后缀</span></span><br><span class="line"></span><br><span class="line">    query.setHighlightOptions(highlightOptions);<span class="comment">// 为查询设置高亮查询</span></span><br><span class="line"></span><br><span class="line">    Criteria criteria = <span class="keyword">new</span> Criteria(<span class="string">"item_keywords"</span>).is(searchMap.get(<span class="string">"keywords"</span>));</span><br><span class="line">    query.addCriteria(criteria);</span><br><span class="line"></span><br><span class="line">     HighlightPage&lt;TbItem&gt; page = solrTemplate.queryForHighlightPage(query, TbItem.class);</span><br><span class="line">     <span class="comment">// 高亮入口集合（每条高亮结果的入口）</span></span><br><span class="line">     List&lt;HighlightEntry&lt;TbItem&gt;&gt; entryList = page.getHighlighted();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (HighlightEntry&lt;TbItem&gt; entry : entryList) &#123;</span><br><span class="line">         <span class="comment">// 获取高亮列表（高亮域的个数）</span></span><br><span class="line">         List&lt;Highlight&gt; hightLightList = entry.getHighlights();</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">         for (Highlight highLight : hightLightList) &#123;</span></span><br><span class="line"><span class="comment">             // 每个域可能存在多值（复制域）</span></span><br><span class="line"><span class="comment">             List&lt;String&gt; sns = highLight.getSnipplets();</span></span><br><span class="line"><span class="comment">             System.out.println(sns);</span></span><br><span class="line"><span class="comment">         &#125;*/</span></span><br><span class="line">         <span class="keyword">if</span> (entry.getHighlights().size()&gt;<span class="number">0</span> &amp;&amp; entry.getHighlights().get(<span class="number">0</span>).getSnipplets().size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">             TbItem item = entry.getEntity();</span><br><span class="line">             item.setTitle(entry.getHighlights().get(<span class="number">0</span>).getSnipplets().get(<span class="number">0</span>));<span class="comment">// 用高亮标签结果替换</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     map.put(<span class="string">"rows"</span>, page.getContent());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    前端实现：</p><p>angularJS 会将后端插入的html标签原样输出，而不会去解析。这是防止html攻击采取的一种安全策略。可以使用 $sce 服务的 trustAsHtml 方法来实现转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义过滤器</span></span><br><span class="line">app.filter(<span class="string">'trustHtml'</span>, [<span class="string">'$sce'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$sce</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="comment">// 传入参数时，被过滤的内容</span></span><br><span class="line"><span class="keyword">return</span> $sce.trustAsHtml(data);<span class="comment">// 返回的是过滤后的内容（信任html的转换）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; ]);</span><br></pre></td></tr></table></figure><p>然后在页面通过 <code>&lt;div class=&quot;attr&quot; ng-bind-html=&quot;item.title | trustHtml&quot;&gt;&lt;/div&gt;</code>来调用转换方法。</p><h3 id="搜索业务规则"><a href="#搜索业务规则" class="headerlink" title="搜索业务规则"></a>搜索业务规则</h3><p>搜索模块</p><ol><li>用户输入搜索关键字，显示列表结果和商品分类信息。因为一个关键字可能对应多种商品分类</li><li>根据第一个商品分类，默认查询该分类的模板ID，然后根据模板ID查询品牌列表和规格列表</li><li>当用户点击某一个商品分类时，则显示该分类对应商品结果，同时根据该分类的模板ID查询对应的品牌列表和规格列表</li><li>当用户点击商品品牌列表时，筛选出当前所选的品牌商品信息</li><li>当用户点击商品规格列表时，筛选出当前所选的规格所对应的商品信息</li><li>用户点击价格区间时，商品信息根据价格进行过滤</li><li>用户点击搜索面板上的条件时，隐藏该条件</li></ol><p>系统搜索量很大，所以需要将搜索信息放置到 Redis 缓存数据库中。</p><p>缓存商品分类信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveToRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将模板ID放入缓存 分类名称作为key,模板ID作为value</span></span><br><span class="line">    List&lt;TbItemCat&gt; itemCatList = findAll();</span><br><span class="line">    <span class="keyword">for</span> (TbItemCat itemCat : itemCatList) &#123;</span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">"itemCat"</span>).put(itemCat.getName(), itemCat.getTypeId());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"将模板ID放入缓存"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存所有的品牌信息和规格信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveToRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;TbTypeTemplate&gt; typeTempList = findAll();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(TbTypeTemplate template : typeTempList) &#123;</span><br><span class="line">        Long id = template.getId();</span><br><span class="line">        <span class="comment">// 将模板ID作为key 品牌列表作为value</span></span><br><span class="line">        List brandList = JSON.parseArray(template.getBrandIds(), Map.class);<span class="comment">// &#123;id:1,text:联想&#125;</span></span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">"brandList"</span>).put(id, brandList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将模板ID作为key 规格列表作为value</span></span><br><span class="line">        List&lt;Map&gt; specList = findSpecList(id);</span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">"specList"</span>).put(id, specList);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"完成品牌列表、规格列表缓存"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分类列表查询（spring data solr 条件查询）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">searchCategoryList</span><span class="params">(Map searchMap)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Query query = <span class="keyword">new</span> SimpleQuery(<span class="string">"*:*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据关键字查询</span></span><br><span class="line">    Criteria criteria = <span class="keyword">new</span> Criteria(<span class="string">"item_keywords"</span>).is(searchMap.get(<span class="string">"keywords"</span>));<span class="comment">// where ...</span></span><br><span class="line">    query.addCriteria(criteria);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置分组选项</span></span><br><span class="line">    GroupOptions groupOptions = <span class="keyword">new</span> GroupOptions().addGroupByField(<span class="string">"item_category"</span>);<span class="comment">// group by ....（可以有多个分组域）</span></span><br><span class="line">    query.setGroupOptions(groupOptions);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取分组页</span></span><br><span class="line">    GroupPage&lt;TbItem&gt; queryForGroupPage = solrTemplate.queryForGroupPage(query, TbItem.class);</span><br><span class="line">    <span class="comment">// 获取分组结果对象</span></span><br><span class="line">    GroupResult&lt;TbItem&gt; groupResult = queryForGroupPage.getGroupResult(<span class="string">"item_category"</span>);</span><br><span class="line">    <span class="comment">// 获取分组入口页</span></span><br><span class="line">    Page&lt;GroupEntry&lt;TbItem&gt;&gt; groupEntries = groupResult.getGroupEntries();</span><br><span class="line">    <span class="comment">// 遍历获取每个对象的值</span></span><br><span class="line">    <span class="keyword">for</span>(GroupEntry&lt;TbItem&gt; entry : groupEntries) &#123;</span><br><span class="line">        list.add(entry.getGroupValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>过滤条件的构建</em></p><p>​    当点击搜索面板的分类、品牌和规格时，实现查询条件的构建。查询 条件以面包屑的形式显示。当面包屑显示分类、品牌和规格时，要同时隐藏搜索面板对应的区域。点击面包屑查询条件的撤销链接时，重新显示搜索面板相应的区域。</p><p>​    面包屑其实就是显示搜索对象。可将搜索对象定义为<code>$scope.searchMap={&#39;keywords&#39;:&#39;&#39;,&#39;category&#39;:&#39;&#39;,&#39;brand&#39;:&#39;&#39;,spec:{}};</code>。然后实现添加查询条件和取消查询条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索</span></span><br><span class="line">$scope.search = function() &#123;</span><br><span class="line">    searchService.search($scope.searchMap).success(function(response) &#123;</span><br><span class="line">        $scope.resultMap = response;<span class="comment">// 搜索返回的结果</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加查询搜索项</span></span><br><span class="line">$scope.addSearchItem=function(key,value)&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="string">'brand'</span> || key == <span class="string">'category'</span>) &#123;<span class="comment">// 如果点击品牌和分类</span></span><br><span class="line">        $scope.searchMap[key] = value;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $scope.searchMap.spec[key]=value;</span><br><span class="line">    &#125;</span><br><span class="line">    $scope.search();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消查询条件</span></span><br><span class="line">$scope.removeSearchItem=function(key)&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="string">'brand'</span> || key == <span class="string">'category'</span>) &#123;<span class="comment">// 如果点击品牌和分类</span></span><br><span class="line">        $scope.searchMap[key] = <span class="string">""</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        delete $scope.searchMap.spec[key];</span><br><span class="line">    &#125;</span><br><span class="line">    $scope.search();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>价格区间筛选</em></p><p>​    点击搜索面板的价格区间，实现按价格筛选相应的商品。和上述的过滤条件类似，前端依然将价格区间以字符串的形式放入到 searchMap 集合中（如 ‘price’:’500-1000’）。然后后端通过字符串的截取获得相应的价格区间，然后进而筛选。</p><p><em>自定义搜索结果分页</em></p><p>​    前端将当前页数和页大小通过 searchMap 传给后端，然后后端通过构建 solr 的 query 对象实现分页效果。然后返回当前页数据和总页数以及总记录数。<code>$scope.searchMap={&#39;keywords&#39;:&#39;&#39;,&#39;category&#39;:&#39;&#39;,&#39;brand&#39;:&#39;&#39;,&#39;spec&#39;:{},&#39;price&#39;:&#39;&#39;,&#39;pageNo&#39;:1,&#39;pageSize&#39;:40 };//搜索条件封装对象</code></p><p>通过当前页数、总页数然后构建分页标签。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建分页标签</span></span><br><span class="line">buildPageLable=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $scope.pageLable=[];</span><br><span class="line">    <span class="keyword">var</span> firstPage = <span class="number">1</span>;<span class="comment">// 开始页码</span></span><br><span class="line">    <span class="keyword">var</span> lastPage = $scope.resultMap.totalPages; <span class="comment">// 截止页码</span></span><br><span class="line">    $scope.firstDot = <span class="literal">true</span>;</span><br><span class="line">    $scope.lastDot = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lastPage &gt; <span class="number">5</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> ($scope.searchMap.pageNo&lt;=<span class="number">3</span>)&#123;<span class="comment">// 当前页码小于3，显示前五页</span></span><br><span class="line">            lastPage = <span class="number">5</span>;</span><br><span class="line">            $scope.firstDot = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ($scope.searchMap.pageNo&gt;=lastPage<span class="number">-2</span>) &#123;<span class="comment">// 当前页码大于总页数-2，则显示后5页</span></span><br><span class="line">            firstPage = lastPage - <span class="number">4</span>;</span><br><span class="line">            $scope.lastDot = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            firstPage = $scope.searchMap.pageNo - <span class="number">2</span>;</span><br><span class="line">            lastPage = $scope.searchMap.pageNo + <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $scope.firstDot = <span class="literal">false</span>;</span><br><span class="line">        $scope.lastDot = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = firstPage; i &lt;= lastPage; i++) &#123;</span><br><span class="line">        $scope.pageLable.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>多关键字搜索</em></p><p>​    在搜索时，分词器首先会将我们输入的关键字进行分词，然后对每个分词都会去搜索对应的结果，然后求得并集。比如搜索“三星手机”时，会将“三星”的搜索集合和“手机”搜索结构都返回给我们。这样做可以显示更多数据，让用户有更多的选择。同时会根据搜索的关键字匹配度进行排序。</p><p>​    此时注意：当搜索关键字有空格时，中文分词无法进行分词，那么就会导致搜索出来的结果较少或者没有。然后可以采用在<strong>后端去掉关键字中所有的空格</strong>。原来如此，我平时搜索的时候经常喜欢敲空格，以为这样多个条件就能更精准的搜索我想要的额，套路套路。</p><p><em>搜索数据排序</em></p><p>​    根据综合、价格升降序、新品的来实现排序。前端传递两个参数，分别为待排序的字段名称和排序方式（升序or降序）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.7 排序</span></span><br><span class="line">String sortValue = (String) searchMap.get(<span class="string">"sort"</span>);<span class="comment">// 升序 or 降序</span></span><br><span class="line">String sortFiled = (String) searchMap.get(<span class="string">"sortFiled"</span>); <span class="comment">// 升序字段</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="string">""</span>.equals(sortValue) &amp;&amp; !<span class="string">""</span>.equals(sortFiled)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sortValue.equals(<span class="string">"ASC"</span>)) &#123;<span class="comment">// 升序</span></span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.ASC, <span class="string">"item_"</span>+sortFiled);</span><br><span class="line">        query.addSort(sort);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sortValue.equals(<span class="string">"DESC"</span>)) &#123;</span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"item_"</span>+sortFiled);</span><br><span class="line">        query.addSort(sort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    销量和评价的排序(待完成)：</p><p>增加域 item_salecount 用于存储每一个 SKU 的销量信息，然后定时更新每一个 SKU 的销量数据（固定时间，比如一个月，否则会导致新上架的商品无法排在前列），同时每天定时更新一次销量数据。</p><p><em>隐藏品牌列表</em></p><p>​    当用户搜索的关键字包含品牌时隐藏品牌列表。也就是判断搜索关键字中是否存在返回的品牌列表中的信息。这个过程中发现，搜索关键字 searchMap.keywords 和输入框进行了绑定。那么当我们修改输入框的时候，可能就会影响品牌列表的显示。 此处将 search 重载，添加一个带 keywords的方法。然后搜索框就不和搜索关键字进行绑定，而是以传递参数的形式赋值给 searchMap。</p><p><em>首页和搜索页对接</em></p><p>​    在首页输入框中输入关键字，然后跳转到搜索页面，查询对应关键字的数据。</p><p>首页通过 链接的形式传递参数<code>location.href=&quot;http://localhost:9104/search.html#?keywords=&quot;+$scope.keywords;</code> 然后搜索模块使用 $location 服务接受参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 $location 服务</span></span><br><span class="line"><span class="comment">// 接受首页跳转</span></span><br><span class="line">$scope.loadKeywords=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$scope.searchMap.keywords =  $location.search()[<span class="string">'keywords'</span>];</span><br><span class="line">$scope.search();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>索引库的增量更新</em></p><p>​    实现在商品审核之后将数据更新到 solr 索引库，在商品删除的时候删除 solr 索引库中相应的记录。(增量更新)</p><p>​    商品审核是对商品表（SPU信息）进行操作，但是索引库中存储的是SKU信息，所以首先需要通过商品的 SPU 信息查询该商品对应的 SKU 信息，然后将查询到的集合提交给 solrTemplate。删除可以直接根据 goodsId 集合进行条件删除。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;品牌管理模块&quot;&gt;&lt;a href=&quot;#品牌管理模块&quot; class=&quot;headerlink&quot; title=&quot;品牌管理模块&quot;&gt;&lt;/a&gt;品牌管理模块&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;功能实现&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运用AngularJS前端框架的常用指令&lt;/li&gt;
&lt;li&gt;完成品牌管理的列表功能&lt;br&gt;&lt;img src=&quot;https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86.png&quot; alt=&quot;品牌管理&quot;&gt;&lt;/li&gt;
&lt;li&gt;完成品牌管理的分页列表功能&lt;/li&gt;
&lt;li&gt;完成品牌管理的增加功能&lt;/li&gt;
&lt;li&gt;完成品牌管理的修改功能
    
    </summary>
    
      <category term="项目学习" scheme="http://mindyu.com/categories/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="品优购" scheme="http://mindyu.com/tags/%E5%93%81%E4%BC%98%E8%B4%AD/"/>
    
      <category term="电商系统" scheme="http://mindyu.com/tags/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="项目实战" scheme="http://mindyu.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>品优购项目学习笔记</title>
    <link href="http://mindyu.com/2018/12/18/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://mindyu.com/2018/12/18/品优购项目学习笔记/</id>
    <published>2018-12-18T12:27:17.000Z</published>
    <updated>2018-12-20T08:13:25.707Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>一个综合性的 B2B2C 的电商网站系统。网站采用商家入驻的模式，商家入驻平台提交申请，有平台进行资质审核，审核通过后，商家拥有独立的管理后台录入商品信息。商品经过平台审核后即可发布。 </p><p><a href="https://github.com/Mindyu/pinyougou" target="_blank" rel="noopener">Github地址</a></p><a id="more"></a><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p><strong>系统模块</strong></p><ul><li>网站前台</li><li>运营商平台</li><li>商家管理平台</li></ul><p><strong>框架组合</strong></p><p>​    前端 angularJS + Bootstrap </p><p>​    后端 Spring + SpringMVC + mybatis + Dubbox</p><p><strong>系统架构</strong><br>​    面向服务的架构（SOA架构）。控制层与服务层分离，通过网络调用。<br><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9E%B6%E6%9E%84.jpg" width="50%" height="50%"></p><p><strong>Dubbox框架</strong><br>    致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。远程服务调用的分布式框架。</p><p>原理图<br><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/Dubbox%E5%8E%9F%E7%90%86.jpg" width="50%" height="50%"></p><p>节点角色说明：</p><ul><li>Provider: 暴露服务的服务提供方。 </li><li>Consumer: 调用远程服务的服务消费方。 </li><li>Registry: 服务注册与发现的注册中心。</li><li>Monitor: 统计服务的调用次调和调用时间的监控中心。 </li><li>Container: 服务运行容器。</li></ul><p><em>Dubbox 本地 jar 包部署与安装 ：</em></p><p>Dubbox 并不在 maven 中央仓库，需安装到本地仓库。将 dubbo-2.8.4.jar 包放到 d:\setup, 然后输入命令</p><p><code>mvn install:install-file -Dfile=d:\setup\dubbo-2.8.4.jar -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4 -Dpackaging=jar</code> 即可。</p><p><em>管理中心的部署 ：</em></p><p>开发过程中需要知道注册了哪些服务以便测试与管理。通过部署一个管理中心来实现。其实管理中心就是一个web应用，部署到tomcat即可。 </p><ul><li>编译 dubbox 源码，dubbox-master.zip 文件中的 dubbox-master 目录下，执行 mvn package -Dmaven.skip.test=true 。即可在 target 目录下看到 dubbo-admin-2.8.4.war 。将 war 包放置到服务器的 webapps 下。</li><li>如果你部署在zookeeper同一台主机并且端口是默认的2181，则无需修改任何配置。如果不是在一台主机上或端口被修改，需要修改 WEB-INF 下的 dubbo.properties  ，修改如下配置：<br><code>dubbo.registry.address=&lt;zookeeper://127.0.0.1:2181&gt;</code> 修改后重新启动tomcat。</li><li><a href="http://虚拟机ip:8080/dubbo-admin" target="_blank" rel="noopener">http://虚拟机ip:8080/dubbo-admin</a> 用户名 root 密码</li></ul><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/dubbox%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83.jpg" width="50%" height="50%"></p><p><em>注册中心 Zookeeper :</em></p><ul><li>上传 zookeeper 包，解压缩，创建 data 目录，修改 zoo.cfg 配置文件的 dataDir 配置</li><li>启动命令 安装目录 /root/zookeeper-3.4.6/</li></ul><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/zookeeper%E6%9C%8D%E5%8A%A1.jpg" width="50%" height="50%"></p><p><strong>模块关联关系图：</strong></p><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9D%97%E5%9B%BE.png" width="50%" height="50%"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个综合性的 B2B2C 的电商网站系统。网站采用商家入驻的模式，商家入驻平台提交申请，有平台进行资质审核，审核通过后，商家拥有独立的管理后台录入商品信息。商品经过平台审核后即可发布。 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Mindyu/pinyougou&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="项目学习" scheme="http://mindyu.com/categories/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="品优购" scheme="http://mindyu.com/tags/%E5%93%81%E4%BC%98%E8%B4%AD/"/>
    
      <category term="电商系统" scheme="http://mindyu.com/tags/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="项目实战" scheme="http://mindyu.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 常用命令集合</title>
    <link href="http://mindyu.com/2018/04/28/Ubuntu16-04-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/"/>
    <id>http://mindyu.com/2018/04/28/Ubuntu16-04-常用命令集合/</id>
    <published>2018-04-28T05:27:17.000Z</published>
    <updated>2018-05-07T13:32:43.094Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>方法一：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install 软件名         <span class="comment">//最常用方法</span></span><br><span class="line">sudo apt-get remove 软件名 <span class="comment">//卸载软件</span></span><br><span class="line">sudo apt-get update   <span class="comment">//更新软件列表，会访问源列表里的每个网址，并读取软件列表，然后保存在本地电脑</span></span><br><span class="line">sudo apt-get upgrade   <span class="comment">//更新软件，把本地已安装的软件，与刚update软件进行对比，如果发现已安装的软件版本太低，就会提示你更新。</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>方法二：</p><ul><li>deb软件包可直接安装</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  dpkg  -<span class="selector-tag">i</span>  package<span class="selector-class">.deb</span>        <span class="comment">//deb包安装方法</span></span><br></pre></td></tr></table></figure><p>deb详解：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dpkg -r package  删除包 </span><br><span class="line">dpkg -P package  删除包（包括配置文件）</span><br><span class="line">dpkg -L package  列出与该包关联的文件 </span><br><span class="line">dpkg -l packag  显示该包的版本e</span><br><span class="line">dpkg –unpack package<span class="selector-class">.deb</span>  解开 deb 包的内容 </span><br><span class="line">dpkg -S keyword  搜索所属的包内容 </span><br><span class="line">dpkg -l  列出当前已安装的包</span><br><span class="line">dpkg -c package<span class="selector-class">.deb</span>    列出 deb 包的内容 </span><br><span class="line">dpkg –configure package  配置包</span><br></pre></td></tr></table></figure><p>方法三:</p><ul><li>rpm软件包安装<br>Ubuntu的软件包格式是deb，如果要安装rpm的包，则要先用alien把rpm转换成deb。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install alien  <span class="comment">//安装alien工具</span></span><br><span class="line"></span><br><span class="line">alien -d *<span class="selector-class">.rpm</span><span class="comment">//转换rpm包为deb包，然后再按方法二安装</span></span><br><span class="line"></span><br><span class="line">alien -<span class="selector-tag">i</span> *<span class="selector-class">.rpm</span><span class="comment">//直接对rpm包进行安装</span></span><br></pre></td></tr></table></figure><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><ul><li>常用命令：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~                       <span class="comment">//当前用户主目录 </span></span><br><span class="line">cd ~                    <span class="comment">//home目录（/开头是绝对路径；.开头是相对路径）</span></span><br><span class="line">pwd                     <span class="comment">//获取当前路径</span></span><br><span class="line">mkdir mydir             <span class="comment">//新建目录mydir</span></span><br><span class="line">cp test(此处可为路径) /opt/test   <span class="comment">//将当前目录下的test复制到test中</span></span><br><span class="line">rm                      <span class="comment">//删除文件</span></span><br><span class="line">mv  oldname newname            <span class="comment">//重命名</span></span><br><span class="line">remove <span class="string">'y/a-z/A-Z/'</span> *<span class="selector-class">.c</span>  <span class="comment">//删文件</span></span><br><span class="line">cat test                <span class="comment">//查看文件test;-n显示行号</span></span><br><span class="line">file test               <span class="comment">//查看文件类型</span></span><br><span class="line">ls                         <span class="comment">//查看当前目录下的文件</span></span><br><span class="line">ls -l 文件名称               <span class="comment">//查看详细信息（文件夹将-l改为-ld）</span></span><br></pre></td></tr></table></figure><ul><li>文件权限说明：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件属性 连接数 文件拥有者 所属群组 文件大小 文件修改时间 文件名</span></span><br><span class="line">drwxrwxr-x  <span class="number">9</span> mindyu mindyu <span class="number">4096</span> <span class="number">4</span>月  <span class="number">29</span> <span class="number">01</span>:<span class="number">15</span> Blog</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E5%91%BD%E4%BB%A4/ls-l.png" alt="文件详细权限"><br>r可读，w可写，x 可执行，-不可读/写/执行<br>文件属性占10个位置<br>例如：<br>d rwx rwx r-x<br>第一个字符指定了文件类型：<br>‘- ’ 代表非目录的文件<br>‘d’ 代表一个目录。<br>第二段是文件拥有者User的属性，<br>第三段是文件所属群组Group的属性，<br>第四段是对于其它用户Other的属性。</p><ul><li>权限修改<br>方法一：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//chmod [-R] 模式 文件</span></span><br><span class="line">chmod abc file</span><br></pre></td></tr></table></figure><p>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。r=4，w=2，x=1</p><p>例子：<br>若要rwx属性则4+2+1=7；<br>若要rw-属性则4+2=6；<br>若要r-x属性则4+1=5。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="number">600</span> ××× （只有所有者有读和写的权限）</span><br><span class="line">sudo chmod <span class="number">644</span> ××× （所有者有读和写的权限，组用户和其他用户只有读的权限）</span><br><span class="line">sudo chmod <span class="number">777</span> ××× （每个人都有读和写以及执行的权限）</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [ugoa] &#123;+|-|=&#125; [rwxst] 文件</span><br></pre></td></tr></table></figure><p>用户参数：u 文件主     g 同组用户     o 其他用户     a 所有用户<br>操作方法：+ 增加后列权限     - 取消后列权限     = 置成后列权限<br>操作参数：r 可读     w 可写     x 可执行     s 运行时可置UID     t 运行时可置GID </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u+rw abc<span class="selector-class">.txt</span>      <span class="comment">//给用户增加读写权限</span></span><br><span class="line">chmod o-rwx abc<span class="selector-class">.txt</span>         <span class="comment">//不允许其他用户读写执行</span></span><br><span class="line">chmod g=rx abc<span class="selector-class">.txt</span>          <span class="comment">//只允许群组读取和执行</span></span><br></pre></td></tr></table></figure><h2 id="apt-get常用命令"><a href="#apt-get常用命令" class="headerlink" title="apt-get常用命令"></a>apt-get常用命令</h2><p>  update - 取回更新的软件包列表信息<br>  upgrade - 进行一次升级<br>  install - 安装新的软件包(注：软件包名称是 libc6 而非 libc6.deb)<br>  remove - 卸载软件包<br>  purge - 卸载并清除软件包的配置<br>  autoremove - 卸载所有自动安装且不再使用的软件包<br>  dist-upgrade - 发布版升级，见 apt-get(8)<br>  dselect-upgrade - 根据 dselect 的选择来进行升级<br>  build-dep - 为源码包配置所需的编译依赖关系<br>  clean - 删除所有已下载的包文件<br>  autoclean - 删除已下载的旧包文件<br>  check - 核对以确认系统的依赖关系的完整性<br>  source - 下载源码包文件<br>  download - 下载指定的二进制包到当前目录<br>  changelog - 下载指定软件包，并显示其changelog</p><h2 id="解压缩命令"><a href="#解压缩命令" class="headerlink" title="解压缩命令"></a>解压缩命令</h2><p>.tar<br>解包：<code>tar xvf FileName.tar</code><br>打包：<code>tar cvf FileName.tar DirName</code> 将DirName文件夹打包成一个FileName.tar文件<br>打包：将一大堆文件或目录变成一个总的文件，<br>压缩：将一个大的文件通过一些压缩算法变成一个小文件。</p><p>.gz<br>解压1：<code>gunzip FileName.gz</code><br>解压2：<code>gzip -d FileName.gz</code><br>压缩：<code>gzip FileName</code></p><p>.tar.gz 和 .tgz<br>解压：<code>tar zxvf FileName.tar.gz</code><br>压缩：<code>tar zcvf FileName.tar.gz DirName</code></p><p>.bz2<br>解压1：<code>bzip2 -d FileName.bz2</code><br>解压2：<code>bunzip2 FileName.bz2</code><br>压缩： <code>bzip2 -z FileName</code></p><p>.tar.bz2<br>解压：<code>tar jxvf FileName.tar.bz2</code><br>压缩：<code>tar jcvf FileName.tar.bz2 DirName</code></p><p>.bz<br>解压1：<code>bzip2 -d FileName.bz</code><br>解压2：<code>bunzip2 FileName.bz</code><br>压缩：未知</p><p>.tar.bz<br>解压：<code>tar jxvf FileName.tar.bz</code><br>压缩：未知</p><p>.Z<br>解压：<code>uncompress FileName.Z</code><br>压缩：<code>compress FileName</code></p><p>.tar.Z<br>解压：<code>tar Zxvf FileName.tar.Z</code><br>压缩：<code>tar Zcvf FileName.tar.Z DirName</code></p><p>.zip<br>解压：<code>unzip FileName.zip</code><br>压缩：<code>zip FileName.zip DirName</code></p><p>.rar<br>解压：<code>rar x FileName.rar</code><br>压缩：<code>rar a -r FileName.rar DirName</code><br>解压需要安装：<code>sudo apt-get install unrar</code><br>压缩需要安装：<code>sudo apt-get install rar</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;软件安装&quot;&gt;&lt;a href=&quot;#软件安装&quot; class=&quot;headerlink&quot; title=&quot;软件安装&quot;&gt;&lt;/a&gt;软件安装&lt;/h2&gt;&lt;p&gt;方法一：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install 软件名         &lt;span class=&quot;comment&quot;&gt;//最常用方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get remove 软件名			 &lt;span class=&quot;comment&quot;&gt;//卸载软件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update				   &lt;span class=&quot;comment&quot;&gt;//更新软件列表，会访问源列表里的每个网址，并读取软件列表，然后保存在本地电脑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get upgrade			   &lt;span class=&quot;comment&quot;&gt;//更新软件，把本地已安装的软件，与刚update软件进行对比，如果发现已安装的软件版本太低，就会提示你更新。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Ubuntu学习" scheme="http://mindyu.com/categories/Ubuntu%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ubuntu16.04" scheme="http://mindyu.com/tags/Ubuntu16-04/"/>
    
      <category term="Linux命令" scheme="http://mindyu.com/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 常用软件安装</title>
    <link href="http://mindyu.com/2018/04/26/Ubuntu%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/"/>
    <id>http://mindyu.com/2018/04/26/Ubuntu系统的使用及常用命令集合/</id>
    <published>2018-04-26T01:24:17.000Z</published>
    <updated>2018-05-07T13:32:43.096Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Ubuntu系统尝鲜"><a href="#Ubuntu系统尝鲜" class="headerlink" title="Ubuntu系统尝鲜"></a>Ubuntu系统尝鲜</h2><p>不知何时起，对Linux操作系统充满了好奇心，想去接触一番。    都说学编程搞开发的都离不开Linux操作系统，个人觉得Linux操作系统更适合学习，少了各种弹窗，界面更加清爽，系统任由你自己去操控，系统也更加稳定，许多的服务器也基本上都是Linux操作系统。然后就自己倒腾，在Windows上装了一个Ubuntu16.04LTS的双系统，通过日常是的使用去渐渐熟悉Linux操作系统，以及各种命令的使用～<a id="more"></a></p><h2 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h2><ol><li><a href="https://github.com/shadowsocks" target="_blank" rel="noopener">Shadowsocks安装</a></li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5 </span><br><span class="line"></span><br><span class="line">      sudo apt-get update</span><br><span class="line"></span><br><span class="line">      sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure><p><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/shadowsocks.png" alt="enter description here"><br>在Ubuntu系统上使用还需要设置系统代理，在 设置-》网络-》网络代理 中设置代理模式，最好设置为自动代理方式，然后添加一个pac文件，应用到整个系统即可。</p><ol start="2"><li><p>小书匠安装<br>一款Markdown编辑器，支持多平台使用。详细的<a href="http://www.mindyu.com/2018/04/28/Ubuntu%E5%AE%89%E8%A3%85%E5%B0%8F%E4%B9%A6%E5%8C%A0%E5%B9%B6%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener">安装及添加桌面快捷方式</a>可见我的另一篇博客。</p></li><li><p>安装搜狗输入法<br>其实个人感觉系统自带的输入法也还可以。<br> 3.1 在官网下载搜狗输入法安装包<br> 3.2 切换到deb包所在的目录，并执行以下命令：<br><code>sudo dkpg -i deb包名</code><br> 3.3 若出现由于缺少相关依赖文件的错误。执行以下命令，安装所缺少的依赖文件，然后再次使用3.2命令完成安装：<br><code>sudo apt-get -f install</code><br> 3.4 在“语言支持”面板，添加汉语支持，并将输入法系统设置为fcitx。然后重启<br> 3.5 在Dash中搜索fcitx configuartion，在Input Method中添加和配置sogoupinyin即可</p></li><li><p>JDK安装</p><ul><li><p>添加ppa</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装oracle-java-installer</p></li></ul></li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JDK8</span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JDK7</span><br><span class="line">sudo apt-get install oracle-java7-installer</span><br></pre></td></tr></table></figure><p>安装时会提示你同意Oracle的服务条款，选择ok，然后选择yes</p><ol start="5"><li><p>Eclipse安装<br>安装Eclipse<br><code>sudo apt-get install eclipse</code><br>启动Eclipse<br><code>eclipse</code><br>以及快捷方式制作，可见<a href="http://www.mindyu.com/2018/04/28/Ubuntu%E5%AE%89%E8%A3%85%E5%B0%8F%E4%B9%A6%E5%8C%A0%E5%B9%B6%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener">小书匠安装的详细博客</a></p></li><li><p>MyEclipse安装</p></li></ol><ul><li>在<a href="http://www.myeclipsecn.com/download/" target="_blank" rel="noopener">官方中文网</a>下载MyEclipse安装包</li><li>我现在的是离线版，解压后为.run为后缀名的文件</li><li>双击执行，然后就和windows安装过程一样。选择安装目录比如/opt/MyEclipse/，一路Next即可。最后一步取消勾选。不立即打开MyEclipse。</li><li>然后下载对应的破解包，解压之后，执行cracker.jar包<br><code>java -jar cracker.jar</code></li><li>之后的步骤和Windows破解过程一样。<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/myeclipse.png" alt="enter description here"><br>如果你一遍成功，那么就恭喜你。 我第一次安装失败了，因为破解包的问题，所以要确保破解包的正确性。 失败之后存在一个卸载不干净的问题。我也没有找到解决办法。 换了一台电脑，另外找了一个破解包，完美破解。</li></ul><ol start="7"><li>Google浏览器安装</li></ol><ul><li>下载 Chrome（Linux 版）<a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">https://www.google.cn/intl/zh-CN/chrome/</a></li><li>终端下输入如下内容来安装.deb文件<br><code>sudo dpkg -i 软件包名.deb</code></li><li>然后在Dash中搜索Google，打开即可。</li></ul><p>使用中可能遇到两个问题：<br> （1）重启之后，Google浏览器就打不开了<br> （2）设置新标签页打开网页</p><p> 解决方案：<br> 问题1：<br> 网上的解决办法，大多是删除chrome的配置文件<br> <code>rm -r~/.config/google-chrome</code><br> 但是指标不治本，下次打开依然会出现问题<br> 真正的解决方案是：<br> 安装gnome-keyring。因为在登录谷歌账户之后，chrome会使用gnome-keyring来保护你的账户。<br> <code>sudo apt install gnome-keyring</code></p><p> 问题2：<br> 打开google页面，任意搜索一个内容，在搜索结果页面的上面靠中间位置有一个设置，点击设置然后选择 搜索设置 ，即进入如下页面。<br>     <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/google%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F.png" alt="enter description here"><br>    然后勾选结果打开方式的 在新的浏览器窗口中打开所选的每条搜索结果即可。</p><ol start="8"><li>系统监视器<br>实时查看电脑的cpu，内存占用率，更可以查看网速<br>安装：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor </span><br><span class="line"></span><br><span class="line">      sudo apt-get update  </span><br><span class="line"></span><br><span class="line">      sudo apt-get install indicator-sysmonitor</span><br></pre></td></tr></table></figure></li></ol><p><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/sysmonitor.png" alt="    "></p><ol start="9"><li>WPS 安装</li></ol><ul><li>在<a href="http://community.wps.cn/download/" target="_blank" rel="noopener">WPS官网下载alpha版本</a>，我下载的是wps-office_10.1.0.5672~a21_amd64.deb</li><li>执行安装命令：<br><code>sudo dpkg -i wps-office_10.1.0.5672~a21_amd64.deb</code></li><li>安装完成后，在Dash中即可搜索到，打开会发现字体缺失的问题<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/wps_%E7%BC%BA%E5%A4%B1%E5%AD%97%E4%BD%93.png" alt="enter description here"></li><li>下载<a href="http://pan.baidu.com/s/1mh0lcbY" target="_blank" rel="noopener">字体包</a></li><li>创建目录：<br><code>sudo mkdir /usr/share/fonts/wps-office</code></li><li>将下载的字体复制到创建的目录：<br><code>sudo cp -r wps_symbol_fonts.zip /usr/share/fonts/wps-office</code></li><li>切换到<code>/usr/share/fonts/wps-office</code>目录解压字体包：<br><code>sudo unzip wps_symbol_fonts.zip</code></li><li>解压后删除字体包：<br><code>sudo rm -r wps_symbol_fonts.zip</code><br>再次打开就不会提示缺失字体包了！<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/wps.png" alt="enter description here"></li></ul><ol start="10"><li>下载工具uget安装</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:plushuang-tw/uget-stable</span><br><span class="line"></span><br><span class="line">　　 sudo apt-get update</span><br><span class="line"></span><br><span class="line">　　 sudo apt-get install uget</span><br></pre></td></tr></table></figure><p><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/uget.png" alt="enter description here"><br>终端和浏览器下载东西比较慢的时候可以试试，下载速度还是比较可观！</p><p>参考博客：<br><a href="https://www.cnblogs.com/wadxy1314/p/6880264.html" target="_blank" rel="noopener">https://www.cnblogs.com/wadxy1314/p/6880264.html</a></p><p><a href="https://blog.csdn.net/Jesse_Mx/article/details/52816928" target="_blank" rel="noopener">https://blog.csdn.net/Jesse_Mx/article/details/52816928</a></p><p><a href="https://blog.csdn.net/u011324454/article/details/78497021" target="_blank" rel="noopener">https://blog.csdn.net/u011324454/article/details/78497021</a></p><p><a href="https://blog.csdn.net/VectorWWW/article/details/78820156" target="_blank" rel="noopener">https://blog.csdn.net/VectorWWW/article/details/78820156</a></p><p><a href="https://my.oschina.net/renwofei423/blog/635798" target="_blank" rel="noopener">https://my.oschina.net/renwofei423/blog/635798</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ubuntu系统尝鲜&quot;&gt;&lt;a href=&quot;#Ubuntu系统尝鲜&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu系统尝鲜&quot;&gt;&lt;/a&gt;Ubuntu系统尝鲜&lt;/h2&gt;&lt;p&gt;不知何时起，对Linux操作系统充满了好奇心，想去接触一番。    都说学编程搞开发的都离不开Linux操作系统，个人觉得Linux操作系统更适合学习，少了各种弹窗，界面更加清爽，系统任由你自己去操控，系统也更加稳定，许多的服务器也基本上都是Linux操作系统。然后就自己倒腾，在Windows上装了一个Ubuntu16.04LTS的双系统，通过日常是的使用去渐渐熟悉Linux操作系统，以及各种命令的使用～
    
    </summary>
    
      <category term="Ubuntu学习" scheme="http://mindyu.com/categories/Ubuntu%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ubuntu16.04" scheme="http://mindyu.com/tags/Ubuntu16-04/"/>
    
      <category term="Linux命令" scheme="http://mindyu.com/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装小书匠并创建桌面快捷方式</title>
    <link href="http://mindyu.com/2018/04/24/Ubuntu%E5%AE%89%E8%A3%85%E5%B0%8F%E4%B9%A6%E5%8C%A0%E5%B9%B6%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
    <id>http://mindyu.com/2018/04/24/Ubuntu安装小书匠并创建桌面快捷方式/</id>
    <published>2018-04-24T15:47:16.000Z</published>
    <updated>2018-05-07T13:32:43.095Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="小书匠简介"><a href="#小书匠简介" class="headerlink" title="小书匠简介"></a>小书匠简介</h2><p> <a href="http://soft.xiaoshujiang.com/" target="_blank" rel="noopener">小书匠编辑器</a>是一款专为markdown写作而设计的编辑器。 支持多种编辑模式。单栏编辑，双栏编辑，三栏编辑，实时预览，全屏写作，全屏阅读…想怎么切换，就怎么切换，就是这样随心所欲。 多种主题选择、丰富的语法支持、第三方同步等功能特色。<br>原先在windows上习惯了使用小书匠，然后就想着在Ubuntu上也装一个。<a id="more"></a><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E5%B0%8F%E4%B9%A6%E5%8C%A0/xsj_stand.png" alt="enter description here"></p><h2 id="小书匠安装"><a href="#小书匠安装" class="headerlink" title="小书匠安装"></a>小书匠安装</h2><p>小书匠已经托管到github，首先下载对应版本到本地。<br><code>https://github.com/suziwen/markdownxiaoshujiang</code></p><p>解压下载下来的zip文件到指定文件夹：<br><code># unzip Story-writer-linux64.zip.zip -d /opt/Story-Writer/</code></p><p>切换到解压出来的文件夹根目录，然后启动软件<br><code># ./Story-writer</code>即可启动软件</p><p><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E5%B0%8F%E4%B9%A6%E5%8C%A0/story_writer.png" alt="小书匠"></p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>但是存在两个问题：</p><ol><li>无快捷方式，每次打开过于麻烦</li><li>不能设置小书匠为系统默认打开.md文件</li></ol><h2 id="创建小书匠桌面快捷方式"><a href="#创建小书匠桌面快捷方式" class="headerlink" title="创建小书匠桌面快捷方式"></a>创建小书匠桌面快捷方式</h2><p>对于没有快捷方式这个问题，让我很容易想到当初安装Eclipse的时候也没有快捷启动方式。然后在网上找到解决方案。</p><ol><li><p>UBuntu的菜单图标保存在/usr/share/applications目录下，所以先在该目录下建一个eclipse.desktop文件<br><code>sudo gedit /usr/share/applications/eclipse.desktop</code></p></li><li><p>在文件中输入以下内容</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-<span class="number">8</span></span><br><span class="line">Name=Eclipse Platfrom          <span class="comment">//图标名字，可修改</span></span><br><span class="line">Comment=Eclipse IDE   <span class="comment">//注释，可修改</span></span><br><span class="line">Exec=/opt/eclipse/eclipse      <span class="comment">//Eclipse文件夹下eclipse的路径</span></span><br><span class="line">Icon=/opt/eclipse/icon.xpm     //Eclipse文件夹下图标icon.xpm的路径</span><br><span class="line">Terminal=false</span><br><span class="line">StartupNotify=true</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br></pre></td></tr></table></figure><p>3.对该文件进行赋权<br><code>chmod u+x /usr/share/applications/eclipse.desktop</code></p><p>4.双击eclipse的图标就可以运行，然后复制到桌面就可以了</p><p>根据Ecllipse图标的制作，同理，然后试了小书匠是否也可以。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-<span class="number">8</span></span><br><span class="line">Name=Story_Writer          </span><br><span class="line">Comment=Story_Writer</span><br><span class="line">Exec=/opt/Story_Writer/Story-writer</span><br><span class="line">Icon=/opt/Story_Writer/Story-writer.png</span><br><span class="line">Terminal=false</span><br><span class="line">StartupNotify=true</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br></pre></td></tr></table></figure><p>如图：<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E5%B0%8F%E4%B9%A6%E5%8C%A0.png" alt="小书匠图标"></p><p>然后就出现了一个Story_Writer的快捷方式，双击即可打开小书匠。是不是很简单～</p><p> 对于另一个问题目前还没找到解决方案….  原谅我还只是一个小白。如果有幸你可以看到，请留言我！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小书匠简介&quot;&gt;&lt;a href=&quot;#小书匠简介&quot; class=&quot;headerlink&quot; title=&quot;小书匠简介&quot;&gt;&lt;/a&gt;小书匠简介&lt;/h2&gt;&lt;p&gt; &lt;a href=&quot;http://soft.xiaoshujiang.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小书匠编辑器&lt;/a&gt;是一款专为markdown写作而设计的编辑器。 支持多种编辑模式。单栏编辑，双栏编辑，三栏编辑，实时预览，全屏写作，全屏阅读…想怎么切换，就怎么切换，就是这样随心所欲。 多种主题选择、丰富的语法支持、第三方同步等功能特色。&lt;br&gt;原先在windows上习惯了使用小书匠，然后就想着在Ubuntu上也装一个。
    
    </summary>
    
      <category term="Ubuntu学习" scheme="http://mindyu.com/categories/Ubuntu%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ubuntu16.04" scheme="http://mindyu.com/tags/Ubuntu16-04/"/>
    
      <category term="小书匠" scheme="http://mindyu.com/tags/%E5%B0%8F%E4%B9%A6%E5%8C%A0/"/>
    
      <category term="Markdown" scheme="http://mindyu.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>浅析素数环问题</title>
    <link href="http://mindyu.com/2018/03/18/%E6%B5%85%E6%9E%90%E7%B4%A0%E6%95%B0%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
    <id>http://mindyu.com/2018/03/18/浅析素数环问题/</id>
    <published>2018-03-18T03:51:06.000Z</published>
    <updated>2018-04-11T01:37:10.810Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="素数环的实现"><a href="#素数环的实现" class="headerlink" title="素数环的实现"></a>素数环的实现</h2><p><strong>问题描述</strong><br> 从1到n这n个整数围成一个圆环，若其中任意2个相邻的数字相加，结果均为素数，那么这个环就成为素数环。<br>  现在要求输入一个n，求n个数围成一圈有多少种素数环，规定第一个数字是1。<a id="more"></a></p><p> <strong>设计思路</strong><br>  1.数据结构：res数组用于保存最后满足描述的情况，isUsed数组用于标记1-n这些数字是否被使用，已达到不重复的效果。<br>  2.规定第一个数字为1，res[0] = 1;<br>  3.依次后面的值有两个限制 a.不能和前面的数字重复 b.和前一个数字相加为素数。</p><p><strong>代码实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> max = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[max];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span>[] isUsed = <span class="keyword">new</span> <span class="keyword">boolean</span>[max];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; isUsed.length; i++) &#123;</span><br><span class="line">res[i] = i+<span class="number">1</span>;</span><br><span class="line">isUsed[i] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">N = sc.nextInt();</span><br><span class="line"><span class="keyword">while</span>(N!=<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"Case "</span>+ k++ +<span class="string">":"</span>);</span><br><span class="line"><span class="keyword">if</span> (N%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">primeRing(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"No Answer"</span>);</span><br><span class="line">&#125;</span><br><span class="line">N = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sc.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归实现，输出素数环</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">primeRing</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;          </span><br><span class="line"><span class="keyword">if</span> (cur==N &amp;&amp; isPrime(res[cur-<span class="number">1</span>]+res[<span class="number">0</span>])) &#123;   <span class="comment">// 执行完成，并且首尾相加也是素数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N-<span class="number">1</span>; i++) &#123;</span><br><span class="line">System.out.print(res[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;System.out.print(res[N-<span class="number">1</span>]);</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;      <span class="comment">// 选取一个满足条件的值，继续递归</span></span><br><span class="line"><span class="keyword">if</span> (!isUsed[i] &amp;&amp; isPrime(i+res[cur-<span class="number">1</span>])) &#123;</span><br><span class="line">res[cur] = i;</span><br><span class="line">isUsed[i] = <span class="keyword">true</span>;</span><br><span class="line">primeRing(cur+<span class="number">1</span>);</span><br><span class="line">isUsed[i] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为素数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">3</span>) &#123;    <span class="comment">// 两数相加必定大于2，所以小于3的值不用考虑</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= Math.sqrt(x); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (x%i==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>运行结果</strong><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E7%B4%A0%E6%95%B0%E7%8E%AF.png" alt="素数环"></p><h2 id="素数表格"><a href="#素数表格" class="headerlink" title="素数表格"></a>素数表格</h2><p><strong>问题描述</strong><br> 前两天遇到一个问题和素数有关，从1到n中选择9个数字，填入3*3的表格中，使得相邻的数字相加和为素数。输出所有的情况。</p><p> <strong>设计思路</strong><br> 在CSDN上面看到过一片关于这个问题的博客。<a href="http://blog.csdn.net/yinxusen/article/details/6281687" target="_blank" rel="noopener">相邻两方格内的两个整数之和为质数-经典算法详解</a>。理解起来可能还要一时半会儿。但是我觉得有了上述素数环的理解以及实现，只需要稍微修改一下上面的代码就可以达到表格的要求。<br> 1.将3*3二维表格转换为一维数组。以下表格的数值代表数组中的位置。</p><table><thead><tr><th>0</th><th>1</th><th>2</th></tr></thead><tbody><tr><td>7</td><td>8</td><td>3</td></tr><tr><td>6</td><td>5</td><td>4</td></tr></tbody></table><p>2.问题可以简化为数组0-7下标组成一个素数环。然后数组res[8]同时与res<a href="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E7%B4%A0%E6%95%B0%E7%8E%AF.png" target="_blank" rel="noopener">1</a>、res<a href="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E7%B4%A0%E6%95%B0%E8%A1%A8%E6%A0%BC.png" target="_blank" rel="noopener">3</a>、res[5]、res[7]分别相加合为素数。</p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> max = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[max];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span>[] isUsed = <span class="keyword">new</span> <span class="keyword">boolean</span>[max];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; isUsed.length; i++) &#123;</span><br><span class="line">res[i] = i+<span class="number">1</span>;</span><br><span class="line">isUsed[i] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">N = sc.nextInt();</span><br><span class="line">primeRing(<span class="number">1</span>);</span><br><span class="line">sc.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归实现，输出素数环</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">primeRing</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;          </span><br><span class="line"><span class="keyword">if</span> (cur==<span class="number">8</span> &amp;&amp; isPrime(res[cur-<span class="number">1</span>]+res[<span class="number">0</span>])) &#123;   <span class="comment">// res[0]+res[7]和也为素数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;      <span class="comment">// 选取最后一个满足条件的值，填入res[8]位置</span></span><br><span class="line"><span class="keyword">if</span> (!isUsed[i] &amp;&amp; isPrime(i+res[<span class="number">1</span>]) &amp;&amp; isPrime(i+res[<span class="number">3</span>]) &amp;&amp; isPrime(i+res[<span class="number">5</span>]) &amp;&amp; isPrime(i+res[<span class="number">7</span>])) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)       <span class="comment">// 输出第一行</span></span><br><span class="line">System.out.print(res[j]+<span class="string">" "</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.print(res[<span class="number">7</span>]+<span class="string">" "</span>);  <span class="comment">// 输出第二行</span></span><br><span class="line">System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">System.out.print(res[<span class="number">3</span>]+<span class="string">" "</span>);</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">6</span>; j &gt; <span class="number">3</span>; j--)   <span class="comment">// 输出第三行</span></span><br><span class="line">System.out.print(res[j]+<span class="string">" "</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur&lt;<span class="number">8</span>)&#123;  <span class="comment">// 数组0-7下标组成一个素数环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;      <span class="comment">// 选取一个满足条件的值，继续递归</span></span><br><span class="line"><span class="keyword">if</span> (!isUsed[i] &amp;&amp; isPrime(i+res[cur-<span class="number">1</span>])) &#123;</span><br><span class="line">res[cur] = i;</span><br><span class="line">isUsed[i] = <span class="keyword">true</span>;</span><br><span class="line">primeRing(cur+<span class="number">1</span>);</span><br><span class="line">isUsed[i] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为素数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">3</span>) &#123;    <span class="comment">// 两数相加必定大于2，所以小于3的值不用考虑</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= Math.sqrt(x); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (x%i==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行截图</strong><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E7%B4%A0%E6%95%B0%E8%A1%A8%E6%A0%BC.png" alt="3*3表格素数"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;素数环的实现&quot;&gt;&lt;a href=&quot;#素数环的实现&quot; class=&quot;headerlink&quot; title=&quot;素数环的实现&quot;&gt;&lt;/a&gt;素数环的实现&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;br&gt; 从1到n这n个整数围成一个圆环，若其中任意2个相邻的数字相加，结果均为素数，那么这个环就成为素数环。&lt;br&gt;  现在要求输入一个n，求n个数围成一圈有多少种素数环，规定第一个数字是1。
    
    </summary>
    
      <category term="算法分析" scheme="http://mindyu.com/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据结构" scheme="http://mindyu.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="素数环问题" scheme="http://mindyu.com/tags/%E7%B4%A0%E6%95%B0%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
    
      <category term="3*3素数表格" scheme="http://mindyu.com/tags/3-3%E7%B4%A0%E6%95%B0%E8%A1%A8%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>浅析n元素出栈序列</title>
    <link href="http://mindyu.com/2018/02/24/%E6%B5%85%E6%9E%90n%E5%85%83%E7%B4%A0%E5%87%BA%E6%A0%88%E5%BA%8F%E5%88%97/"/>
    <id>http://mindyu.com/2018/02/24/浅析n元素出栈序列/</id>
    <published>2018-02-24T06:34:21.000Z</published>
    <updated>2018-03-18T03:53:15.689Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="栈的简介"><a href="#栈的简介" class="headerlink" title="栈的简介"></a>栈的简介</h2><p>   栈（stack）又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。遵循后进先出的原则。<a id="more"></a></p><h2 id="n个元素出栈顺序种数"><a href="#n个元素出栈顺序种数" class="headerlink" title="n个元素出栈顺序种数"></a>n个元素出栈顺序种数</h2><ol><li><p><strong>问题描述</strong><br>有n个元素依次进栈，请问总共有多少种出栈序列？</p></li><li><p><strong>算法分析</strong><br>首先列举出简单的情况：<br>当1个元素进栈，有1种出栈顺序；<br>当2个元素进栈，有2种出栈顺序；<br>当3个元素进栈，有5种出栈顺序 ；<br>我们把n个元素的出栈个数的记为f(n), 则对于1，2，3有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(1) = 1     //即 1</span><br><span class="line">f(2) = 2     //即 12、21</span><br><span class="line">f(3) = 5     //即 123、132、213、321、231</span><br></pre></td></tr></table></figure></li></ol><p>对于f(4)，我们假定是a,b,c,d四个元素。任意一个元素在其出栈序列中只有4个位置。取元素a分别讨论其在出栈序列中的位置：<br>1.当a元素在位置1时，只可能是a先入栈，然后出栈。接下来就是其它三个元素b,c,d的出栈序列，也就是子问题f(3)。<br>2.元素a在位置2处，有一个元素比a先出栈可能的序列即f(1)，另外两个元素在位置3，4即f(2)。<br>3.元素a在位置3处，有两个元素比a先出栈可能的序列即f(2)，另外两个元素在位置4即f(1)。<br>4.元素a在位置4处，有三个元素比a先出栈可能的序列即f(3).<br>那么f(4) =  f(3) + f(2) <em> f(1) + f(1) </em> f(2) + f(3);<br>然后推广到n，按同理我们可以很容易的得到：<br>f(n) = f(0)<em>f(n-1) + f(1)</em>f(n-2) + … + f(n-1)*f(0) </p><p>上式也就是<strong>卡特兰数（Catalen）</strong>:<br>卡特兰数的通项公式为：<img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/catalen1.png" alt="enter description here"><br>变换形式：<img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/catalen.png" alt="enter description here"><br>另类递归式：  C(n)=((4<em>n-2)/(n+1))</em>C(n-1);</p><p>卡特兰数的应用：<br>1.括号化问题。<br>    矩阵链乘： P=a1×a2×a3×……×an，依据乘法结合律，不改变其顺序，只用括号表示成对的乘积，试问有几种括号化的方案？(C(n-1)种)</p><p>2.出栈次序问题。<br>    n个元素依次进栈，请问总共有多少种出栈序列？<br>    案例：2012腾讯实习招聘笔试题<br>在图书馆一共6个人在排队，3个还《面试宝典》一书，3个在借《面试宝典》一书，图书馆此时没有了面试宝典了，求他们排队的总数？<br>    解析：还书相当于入栈，借书相当于出栈。只有当栈内元素不为空时才可以借书。C(3) = 5。借书3个人，还书3个人求全排列。<br>    总数为5<em>3!</em>3! = 180。</p><p>3.将多边行划分为三角形问题。<br>将一个凸N+2多边形区域分成三角形区域的方法数?<br>类似：一位大城市的律师在她住所以北n个街区和以东n个街区处工作。每天她走2n个街区去上班。如果她<br>从不穿越（但可以碰到）从家到办公室的对角线，那么有多少条可能的道路？</p><p>类似：在圆上选择2n个点,将这些点成对连接起来使得所得到的n条线段不相交的方法数?</p><p>4.给顶节点组成二叉树的问题。<br>给定N个节点，能构成多少种不同的二叉树？<br>（能构成Cn个）<br>Catalan数的解法:<br>Catalan数的组合公式为 Cn=C(2n,n) / (n+1);<br>此数的递归公式为 C(n ) = C(n-1)<em>(4</em>n-2) / (n+1)</p><ol start="2"><li><strong>代码实现</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">Catalen_1(arr, n);</span><br><span class="line"><span class="comment">//Catalen_2(arr, n);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sc.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Catalen_1</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 递推关系式   f(n) = f(0)*f(n-1) + f(1)*f(n-2) + … + f(n-1)*f(0) </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[i] += arr[j] * arr[i-<span class="number">1</span>-j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Catalen_2</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 递推关系式  C(n)=((4*n-2)/(n+1))*C(n-1)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    arr[i] = arr[i-<span class="number">1</span>] * (<span class="number">4</span>*i-<span class="number">2</span>) / (i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>运行结果</strong><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/CatalenCode.png" alt="enter description here"></li></ol><h2 id="n个元素出栈序列输出"><a href="#n个元素出栈序列输出" class="headerlink" title="n个元素出栈序列输出"></a>n个元素出栈序列输出</h2><p>1.<strong>设计思路</strong><br>所需数据结构，1栈2队列，输入队列从头部取出数据压入栈中，数据出栈进入输出队列。最终输出队列即为出栈序列的情况。<br>采用递归的方式，将大问题分解为小问题。栈存在两种状态：1.输入队列入栈，2.输出队列出栈。</p><p>2.<strong>代码实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">n = sc.nextInt();<span class="comment">// 元素个数</span></span><br><span class="line">Stack&lt;Integer&gt; s = <span class="keyword">new</span> Stack&lt;Integer&gt;(); </span><br><span class="line">Queue&lt;Integer&gt; in = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">in.offer(i);</span><br><span class="line">&#125;</span><br><span class="line">Queue&lt;Integer&gt; out = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">printAllOutStackSeq(in, s, out);</span><br><span class="line"></span><br><span class="line">    sc.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAllOutStackSeq</span><span class="params">(Queue&lt;Integer&gt; in, Stack&lt;Integer&gt; s, Queue&lt;Integer&gt; out)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (out.size()==n) &#123;      <span class="comment">// 所有元素都出栈了</span></span><br><span class="line"> <span class="keyword">while</span>( !out.isEmpty() )&#123;  </span><br><span class="line">          System.out.print(out.poll()+<span class="string">""</span>);; </span><br><span class="line">     &#125;  </span><br><span class="line"> System.out.println();</span><br><span class="line"> <span class="keyword">return</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Queue&lt;Integer&gt; inCopy = <span class="keyword">new</span> LinkedList&lt;Integer&gt;(in);</span><br><span class="line">Stack&lt;Integer&gt; sCopy = (Stack&lt;Integer&gt;) s.clone(); </span><br><span class="line">Queue&lt;Integer&gt; outCopy = <span class="keyword">new</span> LinkedList&lt;Integer&gt;(out);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( !s.empty() ) &#123;<span class="comment">// 出栈，将元素出栈，push到结果队列中  </span></span><br><span class="line">        out.offer( s.pop() ); </span><br><span class="line">        printAllOutStackSeq( inCopy, s, out );   </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( !in.isEmpty() ) &#123; <span class="comment">// 入栈，将输入队列出队，进行入栈  </span></span><br><span class="line">sCopy.push(in.poll());</span><br><span class="line">printAllOutStackSeq( in, sCopy, outCopy );   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.<strong>运行结果</strong><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/outStackSeq.png" alt="输出所有出栈序列"></p><h2 id="判断一个序列是否是可能的出栈序列"><a href="#判断一个序列是否是可能的出栈序列" class="headerlink" title="判断一个序列是否是可能的出栈序列"></a>判断一个序列是否是可能的出栈序列</h2><p>1.<strong>设计思路</strong><br>输入一个序列，判断该序列是否可能是正确的出栈序列（反向推理）。<br>代码中A代表着有序的输入队列（1，2，3….，n）<br>代码中B代表着所输入的目标序列的下标，从下标为1的位置开始匹配。<br>代码中S代表栈，进行入栈、出栈操作。<br><code>A == target[B]</code> 当前输入队列头元素与目标序列B位置元素相同，也就是输入队列元素取头元素进行入栈，然后立即出栈。<br><code>!s.isEmpty() &amp;&amp; s.peek() == target[B]</code> 当前栈顶元素与目标序列B位置元素相同，也就是栈内元素出栈。<br><code>A &lt;= n</code> 上述两种情况都不满足时，也就是输入队列的头元素一直进行入栈操作。<br>最后也不入栈也不出栈，也不就意味着目标序列不是出栈序列。</p><p>2.<strong>代码实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">while</span>(sc.hasNext())&#123;</span><br><span class="line"><span class="keyword">int</span> n = sc.nextInt();<span class="comment">// 元素个数</span></span><br><span class="line"><span class="keyword">if</span> (n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span>[] target = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">Stack&lt;Integer&gt; s = <span class="keyword">new</span> Stack&lt;Integer&gt;(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">target[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A = <span class="number">1</span>, B = <span class="number">1</span>, flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(B &lt;= n)&#123;</span><br><span class="line"><span class="keyword">if</span> (A == target[B]) &#123;</span><br><span class="line">A++;B++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (!s.isEmpty() &amp;&amp; s.peek() == target[B]) &#123;</span><br><span class="line">s.pop(); B++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (A &lt;= n ) &#123;</span><br><span class="line">s.push(A++);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">flag = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(flag==<span class="number">1</span>?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    sc.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.<strong>运行结果</strong><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/isOutStackSeq.png" alt="判断一个序列是否是可能的出栈序列"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;栈的简介&quot;&gt;&lt;a href=&quot;#栈的简介&quot; class=&quot;headerlink&quot; title=&quot;栈的简介&quot;&gt;&lt;/a&gt;栈的简介&lt;/h2&gt;&lt;p&gt;   栈（stack）又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。遵循后进先出的原则。
    
    </summary>
    
      <category term="算法分析" scheme="http://mindyu.com/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="栈" scheme="http://mindyu.com/tags/%E6%A0%88/"/>
    
      <category term="数据结构" scheme="http://mindyu.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="卡特兰数" scheme="http://mindyu.com/tags/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"/>
    
      <category term="Catalen" scheme="http://mindyu.com/tags/Catalen/"/>
    
  </entry>
  
  <entry>
    <title>操作系统经典算法之银行家算法</title>
    <link href="http://mindyu.com/2017/12/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8B%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/"/>
    <id>http://mindyu.com/2017/12/13/操作系统经典算法之银行家算法/</id>
    <published>2017-12-13T02:22:50.000Z</published>
    <updated>2018-02-25T14:06:45.152Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p><strong>1. 银行家算法的实现思想</strong><br>     允许进程动态地申请资源，系统在每次实施资源分配之前，先计算资源分配的安全性，若此次资源分配安全（即资源分配后，系统能按某种顺序来为每个进程分配其所需的资源，直至最大需求，使每个进程都可以顺利地完成），便将资源分配给进程，否则不分配资源，让进程等待。</p><p><strong>2. 死锁的概念</strong><br>　　死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。 <a id="more"></a> 此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。<br>银行家算法是避免死锁的一种重要方法。 操作系统按照银行家制定的规则为进程分配资源，当进程首次申请资源时，要测试该进程对资源的最大需求量，如果系统现存的资源可以满足它的最大需求量则按当前的申请量分配资源，否则就推迟分配。当进程在执行中继续申请资源时，先测试该进程已占用的资源数与本次申请的资源数之和是否超过了该进程对资源的最大需求量。若超过则拒绝分配资源，若没有超过则再测试系统现存的资源能否满足该进程尚需的最大资源量，若能满足则按当前的申请量分配资源，否则也要推迟分配。</p><p><strong>3. 产生死锁的必要条件</strong><br>①　<strong>互斥条件</strong>：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。<br>②　<strong>请求和保持条件</strong>：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。<br>③　<strong>不可抢占条件</strong>：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。<br>④　<strong>循环等待条件</strong>：指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，•••，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。 </p><p><strong>4.功能实现</strong><br>     理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和解除死锁。所以，在系统设计、进程调度等方面注意如何能够不让这四个必要条件同时成立，如何确定资源的合理分配算法，避免进程永久占据系统资源。此外，也要防止进程在处于等待状态的情况下占用资源,在系统运行过程中，对进程发出的每一个系统能够满足的资源申请进行动态检查，并根据检查结果决定是否分配资源，若分配后系统可能发生死锁，则不予分配，否则予以分配 。因此，对资源的分配要给予合理的规划。</p><h2 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h2><p><strong>1.数据结构</strong><br>1) 可利用资源向量Available。这是一个含有m个元素的数组，其中的而每一个元素代表一类可利用资源数目，其初始值是系统中所配置的该类全部可用资源的数目，其数值随该类资源的分配和回收而动态的改变。如果Available[j]=K,则表示系统中现有Rj类资源K个。</p><p>2) 最大需求矩阵Max。这是一个n * m的矩阵，它定义了系统中n个进程中的每一个进程对m类资源的最大需求。如果Max[i,j]=K；则表示进程i需要Rj类资源的最大数目为K。</p><p>3) 分配矩阵Allocation。这也是一个n * m的矩阵，它定义了系统中每一类资源当前已分配给每一进程的资源数。如果Allocation[i,j]=K，则表示进程i当前已分得Rj类资源的数目为K。</p><p>4) 需求矩阵Need。这也是一个n * m的矩阵，用以表示每一个进程尚需的各类资源数。如果Need[i,j]=K,则表示进程i还需要Rj类资源K个，方能完成任务。<br>      上述三个矩阵间存在下述关系：<br><strong>Need[i,j]=Max[i,j]-Allocation[i,j]</strong></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>第一部分：银行家算法模块<br>1．如果Request&lt;=Need,则转向2;否则,出错<br>2．如果Request&lt;=Available,则转向3,否则等待<br>3．系统试探分配请求的资源给进程<br>4．系统执行安全性算法    </p><p>第二部分:安全性算法模块</p><ol><li>设置两个向量<br>①　工作向量:Work=Available(表示系统可提供给进程继续运行所需要的各类资源数目)<br>②　Finish:表示系统是否有足够资源分配给进程(True:有;False:没有).初始化为False  </li><li>若Finish[i]=False&amp;&amp;Need&lt;=Work,则执行3;否则执行4(i为资源类别)</li><li>进程P获得第i类资源,则顺利执行直至完成，并释放资源: Work=Work+Allocation; Finish[i]=true;转2  </li><li>若所有进程的Finish[i]=true,则表示系统安全;否则,不安全! </li></ol><h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><p><strong>1.银行家算法</strong><br>  设Request i是进程Pi的申请向量，如果Request i[j]=K,则表示进程Pi需要K个Rj类型的资源。当Pi发出资源请求后，系统按下述步骤进行检查：<br>1) 如果Request i[j]&lt;=Need[i,j]，便转向步骤2）；否则认为出错，因为它所需要的资源数已经超过它所宣布的最大值。<br>2) 如果Request i[j]&lt;=Available[i,j]，便转向步骤3）；否则，表示尚无足够资源，Pi需等待。<br>3) 系统试探着把资源分配给进程Pi，并修改下面数据结构中的数值：<br>       Available[j]:=Available[j]-Request i[j];<br>       Allocation[i,j]:=Allocation[i,j]+Request i[j];<br>       Need[i,j]:=Need[i,j]-Request i[j];<br>4) 系统执行安全性算法，检查此次资源分配后系统是否处于安全状态。若安全，才正式将资源分配给进程Pi，以完成本次分配；否则，将本次的试探分配作废，恢复原来的资源分配状态，让进程Pi等待。</p><p><strong>2.安全性算法</strong><br>系统所执行的安全性算法可描述如下：<br>1) 设置两个向量<br>①　工作向量Work，它表示系统可提供给进程继续运行所需的各类资源数目，它含有m个元素，在执行安全算法开始时，Work：=Available。<br>②　Finish，它表示系统是否有足够的资源分配给进程，使之运行完成。开始时先做Finish[i]:=false;当有足够资源分配给进程时，再令Finish[i]:=ture.<br>2) 从进程集合中找到一个满足下述条件的进程：<br>①　Finish[i]=false;<br>②　Need[i,j]&lt;=Work[j];若找不到，执行步骤3），否则，执行步骤4）。<br>3） 当进程Pi获得资源后，可顺利执行，直至完成，并释放出分配给它的资源，故应执行：<br>     Work[j]:=Work[j]+Allocation[i,j];<br>     Finish[i]:=true;<br>     Go to step 2;<br>4) 如果所有进程的Finish[i]=true都满足，则表示系统处于安全状态；否则，系统处于不安全状态。</p><p><strong>代码流程图：</strong><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="代码流程图"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Available[<span class="number">10</span>];<span class="comment">//可使用资源向量</span></span><br><span class="line"><span class="keyword">int</span> Max[<span class="number">10</span>][<span class="number">10</span>];<span class="comment">//最大需求矩阵</span></span><br><span class="line"><span class="keyword">int</span> Allocation[<span class="number">10</span>][<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">//分配矩阵</span></span><br><span class="line"><span class="keyword">int</span> Need[<span class="number">10</span>][<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//需求矩阵</span></span><br><span class="line"><span class="keyword">int</span> Work[<span class="number">10</span>];                   <span class="comment">//工作向量</span></span><br><span class="line"><span class="keyword">bool</span> Finish[<span class="number">10</span>];                 <span class="comment">//是否有足够的资源分配，状态标志</span></span><br><span class="line"><span class="keyword">int</span> Request[<span class="number">10</span>][<span class="number">10</span>];<span class="comment">//进程申请资源向量</span></span><br><span class="line"><span class="keyword">int</span> Pause[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">0</span> &#125;;<span class="comment">//各类资源总数</span></span><br><span class="line"><span class="keyword">int</span> List[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//系统资源种类数</span></span><br><span class="line"><span class="keyword">int</span> m;<span class="comment">//总的进程数</span></span><br><span class="line"><span class="keyword">int</span> a;<span class="comment">//当前申请的进程号</span></span><br><span class="line"><span class="keyword">int</span> l, e, z = <span class="number">0</span>;<span class="comment">//计数器</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>, c = <span class="number">0</span>, f = <span class="number">0</span>, g;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//显示菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*************************银行家算法**************************\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n\t1:初始化数据"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n  \t2:设置进程资源申请"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n  \t3:查看资源分配状态"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n  \t4:退出程序"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t 请输入你的选择: "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示资源分配状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainshow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"       最大需求量         已分配       尚需要量 \n进程"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"       最大需求           已分配       尚需要量 \n进程"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %d类"</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nP[%d]"</span>, i);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Max[i][j]);<span class="comment">//最大需求</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Allocation[i][j]);     <span class="comment">//分配</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Need[i][j]);<span class="comment">//需求</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n系统剩余资源量：   "</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   %d "</span>, Available[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//安全性检测</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">securitycheck</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"**************************安全性检测**************************\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"       工作向量尚需求量已分配工作向量+已分配Finish \n进程 "</span>);</span><br><span class="line"><span class="keyword">for</span> (c = <span class="number">1</span>; c &lt;= <span class="number">4</span>; c++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %d类"</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">Pause[j] = Available[j];  <span class="comment">//Pause[i]为防止在下面安全性检查时修改到Available[i]而定义的备份</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">Finish[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">b = <span class="number">0</span>;   <span class="comment">//计数器初始化</span></span><br><span class="line"><span class="keyword">if</span> (!Finish[i])&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)        <span class="comment">//资源种类数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Need[i][j] &lt;= Pause[j])     <span class="comment">//可使用资源向量备份，若3类资源均满足条件</span></span><br><span class="line">&#123;</span><br><span class="line">b = b + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b == n)</span><br><span class="line">&#123;</span><br><span class="line">Finish[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nP[%d] "</span>, i);        <span class="comment">//依次输出进程安全序列  </span></span><br><span class="line"><span class="keyword">for</span> (l = <span class="number">1</span>; l &lt;= n; l++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Pause[l]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Need[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Allocation[i][j]=Pause[j]-Need[i][j];</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Allocation[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Pause[j] + Allocation[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   true"</span>);</span><br><span class="line"><span class="keyword">for</span> (l = <span class="number">1</span>; l &lt;= n; l++)</span><br><span class="line">&#123;</span><br><span class="line">Pause[l] = Pause[l] + Allocation[i][l];   <span class="comment">//回收该进程资源</span></span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Finish[i] == <span class="literal">true</span>) f = f + <span class="number">1</span>;     <span class="comment">//统计Finish[i]＝＝true的个数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (f == m)     <span class="comment">//全为true</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"处于安全状态"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n系统剩余资源量：   "</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   %d "</span>, Available[i]);</span><br><span class="line">&#125;</span><br><span class="line">f = <span class="number">0</span>;<span class="comment">//将计数器f重新初始化，为下一次提出新的进程申请做准备</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"处于不安全状态"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">Available[i] = Available[i] + Request[a][i];</span><br><span class="line">Allocation[a][i] = Allocation[a][i] - Request[a][i];</span><br><span class="line">Need[a][i] = Need[a][i] + Request[a][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入系统的资源种类数："</span>);</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入%d类资源总数(以空格分隔)： "</span>, n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入进程总数："</span>);</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"进程P[%d]对这%d类资源的最大需求量(以空格分隔)： "</span>, i, n);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;Max[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"进程P[%d]对这%d类资源已分配数(以空格分隔)： "</span>, i, n);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;Allocation[i][j]);</span><br><span class="line">Need[i][j] = Max[i][j] - Allocation[i][j];     <span class="comment">//尚需资源数为   最大-已分配</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] -= Allocation[j][i];     <span class="comment">//各类资源总数-各进程分配的资源数 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">Available[i] = arr[i];</span><br><span class="line">securitycheck();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程申请资源</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainrequest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入申请资源的进程："</span>);</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入进程P[%d]对%d类资源的申请量："</span>, a, i);</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;Request[a][i]);</span><br><span class="line"><span class="keyword">if</span> (Request[a][i] &gt; Need[a][i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n出错！进程申请的资源数多于它自己申报的最大需求量\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Request[a][i] &gt; Available[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nP[%d]请求的资源数大于可用资源数，必须等待\n"</span>, a);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//以下是试探性分配</span></span><br><span class="line">Available[i] = Available[i] - Request[a][i];</span><br><span class="line">Allocation[a][i] = Allocation[a][i] + Request[a][i];</span><br><span class="line">Need[a][i] = Need[a][i] - Request[a][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ret = securitycheck();</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> key = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Need[a][j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">key++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (key == n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">Available[j] += Allocation[a][j];</span><br><span class="line">Allocation[a][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">menu();</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="keyword">switch</span> (key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">initialize();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">mainrequest();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">mainshow();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n\t\t谢谢使用 \n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t\tMade by 杨陈强!\n\n\n"</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><p>程序菜单界面：<br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%95%8C%E9%9D%A2.png" alt="银行家算法界面"></p><p>初始化数据：（模拟课本113例子）<br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="银行家数据初始化"></p><p>T0时刻的安全性：<br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6T0%E5%AE%89%E5%85%A8%E6%80%A7.png" alt="银行家T0时刻安全性"><br>由上图可知，存在安全序列{P2,P4,P1,P3,P5},（存在多种情况，此处只寻找到一种可行的情况）故系统处于安全状态。</p><p>P2请求资源：<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6P2%E8%AF%B7%E6%B1%82.png" alt="进程P2请求资源"><br>P2发出请求向量Request2（1，0，2），系统按银行家算法进行检查。然后再通过安全性算法检查此时系统是否处于安全状态。上图为安全状态！</p><p>银行家算法测试:<br>当进程1申请的资源大于系统剩余的资源时，提示进程必须等待！<br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95%E6%B5%8B%E8%AF%95.png" alt="银行家算法测试"></p><p>安全性算法测试：<br>当进程1申请的资源过多时，导致各进程处于请求与保持状态，提示系统处于不安全状态！并且此次资源申请无效<br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6%E5%AE%89%E5%85%A8%E6%80%A7%E6%B5%8B%E8%AF%95.png" alt="银行家安全性测试"></p><p>查看资源分配情况：（依然处于第一次P2请求资源结束的状态）<br>  <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6%E6%9F%A5%E7%9C%8B%E8%B5%84%E6%BA%90%E6%83%85%E5%86%B5.png" alt="查看当前资源情况"></p><p>通过这次课程设计，让我对银行家算法（避免死锁）有了更深入的理解，同时借鉴网上一些优秀的实现过程，自己理解并修改而记之！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1. 银行家算法的实现思想&lt;/strong&gt;&lt;br&gt;     允许进程动态地申请资源，系统在每次实施资源分配之前，先计算资源分配的安全性，若此次资源分配安全（即资源分配后，系统能按某种顺序来为每个进程分配其所需的资源，直至最大需求，使每个进程都可以顺利地完成），便将资源分配给进程，否则不分配资源，让进程等待。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 死锁的概念&lt;/strong&gt;&lt;br&gt;　　死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。
    
    </summary>
    
      <category term="学习笔记" scheme="http://mindyu.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="操作系统" scheme="http://mindyu.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="算法" scheme="http://mindyu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用Android Canvas绘制折线图</title>
    <link href="http://mindyu.com/2017/12/08/%E4%BD%BF%E7%94%A8Android-Canvas%E7%BB%98%E5%88%B6%E6%8A%98%E7%BA%BF%E5%9B%BE/"/>
    <id>http://mindyu.com/2017/12/08/使用Android-Canvas绘制折线图/</id>
    <published>2017-12-08T01:17:58.000Z</published>
    <updated>2018-02-25T14:06:45.147Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="优化画图方法"><a href="#优化画图方法" class="headerlink" title="优化画图方法"></a>优化画图方法</h2><p> 原先磁感应力检测仪项目的绘图方法一直是采用的Android AChartEngine方法，简单介绍一下AChartEngine，它是 Android 平台的图表开发库, 能绘制 折线图, 饼图, 气泡图, 柱状图, 散点图, 面积图等统计图表。网上有很多例子，推荐一个<a href="http://www.cnblogs.com/wangfeng520/p/5610540.html" target="_blank" rel="noopener">Android 图表绘制 achartengine 示例解析</a>。该方法优点：使用简单，只需要将数据传入到数据集，并设置相应渲染器的绘制颜色，线的粗细等等。缺点：当数据量较大时，在移动与缩放时会显得比较卡顿。<br> <a id="more"></a><br> 接下来就介绍一种新的绘制方法：<strong>Android Canvas方法</strong><br> 当我们在自定义 View的时候，我们经常需要绘制一些自己想要的效果。通过Canvas对象我们就可以绘制出我们自己想要的效果。比如折线图、平面图等等。<br>对于一些简单的原理操作网上有很多Demo，推荐一个我在简书上面看到的一篇<a href="http://www.jianshu.com/p/f69873371763" target="_blank" rel="noopener">Android Canvas 方法总结</a>，里面介绍了关于Canvas的平移、缩放、旋转，以及后面使用Canvas对象绘制直线、各种形状以及文字。通过图形的展示，我相信很快就可以看懂啦！</p><p>正式开始我做的内容： </p><ul><li>首先贴一张我们所需要最终达到的效果图<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E6%8A%98%E7%BA%BF%E5%9B%BE%E5%8F%8A%E6%9B%B2%E7%BA%BF%E5%9B%BE%E5%AE%8C%E6%95%B4%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C.png" width="50%" height="50%"></li></ul><p>1.<strong>坐标线的绘制：</strong><br>此时需要注意的是Canvas画布的坐标是以 <em>左上角为坐标原点的，水平向右为X轴的正方向，垂直向下为Y轴的正方向</em>，而为了美观以及需求，我们需要将<strong>坐标原点设置在左下角，同时Y轴的正方向为垂直向上</strong>。而达到最终效果。坐标原点设置在左下角可以通过简单的平移画布而实现坐标（0，0）位于View的左下角，但是方向岂不是还要通过翻转？ 这里其实并没有翻转这个方法，我指的其实就是通过坐标数据计算它对应的位置。画布的坐标原点并非你所显示的坐标原点。这样会使得画图麻烦很多。此时通过一个巧妙地方法，坐标数据的Y值我给它一个负号，那么如果是（2，5）和（3，7），而我实际将它们绘制在画布上的（2，-5）和（3，-7）；而-7比-5小，正好-7就在-5的上方，从而模拟出正方形为垂直向上。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制坐标线</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawAxis</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    canvasWidth -= <span class="number">140f</span>;        <span class="comment">//留有边距以显示坐标对应的值</span></span><br><span class="line">    canvasHeight -= <span class="number">140f</span>;</span><br><span class="line">    canvas.translate(<span class="number">110f</span>, canvasHeight + <span class="number">40f</span>);     <span class="comment">// 使画布向 x 轴正向移动 110f，向 y 轴移动 40f</span></span><br><span class="line">    canvas.drawLine(<span class="number">0</span>, <span class="number">0</span>, canvasWidth, <span class="number">0</span>, paint);   <span class="comment">// 绘制 x 轴</span></span><br><span class="line">    canvas.drawLine(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,-canvasHeight, paint);  <span class="comment">// 绘制 y 轴</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.<strong>坐标刻度的绘制</strong><br>坐标主要需要完成动态的适配，当平移和缩放的时候坐标动态显示，并且完成它们之间的间距控制，所显示的画布上坐标轴上只显示2-6个坐标，避免坐标刻度太密而使得刻度值挤在一块无法显示。实现思路是：<br>a.通过<code>float interval = measureInterval(xDistance/xScale);        //每组值得间隔</code>计算当前显示区域的相邻坐标的间距。<br>b.通过<code>int n = (int) Math.ceil((xDistance/xScale)/interval);      //一组有几个值</code>计算当前显示区域的坐标数量也就对于上述的（2-6）<br>c.通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> first = (<span class="keyword">int</span>) Math.floor((xStart-((<span class="number">1</span>-xScale)/<span class="number">2</span>+xTranslate/canvasWidth)*xDistance/xScale)/interval);</span><br></pre></td></tr></table></figure></p><p>计算出所显示的首坐标的位置。<br>d.循环n次，依次显示n个从first+i开始的坐标刻度值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所需要的坐标属性：</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">float</span> xDistance;              <span class="comment">// x 方向总距离</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">float</span> yDistance;              <span class="comment">// y 方向总距离</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">float</span> xStart=<span class="number">0</span>, yStart=<span class="number">0</span>;     <span class="comment">// 起始点坐标</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">float</span> xTranslate = <span class="number">0</span>, yTranslate = <span class="number">0</span>;   <span class="comment">// 分别控制 x 和 y 方向的平移距离，单位为屏幕像素，达到手指移动多少，坐标平移多少</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">float</span> xScale = <span class="number">1</span>, yScale = <span class="number">1</span>;           <span class="comment">// 分别控制 x 和 y 方向的缩放程度</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//绘制坐标值及刻度</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCoordinates</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        String number;</span><br><span class="line">        DecimalFormat df1 = <span class="keyword">new</span> DecimalFormat(<span class="string">"0.0"</span>);</span><br><span class="line">        DecimalFormat df2 = <span class="keyword">new</span> DecimalFormat(<span class="string">"0.00"</span>);</span><br><span class="line">        DecimalFormat df3 = <span class="keyword">new</span> DecimalFormat(<span class="string">"0.000"</span>);</span><br><span class="line">        <span class="comment">// 绘制 x 轴坐标</span></span><br><span class="line">        canvas.save();  <span class="comment">// 保存画布状态</span></span><br><span class="line">        canvas.clipRect(<span class="number">0</span>, <span class="number">0</span>, canvasWidth, <span class="number">60f</span>);                   <span class="comment">// 切割画布，使坐标显示在一定范围内</span></span><br><span class="line">        canvas.translate((<span class="number">1</span> - xScale) / <span class="number">2</span> * canvasWidth, <span class="number">0</span>);       <span class="comment">// 缩放时，平移使得与折线图一致</span></span><br><span class="line">        canvas.translate(xTranslate, <span class="number">0</span>);                           <span class="comment">// 使坐标跟着图形一起平移</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> interval = measureInterval(xDistance/xScale);        <span class="comment">//每组值得间隔</span></span><br><span class="line">        <span class="keyword">int</span> n = (<span class="keyword">int</span>) Math.ceil((xDistance/xScale)/interval);      <span class="comment">//一组有几个值</span></span><br><span class="line">        <span class="keyword">int</span> first = (<span class="keyword">int</span>) Math.floor((xStart-((<span class="number">1</span>-xScale)/<span class="number">2</span>+xTranslate/canvasWidth)*xDistance/xScale)/interval);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (interval &lt; <span class="number">0.01</span>)&#123;</span><br><span class="line">                number = df3.format((first+i)*interval);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (interval &lt;= <span class="number">0.1</span>)&#123;</span><br><span class="line">                number = df2.format((first+i)*interval);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (interval &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                number = df1.format((first+i)*interval);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                number = String.valueOf((first+i)*(<span class="keyword">int</span>)interval);</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.drawLine((canvasWidth * (first+i) * interval / xDistance * xScale), <span class="number">0f</span>,</span><br><span class="line">                    (canvasWidth * (first+i) * interval / xDistance * xScale), <span class="number">10f</span>,paint);</span><br><span class="line">            canvas.drawText(</span><br><span class="line">                    number,</span><br><span class="line">                    (canvasWidth * (first+i) * interval / xDistance * xScale),</span><br><span class="line">                    <span class="number">40f</span>,</span><br><span class="line">                    paint);</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.restore();   <span class="comment">// 使画布返回上一个状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制 y 轴坐标</span></span><br><span class="line">        canvas.save();  <span class="comment">// 保存画布状态</span></span><br><span class="line">        canvas.clipRect(-<span class="number">110f</span>, -canvasHeight, <span class="number">0</span>, <span class="number">0</span>);                        <span class="comment">// 切割画布，使坐标显示在一定范围内</span></span><br><span class="line">        canvas.translate(<span class="number">0</span>, -(<span class="number">1</span> - yScale) / <span class="number">2</span> * canvasHeight);              <span class="comment">// 缩放时平移使得与折线图一致</span></span><br><span class="line">        canvas.translate(<span class="number">0</span>, (yTranslate/yScale-yStart/yDistance*canvasHeight)*yScale);      <span class="comment">// 使坐标跟着图形一起平移</span></span><br><span class="line">        interval = measureInterval(yDistance/yScale);                       <span class="comment">//每组值得间隔</span></span><br><span class="line"><span class="comment">//        Log.d("Chart","interval="+interval);</span></span><br><span class="line">        n = (<span class="keyword">int</span>) Math.ceil((yDistance/yScale)/interval);                   <span class="comment">//一组有几个值</span></span><br><span class="line"><span class="comment">//        Log.d("Chart","n="+n);</span></span><br><span class="line">        first = -(<span class="keyword">int</span>) Math.floor((yStart+yDistance/yScale/<span class="number">2</span>*(<span class="number">1</span>-yScale)-yTranslate/yScale/canvasHeight*yDistance)/interval);</span><br><span class="line"><span class="comment">//        Log.d("Chart","first="+first);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (interval &lt; <span class="number">0.01</span>)&#123;</span><br><span class="line">                number = df3.format((first+i)*interval);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (interval &lt;= <span class="number">0.1</span>)&#123;</span><br><span class="line">                number = df2.format((first+i)*interval);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (interval &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                number = df1.format((first+i)*interval);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                number = String.valueOf((first+i)*(<span class="keyword">int</span>)interval);</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.drawLine(-<span class="number">10f</span>, -(canvasHeight * (first+i) * interval / yDistance * yScale),</span><br><span class="line">                    <span class="number">0f</span>, -(canvasHeight * (first+i) * interval / yDistance * yScale),paint);</span><br><span class="line">            canvas.drawText(</span><br><span class="line">                    number,</span><br><span class="line">                    -<span class="number">5f</span>,</span><br><span class="line">                    -(canvasHeight * (first+i) * interval / yDistance * yScale)-<span class="number">4</span>,</span><br><span class="line">                    paint);</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.restore();   <span class="comment">// 使画布返回上一个状态</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以下为坐标完成动态适配的效果图：<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E5%9D%90%E6%A0%87%E5%8A%A8%E6%80%81%E9%80%82%E9%85%8D%E6%95%88%E6%9E%9C.png" width="50%" height="50%"></p><p>3.<strong>折线与图形的绘制</strong><br>由于需要绘制两种不同的图形，去噪图（折线图）和扫描图（平面图），此处将画图方法抽象出来：子类通过重写drawAction方法来完成各自所需绘制的图形。同时后期如果需要绘制其他类型的图，继承此抽象类然后重写自己的drawAction方法即可实现不同类型的图形绘制。<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/ChartService%E6%8A%BD%E8%B1%A1%E7%B1%BB.jpg" alt="AbstractChartService画图抽象类"><br>以下为折线图的drawAction方法：<br>根据平移与缩放值，将画布进行相应的平移与缩放，同时设置图形的缩放中心，以所显示图形的中心点为缩放中心。然后设置画笔样式及颜色，通过所获取的xList与yList值连接相邻点达到绘制折线的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制曲线</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawAction</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 裁切矩形，把画面控制在坐标平面内</span></span><br><span class="line">        canvas.clipRect(<span class="number">0</span>, <span class="number">0</span>, canvasWidth, -canvasHeight);</span><br><span class="line">        <span class="comment">// 手势缩放移动</span></span><br><span class="line">        canvas.translate(xTranslate/xScale, yTranslate/yScale-yStart/yDistance*canvasHeight);</span><br><span class="line">        <span class="keyword">float</span> px = (canvasWidth / <span class="number">2</span> - xTranslate/xScale);</span><br><span class="line">        <span class="keyword">float</span> py = (canvasHeight / <span class="number">2</span> + yTranslate/yScale-yStart/yDistance*canvasHeight);</span><br><span class="line">        canvas.scale(xScale, yScale, px, -py);               <span class="comment">//以图的中心点缩放</span></span><br><span class="line"></span><br><span class="line">        paint.setDither(<span class="keyword">true</span>);                           <span class="comment">//设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满，图像更加清晰</span></span><br><span class="line">        paint.setFilterBitmap(<span class="keyword">true</span>);                     <span class="comment">//如果该项设置为true，则图像在动画进行中会滤掉对Bitmap图像的优化操作，加快显示速度，本设置项依赖于dither和xfermode的设置</span></span><br><span class="line">        paint.setStyle(Paint.Style.FILL_AND_STROKE);     <span class="comment">//设置画笔的样式，Style.FILL: 实心   STROKE:空心   FILL_OR_STROKE:同时实心与空心</span></span><br><span class="line">        paint.setStrokeJoin(Paint.Join.ROUND);           <span class="comment">//设置绘制时各图形的结合方式，如平滑效果等  BEVEL斜角</span></span><br><span class="line">        <span class="comment">//paint.setStrokeWidth(4/xScale);                  //当画笔样式为STROKE或FILL_OR_STROKE时，设置笔刷的粗细度</span></span><br><span class="line">        <span class="keyword">int</span>[] colors = GlobalParameter.getInstance().getColors();</span><br><span class="line">        <span class="comment">// 绘制图形</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;showIDs.size(); i++) &#123;           <span class="comment">//通道数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt; yList.get(showIDs.get(i)).size()-<span class="number">1</span>; j++) &#123;</span><br><span class="line">                paint.setColor(colors[showIDs.get(i)]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((yList.get(showIDs.get(i)).get(j+<span class="number">1</span>)-yList.get(showIDs.get(i)).get(j))&lt;<span class="number">15</span>&amp;&amp;(yList.get(showIDs.get(i)).get(j+<span class="number">1</span>)-yList.get(showIDs.get(i)).get(j))&gt;-<span class="number">15</span>)&#123;</span><br><span class="line">                    paint.setStrokeWidth(<span class="number">3</span>/yScale);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    paint.setStrokeWidth(<span class="number">3</span>/xScale);</span><br><span class="line">                &#125;</span><br><span class="line">                canvas.drawLine(        <span class="comment">//xDistance x方向的总距离</span></span><br><span class="line">                        xList.get(j) / xDistance * canvasWidth,</span><br><span class="line">                        -yList.get(showIDs.get(i)).get(j) / yDistance * canvasHeight,</span><br><span class="line">                        xList.get(j+<span class="number">1</span>) / xDistance * canvasWidth,</span><br><span class="line">                        -yList.get(showIDs.get(i)).get(j+<span class="number">1</span>) / yDistance * canvasHeight,</span><br><span class="line">                        paint</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (points!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            paint.setColor(Color.RED);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;points.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                canvas.drawLine(        <span class="comment">//xDistance x方向的总距离</span></span><br><span class="line">                        points.get(i).getX() / xDistance * canvasWidth,</span><br><span class="line">                        -points.get(i).getY() / yDistance * canvasHeight,</span><br><span class="line">                        points.get(i+<span class="number">1</span>).getX() / xDistance * canvasWidth,</span><br><span class="line">                        -points.get(i+<span class="number">1</span>).getY() / yDistance * canvasHeight,</span><br><span class="line">                        paint</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        initPaints();   <span class="comment">//画笔reset</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以下为PopWindow弹出框中横屏显示折线图的效果：<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E5%A4%A7%E5%9B%BE%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C.png" width="50%" height="50%"></p><p>4.<strong>Touch手势事件的监听</strong><br>Android Canvas 没有提供有关手势缩放的功能，但我们可以利用onTouchListener 来监测手势，并根据手势的不同对扫描图作不同处理，比如移动和缩放。采用接口回调机制，在所需用到AbstractChartService对象处，进行手势监控，减少抽象类间的耦合性。</p><p>通过设置OnTouchListener监听，只要有手指触碰到绘制的图形，就会触发 onTouch 方法，同时通过判断event.getAction() 获取到手势的不同动作，来完成你所重写的响应事件。重写onTouch方法，通过 event.getAction() 获取到的值，自动判断执行哪一个 case 中的代码，即通过监测不同的动作来对图形作出相应处理。我们的处理主要就是移动和缩放，通过event.getX、event.getY方法所获取的手势点击的屏幕坐标，计算图形的平移及缩放值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置折线图的触摸事件，使扫描图保持同步平移和缩放</span></span><br><span class="line">      chartView.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View view, MotionEvent event)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">                  <span class="comment">// 一根手指按下时</span></span><br><span class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                      <span class="keyword">if</span> (!mPopupWindow.isShowing()) &#123;      <span class="comment">//大图未显示时</span></span><br><span class="line">                          <span class="comment">// 双击扫描图跳转到大图</span></span><br><span class="line">                          <span class="keyword">if</span> (event.getEventTime() - chartView.getUpTime() &lt; <span class="number">200</span>) &#123;</span><br><span class="line">                              addToBigchartLayout(chartView);</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                      chartView.setxDown(event.getX());</span><br><span class="line">                      chartView.setyDown(event.getY());</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  <span class="comment">// 手指抬起时</span></span><br><span class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                      chartView.setUpTime(event.getEventTime());</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  <span class="comment">// 手指移动时</span></span><br><span class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                      <span class="comment">// 只有一根手指移动时</span></span><br><span class="line">                      <span class="keyword">if</span> (event.getPointerCount() == <span class="number">1</span> &amp;&amp; event.getAction() != <span class="number">261</span></span><br><span class="line">                              &amp;&amp; chartView.getxDown() != <span class="number">0</span> &amp;&amp; chartView.getyDown() != <span class="number">0</span> ) &#123;</span><br><span class="line">                          <span class="comment">// 实现图形平移</span></span><br><span class="line">                          chartView.setxTranslate(chartView.getxTranslate()+(event.getX() - chartView.getxDown()) );</span><br><span class="line">                          chartView.setyTranslate(chartView.getyTranslate()+(event.getY() - chartView.getyDown()) );</span><br><span class="line">                          chartView.setxDown(event.getX());</span><br><span class="line">                          chartView.setyDown(event.getY());</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="comment">// 有两根手指移动时</span></span><br><span class="line">                      <span class="keyword">else</span> <span class="keyword">if</span> (event.getPointerCount() == <span class="number">2</span>) &#123;</span><br><span class="line">                          <span class="comment">// 实现扫描图缩放</span></span><br><span class="line">                          <span class="keyword">double</span> xLenMove = Math.abs(event.getX(<span class="number">0</span>) - event.getX(<span class="number">1</span>));</span><br><span class="line">                          <span class="keyword">double</span> yLenMove = Math.abs(event.getY(<span class="number">0</span>) - event.getY(<span class="number">1</span>));</span><br><span class="line">                          <span class="keyword">double</span> lenMove = Math.sqrt(xLenMove * xLenMove + yLenMove * yLenMove);</span><br><span class="line">                          <span class="comment">// 动态更新</span></span><br><span class="line">                          <span class="comment">// 设置最小缩放比例为 0.4</span></span><br><span class="line">                          <span class="keyword">if</span> (chartView.getxScale() + (lenMove / chartView.getLenDown() - <span class="number">1</span>) &gt; <span class="number">0.4</span>) &#123;</span><br><span class="line">                              chartView.setxScale((<span class="keyword">float</span>) (chartView.getxScale() + (lenMove / chartView.getLenDown()  - <span class="number">1</span>)));</span><br><span class="line">                              chartView.setyScale((<span class="keyword">float</span>) (chartView.getyScale() + (lenMove / chartView.getLenDown()  - <span class="number">1</span>)));</span><br><span class="line">                              chartView.setLenDown(lenMove);</span><br><span class="line">                          &#125;</span><br><span class="line">                          chartView.setxDown(<span class="number">0</span>);</span><br><span class="line">                          chartView.setyDown(<span class="number">0</span>);</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  <span class="comment">// 有两根手指按下时</span></span><br><span class="line">                  <span class="keyword">case</span> <span class="number">261</span>:</span><br><span class="line">                      <span class="keyword">double</span> xLenDown = Math.abs(event.getX(<span class="number">0</span>) - event.getX(<span class="number">1</span>));</span><br><span class="line">                      <span class="keyword">double</span> yLenDown = Math.abs(event.getY(<span class="number">0</span>) - event.getY(<span class="number">1</span>));</span><br><span class="line">                      chartView.setLenDown(Math.sqrt(xLenDown * xLenDown + yLenDown * yLenDown));</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  <span class="comment">// 两根手指中的一根抬起时</span></span><br><span class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP:</span><br><span class="line">                      chartView.setxDown(<span class="number">0</span>);</span><br><span class="line">                      chartView.setyDown(<span class="number">0</span>);</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  <span class="keyword">default</span>:</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              chartView.postInvalidate();   <span class="comment">//手势完成时重绘</span></span><br><span class="line">              scanView.setxTranslate(chartView.getxTranslate());</span><br><span class="line">              scanView.setxScale(chartView.getxScale());</span><br><span class="line">              scanView.postInvalidate();</span><br><span class="line">              <span class="comment">// 只有当返回 false 时才会开启手势检测效果，否则折线图将无法移动和缩放</span></span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><p>最后通过计算的平移值以及缩放值，重绘图形。</p><ul><li>完成以上步骤就可以在其它Activity中使用自己封装的对象来完成各种不同图形的绘制。如下是适配设备校准的绘图方法：<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%80%82%E9%85%8D%E8%AE%BE%E5%A4%87%E6%A0%A1%E5%87%86%E7%9A%84%E7%BB%98%E5%88%B6%E6%96%B9%E6%B3%95.png" width="50%" height="50%"></li></ul><p>项目源码可见我的Github仓库<a href="https://github.com/Mindyu/LCJCSystem" target="_blank" rel="noopener">漏磁检测系统</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;优化画图方法&quot;&gt;&lt;a href=&quot;#优化画图方法&quot; class=&quot;headerlink&quot; title=&quot;优化画图方法&quot;&gt;&lt;/a&gt;优化画图方法&lt;/h2&gt;&lt;p&gt; 原先磁感应力检测仪项目的绘图方法一直是采用的Android AChartEngine方法，简单介绍一下AChartEngine，它是 Android 平台的图表开发库, 能绘制 折线图, 饼图, 气泡图, 柱状图, 散点图, 面积图等统计图表。网上有很多例子，推荐一个&lt;a href=&quot;http://www.cnblogs.com/wangfeng520/p/5610540.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android 图表绘制 achartengine 示例解析&lt;/a&gt;。该方法优点：使用简单，只需要将数据传入到数据集，并设置相应渲染器的绘制颜色，线的粗细等等。缺点：当数据量较大时，在移动与缩放时会显得比较卡顿。&lt;br&gt;
    
    </summary>
    
      <category term="安卓学习" scheme="http://mindyu.com/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="安卓" scheme="http://mindyu.com/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="漏磁检测" scheme="http://mindyu.com/tags/%E6%BC%8F%E7%A3%81%E6%A3%80%E6%B5%8B/"/>
    
      <category term="Andriod" scheme="http://mindyu.com/tags/Andriod/"/>
    
  </entry>
  
  <entry>
    <title>校准数据处理篇-漏磁检测</title>
    <link href="http://mindyu.com/2017/12/04/%E6%A0%A1%E5%87%86%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AF%87-%E6%BC%8F%E7%A3%81%E6%A3%80%E6%B5%8B/"/>
    <id>http://mindyu.com/2017/12/04/校准数据处理篇-漏磁检测/</id>
    <published>2017-12-04T00:55:45.000Z</published>
    <updated>2018-02-25T14:06:45.153Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="优化校准数据处理"><a href="#优化校准数据处理" class="headerlink" title="优化校准数据处理"></a>优化校准数据处理</h2><p><strong>问题描述：</strong></p><p>校准模块通过正反方向两次校准。每次进行数据处理获取到该次校准四个梯度(20%、40%、60%、80%)的去噪值以及对应步长（X坐标），以便后续的曲线拟合。<br><a id="more"></a></p><hr><p><strong>处理方法1：</strong>（维护极大值间的顺序关系）</p><ol><li>所有极大值按Y值（去噪值）排序。</li><li>根据最大的两个极大值点，计算x坐标满足的关系（x坐标递增或者递减），通过改关系以剔除错误数据。</li><li>选择最大的四个极大值</li></ol><p>该方法的处理效果：<br>    去噪值排序后，X轴也满足递增或者递减的顺序。可以排除当20%的缺陷去噪值小于其他区间的误差值。如下图：<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E6%95%B0%E6%8D%AE%E6%A0%A1%E5%87%86.png" alt="数据校准bug图"></p><p><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E6%A0%A1%E5%87%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E5%A4%84%E7%90%86%E6%95%88%E6%9E%9C.jpg" alt="数据校准可处理区域"><br>上图阴影部分为可去噪的效果。在阴影部分出现的缺陷值都可以过滤掉。<br>    缺点：当某些地方误差值过大时，可能掩盖真实缺陷比处的值。（A、C为真实缺陷百分比对应的值，而B点为错误值。因为B&gt;C而过滤掉C点）<br>    <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E6%95%B0%E6%8D%AE%E6%A0%A1%E5%87%86%E9%97%AE%E9%A2%98.jpg" alt="数据校准存在的问题"></p><p><strong>处理方法2：</strong>（改进方法，x坐标之间间隔控制，同时维护间距）</p><ol><li>所有极大值按Y值（去噪值）排序。</li><li>首先获取数据最大为80%缺陷对对应的去噪值，以此寻找第二个值，通过这两个值计算步数间隔。</li><li>继续计算下一个点的位置，在第二个点的基础上增加间隔internal，从该X坐标左右寻找存在的去噪值。</li><li>更新间隔internal,按此方法计算第四个满足条件的值。</li><li>若无满足的条件，依次选取第二大的去噪值为80%对应的缺陷值。重复2-4步骤。</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">import com.tomatoLCJC.tools.Parameter.SystemParameter;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YCQ on 2017/10/10.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">public class InstrumentCalibration &#123;</span><br><span class="line"></span><br><span class="line">    private static double range = 0.1;     //左右寻找10%的区域  通过修改这个确定精确度</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*******************************************************************************************</span></span><br><span class="line"><span class="comment">     * 函数名称：getMaximumValue</span></span><br><span class="line"><span class="comment">     * 函数介绍：获取曲线的极大值, 原理是:已知输入曲线有4个峰,该算法的思想就是求出这每个峰的起始x坐标和结束x坐标（即求出峰所在的区间）</span></span><br><span class="line"><span class="comment">     然后在该区间中搜最大值从而求出极大值。</span></span><br><span class="line"><span class="comment">     * 输入参数：order 表示第几次获取极大值</span></span><br><span class="line"><span class="comment">     * 输出参数：无</span></span><br><span class="line"><span class="comment">     * 返回值  ：无</span></span><br><span class="line"><span class="comment">     ********************************************************************************************/</span></span><br><span class="line">    public static List&lt;Point&gt; getMaximumValue(List&lt;Double&gt; yValue)          <span class="comment">//获取极大值</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;Point&gt; maxValue=new ArrayList&lt;&gt;();</span><br><span class="line">    double key = 10;           //设置标记值为10（即认为从某个大于60的点开始到某个小于60的点结束为峰的区间）也可以为其他值，根据需要来定</span><br><span class="line">        int end = yValue.size();</span><br><span class="line">        List&lt;Integer&gt; xValue=new ArrayList&lt;&gt;();        //记录所有峰的起始坐标和结束坐标（就是记录所有峰的区间）</span><br><span class="line">        int flag = 0;                 //信号量   因为算法要求记录峰值的起始和结束坐标，当某一点大于标记值key以后因为峰的单调递增性会有很多点也大于可以</span><br><span class="line">        <span class="comment">//所以用flag标记当获取了第一个大于标记值key以后让程序不再记录x坐标直到条件再次满足</span></span><br><span class="line">        for (int i = 0; i &lt; end; ++i)     //这是搜索峰的区间部分</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; yValue.get(i) &amp;&amp; <span class="number">0</span> == flag)</span><br><span class="line">            &#123;</span><br><span class="line">                xValue.add(i);</span><br><span class="line">                flag = 1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (key &gt; yValue.get(i) &amp;&amp; <span class="number">1</span> == flag)</span><br><span class="line">            &#123;</span><br><span class="line">                xValue.add(i);</span><br><span class="line">                flag = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xValue.add(end - 1);</span><br><span class="line">        int length = xValue.size();</span><br><span class="line">        for (int i = 0; i &lt; length / 2; ++i)      //根据区间搜索极大值</span><br><span class="line">        &#123;</span><br><span class="line">            double temp = yValue.get(xValue.get(2*i));</span><br><span class="line">            int k = xValue.get(2*i) + 1;</span><br><span class="line">            for (int j = k; j &lt; xValue.get(2*i+1); ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp &lt; yValue.get(j))</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = yValue.get(j);</span><br><span class="line">                    k = j;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            maxValue.add(new Point(k,Float.valueOf(String.valueOf(temp))));</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(maxValue);          //根据Y值 从大到小排序</span><br><span class="line">        <span class="keyword">if</span> (maxValue.size()&lt;<span class="number">4</span>) &#123;</span><br><span class="line">            return maxValue;    //极大值个数小于4，在后续过程会滤掉该情况，直接返回</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//            return adjustOrder(maxValue);  //第一种校准方法</span></span><br><span class="line">            return adjustOrder2(maxValue);  //第二种校准方法</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一种调整方法，根据递增和递减顺序</span></span><br><span class="line">    public static List&lt;Point&gt; adjustOrder(List&lt;Point&gt; value )&#123;</span><br><span class="line">        List&lt;Point&gt; resValue=new ArrayList&lt;&gt;();</span><br><span class="line">        resValue.add(value.get(0));             //滤掉可能出现的错误</span><br><span class="line">        double flag_x = value.get(0).getX();</span><br><span class="line">        int flag_pOm = value.get(1).getX()-value.get(0).getX() &gt; 0 ? 1:-1;    //设置正序标记</span><br><span class="line">        <span class="comment">//剔除x非正序的Point</span></span><br><span class="line">        for (int i=1;i&lt;value.size();i++)&#123;</span><br><span class="line">            if ((value.get(i).getX()-flag_x &gt; 0 ? 1:-1)==flag_pOm)&#123;</span><br><span class="line">                resValue.add(value.get(i));</span><br><span class="line">                flag_x = value.get(i).getX();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        resValue = new ArrayList&lt;&gt;(resValue.subList(0 , Math.min(4,resValue.size()))); //size&gt;4时仅获取前四个值，</span><br><span class="line">        return resValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种调整方法，根据递增和递减顺序</span></span><br><span class="line">    public static List&lt;Point&gt; adjustOrder2(List&lt;Point&gt; value )&#123;     <span class="comment">//x为步数，y为去噪值</span></span><br><span class="line">        Map&lt;Integer,Float&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        for (int i= 0;i&lt;value.size();i++)&#123;</span><br><span class="line">            map.put((int) value.get(i).getX(), value.get(i).getY());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Point&gt; resValue=new ArrayList&lt;&gt;();</span><br><span class="line">        for(int i=0;i&lt;4;i++)    resValue.add(new Point(0.0f, 0.0f));  //初始化4个point</span><br><span class="line">        int interval; //间隔</span><br><span class="line">        for (int i=0 ; i&lt;value.size()-4 ; i++)&#123;</span><br><span class="line">            resValue.set(0,value.get(i));       //循环以此向后寻找一个最优的缺陷  80%</span><br><span class="line">            for(int j=i+1;j&lt;value.size()-3; j++)&#123;</span><br><span class="line">                resValue.set(1,value.get(j));           //60%</span><br><span class="line">                interval = (int) (resValue.get(1).getX()-resValue.get(0).getX());    //80与60之间的间距（步数）</span><br><span class="line">                for (int k=0;k&lt;Math.abs((int)(interval*range));k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (map.containsKey((int)(resValue.get(<span class="number">1</span>).getX()+interval+k)) &amp;&amp; map.get((int)(resValue.get(<span class="number">1</span>).getX()+interval+k)) &lt; resValue.get(<span class="number">1</span>).getY())&#123;</span><br><span class="line">                        resValue.set(2,new Point((resValue.get(1).getX()+interval+k), map.get((int)(resValue.get(1).getX()+interval+k))));</span><br><span class="line">                        int interval1= (((int) (resValue.get(2).getX()-resValue.get(1).getX()))+interval)/2;</span><br><span class="line">                        for (int m=0;m&lt;Math.abs((int)(interval1*range));m++)&#123;</span><br><span class="line">                            <span class="keyword">if</span> (map.containsKey((int)(resValue.get(<span class="number">2</span>).getX()+interval1+m)) &amp;&amp; map.get((int)(resValue.get(<span class="number">2</span>).getX()+interval1+m)) &lt; resValue.get(<span class="number">2</span>).getY())&#123;</span><br><span class="line">                                resValue.set(3,new Point((resValue.get(2).getX()+interval1+m), map.get((int)(resValue.get(2).getX()+interval1+m))));</span><br><span class="line">                                return resValue;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (map.containsKey((int)(resValue.get(<span class="number">2</span>).getX()+interval1-m)) &amp;&amp; map.get((int)(resValue.get(<span class="number">2</span>).getX()+interval1-m)) &lt; resValue.get(<span class="number">2</span>).getY())&#123;</span><br><span class="line">                                resValue.set(3,new Point((resValue.get(2).getX()+interval1-m), map.get((int)(resValue.get(2).getX()+interval1-m))));</span><br><span class="line">                                return resValue;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (map.containsKey((int)(resValue.get(<span class="number">1</span>).getX()+interval-k)) &amp;&amp; map.get((int)(resValue.get(<span class="number">1</span>).getX()+interval-k)) &lt; resValue.get(<span class="number">1</span>).getY() )&#123;</span><br><span class="line">                        resValue.set(2,new Point((resValue.get(1).getX()+interval-k), map.get((int)(resValue.get(1).getX()+interval-k))));</span><br><span class="line">                        int interval1= (((int) (resValue.get(2).getX()-resValue.get(1).getX()))+interval)/2;</span><br><span class="line">                        for (int m=0;m&lt;Math.abs((int)(interval1*range));m++)&#123;</span><br><span class="line">                            <span class="keyword">if</span> (map.containsKey((int)(resValue.get(<span class="number">2</span>).getX()+interval1+m)) &amp;&amp; map.get((int)(resValue.get(<span class="number">2</span>).getX()+interval1+m)) &lt; resValue.get(<span class="number">2</span>).getY())&#123;</span><br><span class="line">                                resValue.set(3,new Point((resValue.get(2).getX()+interval1+m), map.get((int)(resValue.get(2).getX()+interval1+m))));</span><br><span class="line">                                return resValue;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (map.containsKey((int)(resValue.get(<span class="number">2</span>).getX()+interval1-m)) &amp;&amp; map.get((int)(resValue.get(<span class="number">2</span>).getX()+interval1-m)) &lt; resValue.get(<span class="number">2</span>).getY())&#123;</span><br><span class="line">                                resValue.set(3,new Point((resValue.get(2).getX()+interval1-m), map.get((int)(resValue.get(2).getX()+interval1-m))));</span><br><span class="line">                                return resValue;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return new ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list逆序</span></span><br><span class="line">    public static List&lt;Point&gt; invertedOrder(List&lt;Point&gt; value )&#123;</span><br><span class="line">        List&lt;Point&gt; resValue = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i=1;i &lt;= value.size();i++)&#123;       //从小到大排列，逆序填充</span><br><span class="line">            resValue.add(new Point( value.get(value.size()-i).getX()*(float) SystemParameter.getInstance().disSensorStepLen/1000 , value.get(value.size()-i).getY() ));</span><br><span class="line">        &#125;</span><br><span class="line">        return resValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;优化校准数据处理&quot;&gt;&lt;a href=&quot;#优化校准数据处理&quot; class=&quot;headerlink&quot; title=&quot;优化校准数据处理&quot;&gt;&lt;/a&gt;优化校准数据处理&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;校准模块通过正反方向两次校准。每次进行数据处理获取到该次校准四个梯度(20%、40%、60%、80%)的去噪值以及对应步长（X坐标），以便后续的曲线拟合。&lt;br&gt;
    
    </summary>
    
      <category term="安卓学习" scheme="http://mindyu.com/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="安卓" scheme="http://mindyu.com/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="漏磁检测" scheme="http://mindyu.com/tags/%E6%BC%8F%E7%A3%81%E6%A3%80%E6%B5%8B/"/>
    
      <category term="Andriod" scheme="http://mindyu.com/tags/Andriod/"/>
    
  </entry>
  
  <entry>
    <title>Python入门（1）</title>
    <link href="http://mindyu.com/2017/11/07/Python%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89/"/>
    <id>http://mindyu.com/2017/11/07/Python入门（1）/</id>
    <published>2017-11-07T12:48:50.000Z</published>
    <updated>2018-02-25T14:06:45.146Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="自学廖雪峰教程代码笔记"><a href="#自学廖雪峰教程代码笔记" class="headerlink" title="自学廖雪峰教程代码笔记"></a>自学<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖雪峰教程</a>代码笔记</h3><p>通过自己在廖雪峰Python教程的学习，自己也尝试实现里面的一些基本语法，加强自己的理解，是学习一门语言最重要的部分！<br>Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。<br><a id="more"></a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">L = [</span><br><span class="line">    [<span class="string">'Apple'</span>, <span class="string">'Google'</span>, <span class="string">'Microsoft'</span>],</span><br><span class="line">    [<span class="string">'Java'</span>, <span class="string">'Python'</span>, <span class="string">'Ruby'</span>, <span class="string">'PHP'</span>],</span><br><span class="line">    [<span class="string">'Adam'</span>, <span class="string">'Bart'</span>, <span class="string">'Lisa'</span>]</span><br><span class="line">]</span><br><span class="line"># 打印Apple:</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(L[<span class="number">0</span>][<span class="number">0</span>])</span></span></span><br><span class="line"># 打印Python:</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(L[<span class="number">1</span>][<span class="number">1</span>])</span></span></span><br><span class="line"># 打印Lisa:</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(L[<span class="number">2</span>][<span class="number">2</span>])</span></span></span><br><span class="line">print('')  # python每次输出默认为一行，print('') 相当于换行</span><br><span class="line"></span><br><span class="line"># 条件判断</span><br><span class="line"><span class="attribute">height</span> = <span class="number">1.75</span></span><br><span class="line">weight = <span class="number">80.5</span></span><br><span class="line"></span><br><span class="line">bmi = weight / (<span class="attribute">height</span> * height)</span><br><span class="line"><span class="keyword">if</span> bmi &lt; <span class="number">18.5</span>:</span><br><span class="line">    print(<span class="string">'过轻'</span>)</span><br><span class="line">elif bmi &lt; <span class="number">25</span>:</span><br><span class="line">    print(<span class="string">'正常'</span>)</span><br><span class="line">elif bmi &lt; <span class="number">28</span>:</span><br><span class="line">    print(<span class="string">'过重'</span>)</span><br><span class="line">elif bmi &lt; <span class="number">32</span>:</span><br><span class="line">    print(<span class="string">'肥胖'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'严重肥胖'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"># 循环计算高斯公式，range的使用</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"># for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:</span><br><span class="line">for x in range(11):  # 生成0-10的11个整数</span><br><span class="line">    sum = sum + x</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(sum)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"># List的使用</span><br><span class="line">L = [<span class="string">'Bart'</span>, <span class="string">'Lisa'</span>, <span class="string">'Adam'</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">    print(<span class="string">'Hello,'</span>, x)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"># 循环</span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">while n &lt;= <span class="number">20</span>:</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">5</span>:</span><br><span class="line">        n = n + 1  # while循环，+1运算在循环尾，此处需要加1，才可保证</span><br><span class="line">        continue</span><br><span class="line">    if n &gt; 10:  # 当n = 11时，条件满足，执行break语句</span><br><span class="line">        break  # break语句会结束当前循环</span><br><span class="line">    print(n)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'END'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"># list的特点：</span><br><span class="line"># 1.查找和插入的时间随着元素的增加而增加；</span><br><span class="line"># 2.占用空间小，浪费内存很少。</span><br><span class="line"></span><br><span class="line"># dict（字典-相当于map）的特点：(以空间换时间)</span><br><span class="line"># 1.查找和插入的速度极快，不会随着key的增加而变慢；</span><br><span class="line"># 2.需要占用大量的内存，内存浪费多</span><br><span class="line">d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(d[<span class="string">'Bob'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"># set可以看成数学意义上的无序和无重复元素的集合</span><br><span class="line">s = set([1, 1, 2, 2, 3, 3])  # 重复数据自动过滤掉</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s:</span><br><span class="line">    print(x)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line">s = set((1, 2, 3))  # 将元组赋给set</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s:</span><br><span class="line">    print(x)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"># s = set((1,[2,3]))  # 不可以将tuple(不可变对象)赋给set</span><br><span class="line"># for x in s:</span><br><span class="line">#    print(x)</span><br><span class="line"># print('')</span><br><span class="line"></span><br><span class="line"># python内置函数</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">255</span></span><br><span class="line">n2 = <span class="number">1000</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(hex(n1)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(hex(n2)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def my_abs(x):</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        return x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        return -x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = -<span class="number">20</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(my_abs(x)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def power(x, n=2):  # x为必选参数，n为默认参数</span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    while n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    return s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(power(<span class="number">5</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(power(<span class="number">5</span>, <span class="number">3</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def enroll(name, gender, age=6, city='Beijing'):</span><br><span class="line">    print(<span class="string">'name:'</span>, name)</span><br><span class="line">    print(<span class="string">'gender:'</span>, gender)</span><br><span class="line">    print(<span class="string">'age:'</span>, age)</span><br><span class="line">    print(<span class="string">'city:'</span>, city)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">enroll</span><span class="params">(<span class="string">'Yang'</span>, <span class="string">'A'</span>, <span class="number">18</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'-------------'</span>)</span></span></span><br><span class="line">enroll('Chen', 'B', city='wuhan')  # 当不按顺序提供部分默认参数时，需要把参数名写上</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add_end(L=[]):  # 默认参数L也是一个变量，它指向对象[]</span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    print(L)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">add_end</span><span class="params">([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span></span></span><br><span class="line">add_end()  # ['END']</span><br><span class="line">add_end()  # ['END', 'END']</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add_end_1(L=None):  # 默认参数必须指向不变对象！  None为不变对象</span><br><span class="line">    <span class="keyword">if</span> L is None:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    print(L)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">add_end_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">add_end_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 可变参数  (可变参数在函数调用时自动组装为一个tuple元组)</span><br><span class="line">def calc(*numbers):</span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    return sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(calc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 关键字参数   （关键字参数在函数内部自动组装为一个dict字典） 作用：可以扩展函数的功能</span><br><span class="line">def person(name, age, **kw):</span><br><span class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">person</span><span class="params">(<span class="string">'Adam'</span>, <span class="number">45</span>, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line">extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line">person('Jack', 24, **extra)  # **kw关键字参数获取到extra字典（dict）的一个拷贝</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 必选参数、默认参数、可变参数、关键字参数和命名关键字参数的参数组合</span><br><span class="line">def f1(a, b, c=0, *args, **kw):</span><br><span class="line">    print(<span class="string">'a ='</span>, <span class="selector-tag">a</span>, <span class="string">'b ='</span>, <span class="selector-tag">b</span>, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def f2(a, b, c=0, *, d, **kw):  # * 后面的参数被视为命名关键字参数</span><br><span class="line">    print(<span class="string">'a ='</span>, <span class="selector-tag">a</span>, <span class="string">'b ='</span>, <span class="selector-tag">b</span>, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">f1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">f1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>)</span></span></span><br><span class="line">f1(1, 2, 3, 'a', 'b')  # （'a', 'b'）可变参数</span><br><span class="line"><span class="function"><span class="title">f1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">f2</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=None)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 递归函数 与尾递归（在函数返回的时候，调用自身本身，并且return语句不能包含表达式）</span><br><span class="line"># 计算n的阶乘</span><br><span class="line">def fact(n):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        return <span class="number">1</span></span><br><span class="line">    return n * fact(n - 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(fact(<span class="number">100</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 上述递归中，如果调用次数过多就会出现栈溢出。 解决方法就是使用尾递归。</span><br><span class="line">def fact_back(n):</span><br><span class="line">    return fact_iter(n, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def fact_iter(num, product):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        return product</span><br><span class="line">    return fact_iter(num - 1, num * product)  # 每次递归时就把该次结果作为参数传递给下一轮循环</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(fact_back(<span class="number">100</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"># 切片的使用</span><br><span class="line">L = list(range(<span class="number">100</span>))</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(L)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"># 切片的三个参数的意义：1.首位置 2.末尾置 3.每n一取  [ )左闭右开区间</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(L[:<span class="number">10</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(L[-<span class="number">10</span>:])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(L[<span class="number">10</span>:<span class="number">20</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(L[:<span class="number">10</span>:<span class="number">2</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(L[::<span class="number">5</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"># 迭代器  可迭代对象有：字符串、list、tuple(元组)、dict、set</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">'ABC'</span>:</span><br><span class="line">    print(ch)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line">for i, value in enumerate(['A', 'B', 'C']):  # enumerate把一个list变成索引-元素对</span><br><span class="line">    print(<span class="selector-tag">i</span>, value)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line">for x, y in [(1, 1), (2, 4), (3, 9)]:  # 两个变量的迭代</span><br><span class="line">    print(x, y)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"># 列表生成器</span><br><span class="line">print(list(range(1, 11)))  # 生成1-10的list，左闭右开</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line">print([x * x for x in range(1, 11) if x % 2 == 0])  # 生成1-10之间偶数的平方</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line">print([m + n for m in 'ABC' for n in 'XYZ'])  # 两层循环生成全排列</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line">import os  # 导入os模块，模块的概念后面讲到</span><br><span class="line"></span><br><span class="line">print([d for d in os.listdir('.')])  # [] 生成list</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line">d = &#123;'x': 'A', 'y': 'B', 'z': 'C'&#125;  # dict</span><br><span class="line">print([k + '=' + v for k, v in d.items()])  # 使用两个变量来生成list</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line">L1 = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="number">18</span>, <span class="string">'Apple'</span>, None]</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(L1)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line">L2 = [s.lower() for s in L1 if isinstance(s, str)]  # 如果s为字符串，则转换为小写生成列表</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(L2)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"># 生成器：generator。 （用于一边循环一边推到下一个值）</span><br><span class="line">g = (x * x for x in range(10))</span><br><span class="line">print(g)  # 输出：&lt;generator object &lt;genexpr&gt; at 0x0000009576A0A4C0&gt;</span><br><span class="line">#  next(g) 使用生成器生成下一个元素的值</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line">    print(n)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def fib(max):  # 斐波纳契数列</span><br><span class="line">    n, a, b = 0, 0, 1  # 变量初始化，相当于 n=0;a=0;b=1</span><br><span class="line">    while n &lt; max:</span><br><span class="line">        print(b)</span><br><span class="line">        <span class="selector-tag">a</span>, <span class="selector-tag">b</span> = <span class="selector-tag">b</span>, <span class="selector-tag">a</span> + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    return <span class="string">'done'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(fib(<span class="number">6</span>)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def fibonacci(max):</span><br><span class="line">    n, <span class="selector-tag">a</span>, <span class="selector-tag">b</span> = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    while n &lt; max:</span><br><span class="line">        yield b  # 每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行</span><br><span class="line">        <span class="selector-tag">a</span>, <span class="selector-tag">b</span> = <span class="selector-tag">b</span>, <span class="selector-tag">a</span> + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    return <span class="string">'done'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = fibonacci(<span class="number">6</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(next(g)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(next(g)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(next(g)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(g)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line">while True:  # 必须捕获StopIteration错误，才可以获取到fibonacci（）的返回值</span><br><span class="line">    try:</span><br><span class="line">        x = next(g)</span><br><span class="line">        print(<span class="string">'g:'</span>, x)</span><br><span class="line">    except StopIteration as e:</span><br><span class="line">        print(<span class="string">'Generator return value:'</span>, e.value)</span><br><span class="line">        break</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"># 杨辉三角，生成器写法</span><br><span class="line">def triangles():</span><br><span class="line">    L = [<span class="number">1</span>]</span><br><span class="line">    while True:</span><br><span class="line">        yield L</span><br><span class="line">        L.insert(<span class="number">0</span>, <span class="number">0</span>)    #首尾添加一个<span class="number">0</span>，便于循环计算</span><br><span class="line">        L.append(<span class="number">0</span>)</span><br><span class="line">        L = [L[i] + L[<span class="selector-tag">i</span> + <span class="number">1</span>] <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> range(len(L)-<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> triangles():</span><br><span class="line">    print(t)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">10</span>:</span><br><span class="line">        break</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line"># 迭代器</span><br><span class="line"># 可迭代对象（Iterable） （特点：可直接作用于for循环的）</span><br><span class="line"># 1.集合数据类型，如list、tuple、dict、set、str等；</span><br><span class="line"># 2.generator，包括生成器和带yield的generator function</span><br><span class="line"># 迭代器（Iterator）对象：生成器</span><br><span class="line"># list、tuple、dict、set、str可以通过iter()返回Iterator对象</span><br><span class="line"></span><br><span class="line">from collections import Iterable</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(isinstance([], Iterable)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">''</span>)</span></span></span><br><span class="line"></span><br><span class="line">from collections import Iterator</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(isinstance([], Iterator)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(isinstance(iter([])</span></span>, Iterator))</span><br></pre></td></tr></table></figure><hr><p>身边有许多人都赶上AI学习的浪潮，我还是想努力做好一件事，在学习之余，自己看了看python，对这门语言很是好奇！很想先接触一下，虽然对python以后的方向并不是很清楚，适当扩展扩展自己的知识面也是灰常重要的！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;自学廖雪峰教程代码笔记&quot;&gt;&lt;a href=&quot;#自学廖雪峰教程代码笔记&quot; class=&quot;headerlink&quot; title=&quot;自学廖雪峰教程代码笔记&quot;&gt;&lt;/a&gt;自学&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰教程&lt;/a&gt;代码笔记&lt;/h3&gt;&lt;p&gt;通过自己在廖雪峰Python教程的学习，自己也尝试实现里面的一些基本语法，加强自己的理解，是学习一门语言最重要的部分！&lt;br&gt;Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。&lt;br&gt;
    
    </summary>
    
      <category term="Python学习" scheme="http://mindyu.com/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://mindyu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>static虽好，可不要滥用</title>
    <link href="http://mindyu.com/2017/10/30/static%E8%99%BD%E5%A5%BD%EF%BC%8C%E5%8F%AF%E4%B8%8D%E8%A6%81%E6%BB%A5%E7%94%A8/"/>
    <id>http://mindyu.com/2017/10/30/static虽好，可不要滥用/</id>
    <published>2017-10-30T10:12:01.000Z</published>
    <updated>2018-02-25T14:06:45.147Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="Java中static作用详解"><a href="#Java中static作用详解" class="headerlink" title="Java中static作用详解"></a>Java中static作用详解</h3><p>  在自己的项目中已经两次入了static的坑，正如title所讲，static虽好但是请别滥用。<br>  static表示”静态”、”全局”的意思，可以修饰成员变量、方法，以及静态代码块，一下列举几种常用的static用法：</p><ol><li><p>静态域（静态变量）<br>如果将类中的域定义为static，那么所有该类的对象共享这一个静态域。域分为实例域与静态域。静态域属于类而不属于任何一个独立的对象。<a id="more"></a> 这也是我做项目是出现问题的所在，因为静态域可以更方便的访问，直接使用类名.静态域就可以轻松的访问，而忽略该类所有对象共用这一个域导致初始化出现遗漏。第一次是在图表类ChartService中将通道数设置为了静态变量，因为纵向梯度曲线比原始数据曲线数量少1，而导致原始数据数据集与数据渲染器初始化少了1，无法显示完整的曲线。第二次在读数据线程中，将暂停的flag设置为了静态变量，导致后面继续测量无法获取到数据，而调试了好久。</p></li><li><p>静态常量（使用比静态变量多）<br>比如Math类中定义到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Math&#123;</span><br><span class="line">...</span><br><span class="line">public static final double PI = 3.14159265358979323846;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以通过Math.PI的形式访问。<br>另外我们输出经常会用到System.out，它其实也是一个静态常量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static final PrintStream out = ...;</span><br></pre></td></tr></table></figure><p>但是Syetem类中却有一个setOut的方法，并且可以将System.out设置为不同的流。原因是setOut是一个本地方法，而不是通过java语言实现，本地方法可以绕过java语言的存取控制机制。</p></li></ol><ol start="3"><li><p>静态方法<br>静态方法是一种不能向对象实施操作的方法。Math.pow(x,a)计算x的a次方。静态方法是没有this参数的方法。静态方法不能访问实例域（静态方法不能操作对象），只能访问自身类中的静态域。</p><p>4.静态代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>静态代码块在类中独立于类成员，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。执行顺序先于构造函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java中static作用详解&quot;&gt;&lt;a href=&quot;#Java中static作用详解&quot; class=&quot;headerlink&quot; title=&quot;Java中static作用详解&quot;&gt;&lt;/a&gt;Java中static作用详解&lt;/h3&gt;&lt;p&gt;  在自己的项目中已经两次入了static的坑，正如title所讲，static虽好但是请别滥用。&lt;br&gt;  static表示”静态”、”全局”的意思，可以修饰成员变量、方法，以及静态代码块，一下列举几种常用的static用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;静态域（静态变量）&lt;br&gt;如果将类中的域定义为static，那么所有该类的对象共享这一个静态域。域分为实例域与静态域。静态域属于类而不属于任何一个独立的对象。
    
    </summary>
    
      <category term="安卓学习" scheme="http://mindyu.com/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="安卓" scheme="http://mindyu.com/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="Java" scheme="http://mindyu.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>A New Begining</title>
    <link href="http://mindyu.com/2017/09/23/A-New-Begining/"/>
    <id>http://mindyu.com/2017/09/23/A-New-Begining/</id>
    <published>2017-09-23T09:57:47.000Z</published>
    <updated>2018-05-07T13:32:43.093Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="许久没有更新博客了…"><a href="#许久没有更新博客了…" class="headerlink" title="许久没有更新博客了…"></a>许久没有更新博客了…</h2><ul><li>开学已经好久，上一次更新还是两个月前，都说坚持一件事情很难，果不其然。总是找各种理由（借口）不想写。大三学期已经开始三周了，除了上课感觉自己还是不知道该做些什么，浑浑噩噩，想学点东西，做点东西，却又不知道从何开始。不想考研，可是自己的能力却又远远不够。想学的东西很多，还是得静下心来，好好完成一件事。一步一个脚印。<a id="more"></a></li></ul><p><strong>坚持一个有规划的大学生活</strong></p><ul><li>学好java，从项目中多学习经验与技巧</li><li>感觉设计模式是一门很有用的课，对以后项目开发都很有用，学好设计模式</li><li>坚持早起，有时间就去去图书馆、实验室。</li><li>计算机网络还挺有意思，老师讲的还挺好</li><li>上课得提高效率，平时多做做感兴趣的事情</li><li>想学算法，期待和大神一样的厉害</li><li>想接触人工智能，机器学习，等等。。。</li><li>总之，好多好多……</li></ul><p>突然想起一句话，想的太多，做的太少。好像用来描述此时的我，太合适不过了。还不如选定一个小小的方向，努力去做好一件事情，坚持下去。我想收获会更多，你是否也这样觉得？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;许久没有更新博客了…&quot;&gt;&lt;a href=&quot;#许久没有更新博客了…&quot; class=&quot;headerlink&quot; title=&quot;许久没有更新博客了…&quot;&gt;&lt;/a&gt;许久没有更新博客了…&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;开学已经好久，上一次更新还是两个月前，都说坚持一件事情很难，果不其然。总是找各种理由（借口）不想写。大三学期已经开始三周了，除了上课感觉自己还是不知道该做些什么，浑浑噩噩，想学点东西，做点东西，却又不知道从何开始。不想考研，可是自己的能力却又远远不够。想学的东西很多，还是得静下心来，好好完成一件事。一步一个脚印。
    
    </summary>
    
      <category term="每日一记" scheme="http://mindyu.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
      <category term="心情" scheme="http://mindyu.com/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="学习" scheme="http://mindyu.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>DatePicker与TimePicker的使用</title>
    <link href="http://mindyu.com/2017/07/20/DatePicker%E4%B8%8ETimePicker%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://mindyu.com/2017/07/20/DatePicker与TimePicker的使用/</id>
    <published>2017-07-20T13:09:16.000Z</published>
    <updated>2018-02-25T14:06:45.144Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="安卓系统DatePicker与TimePicker的妙用"><a href="#安卓系统DatePicker与TimePicker的妙用" class="headerlink" title="安卓系统DatePicker与TimePicker的妙用"></a>安卓系统DatePicker与TimePicker的妙用</h3><p>  其实安卓系统自带的DatePicker和TimePicker的界面都已经很好看啦~<br>可以直接拿过来直接用，当然也可以自定义。<br>  它们可以直接以界面的形式显示，也可以用new DatePickerDialog()的方法以弹框的形式显示，使用特别方便。不信？你看~<br>  main.xml:定义一个需要用到的Datepicker和TimePicker，首先然后先设置visibility为gone，<a id="more"></a>我想通过按钮来实现它们的显示效果，而不会两个同时显示时，无法完全显示在界面上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;DatePicker</span><br><span class="line">       android:id=&quot;@+id/datePicker&quot;</span><br><span class="line">       android:layout_width=&quot;match_parent&quot;</span><br><span class="line">       android:layout_height=&quot;0dp&quot;</span><br><span class="line">       android:visibility=&quot;gone&quot;</span><br><span class="line">       android:layout_weight=&quot;1&quot; /&gt;</span><br><span class="line"></span><br><span class="line">   &lt;TimePicker</span><br><span class="line">       android:id=&quot;@+id/timePicker&quot;</span><br><span class="line">       android:layout_width=&quot;match_parent&quot;</span><br><span class="line">       android:visibility=&quot;gone&quot;</span><br><span class="line">       android:layout_height=&quot;0dp&quot;</span><br><span class="line">       android:layout_weight=&quot;1&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>MainActivity.java类：添加四个按钮，分别实现不同的点击事件（事件的监听，三种方法：1.匿名内部类 2.在MainActivity类中实现 View.OnClickListener接口，3.自定义监听类，实现接口），完成TimePicker、DatePicker以及它们的弹框形式的分别显示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">package com.example.datetimepicker;</span><br><span class="line"></span><br><span class="line">import android.app.DatePickerDialog;</span><br><span class="line">import android.app.TimePickerDialog;</span><br><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.DatePicker;</span><br><span class="line">import android.widget.TimePicker;</span><br><span class="line"></span><br><span class="line">import java.util.Calendar;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    private TimePicker timePicker;</span><br><span class="line">    private DatePicker datePicker;</span><br><span class="line">    private Calendar calendar;</span><br><span class="line">    private int year;</span><br><span class="line">    private int month;</span><br><span class="line">    private int day;</span><br><span class="line">    private int hour;</span><br><span class="line">    private int minute;</span><br><span class="line"></span><br><span class="line">    private Button timeBtn;</span><br><span class="line">    private Button dateBtn;</span><br><span class="line">    private Button timeBtnDia;</span><br><span class="line">    private Button dateBtnDia;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line"></span><br><span class="line">        timeBtn= (Button) findViewById(R.id.timePickerBtn);</span><br><span class="line">        dateBtn= (Button) findViewById(R.id.datePickerBtn);</span><br><span class="line">        timeBtnDia= (Button) findViewById(R.id.timePickerDia);</span><br><span class="line">        dateBtnDia= (Button) findViewById(R.id.datePickerDia);</span><br><span class="line"></span><br><span class="line">        //获取日历对象</span><br><span class="line">        calendar=Calendar.getInstance();</span><br><span class="line">        //获取年月日时分秒的信息</span><br><span class="line">        year=calendar.get(Calendar.YEAR);</span><br><span class="line">        month=calendar.get(Calendar.MONTH)+1;  //Calendar.MONTH获取的月份从0开始</span><br><span class="line">        day=calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        hour=calendar.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">        minute=calendar.get(Calendar.MINUTE);</span><br><span class="line">        setTitle(year+&quot;-&quot;+month+&quot;-&quot;+day+&quot; &quot;+hour+&quot;:&quot;+minute);</span><br><span class="line"></span><br><span class="line">        datePicker= (DatePicker) findViewById(R.id.datePicker);</span><br><span class="line">        timePicker= (TimePicker) findViewById(R.id.timePicker);</span><br><span class="line"></span><br><span class="line">        //datePicker的初始化日期Picker的年月日初始值</span><br><span class="line">        datePicker.init(year, month-1, day, new DatePicker.OnDateChangedListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onDateChanged(DatePicker datePicker, int i, int i1, int i2) &#123;</span><br><span class="line">                setTitle(i+&quot;-&quot;+(i1+1)+&quot;-&quot;+i2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        timePicker.setOnTimeChangedListener(new TimePicker.OnTimeChangedListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onTimeChanged(TimePicker timePicker, int i, int i1) &#123;</span><br><span class="line">                setTitle(i+&quot;:&quot;+i1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //添加监听，在MainActivity中，直接添加this</span><br><span class="line">        timeBtn.setOnClickListener(this);</span><br><span class="line">        timeBtnDia.setOnClickListener(this);</span><br><span class="line">        dateBtn.setOnClickListener(this);</span><br><span class="line">        dateBtnDia.setOnClickListener(this);</span><br><span class="line">        //使用匿名内部类的方法实现监听</span><br><span class="line">        //initEvent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void showDatePickerDialog()&#123;</span><br><span class="line">        new DatePickerDialog(this, new DatePickerDialog.OnDateSetListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onDateSet(DatePicker datePicker, int i, int i1, int i2) &#123;</span><br><span class="line">                setTitle(i+&quot;-&quot;+(i1+1)+&quot;-&quot;+i2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,year,month-1,day).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void showTimePickerDialog()&#123;</span><br><span class="line">        new TimePickerDialog(this, new TimePickerDialog.OnTimeSetListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onTimeSet(TimePicker timePicker, int i, int i1) &#123;</span><br><span class="line">                setTitle(i+&quot;:&quot;+i1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,hour,minute,true).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        switch (view.getId())&#123;</span><br><span class="line">            case R.id.datePickerBtn:</span><br><span class="line">                datePicker.setVisibility(View.VISIBLE);</span><br><span class="line">                timePicker.setVisibility(View.GONE);</span><br><span class="line">                break;</span><br><span class="line">            case R.id.timePickerBtn:</span><br><span class="line">                datePicker.setVisibility(View.GONE);</span><br><span class="line">                timePicker.setVisibility(View.VISIBLE);</span><br><span class="line">                break;</span><br><span class="line">            case R.id.timePickerDia:</span><br><span class="line">                showTimePickerDialog();</span><br><span class="line">                break;</span><br><span class="line">            case R.id.datePickerDia:</span><br><span class="line">                showDatePickerDialog();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void initEvent()&#123;</span><br><span class="line">        dateBtn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) &#123;</span><br><span class="line">                datePicker.setVisibility(View.VISIBLE);</span><br><span class="line">                timePicker.setVisibility(View.GONE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        timeBtn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) &#123;</span><br><span class="line">                datePicker.setVisibility(View.GONE);</span><br><span class="line">                timePicker.setVisibility(View.VISIBLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        dateBtnDia.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) &#123;</span><br><span class="line">                showDatePickerDialog();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        timeBtnDia.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) &#123;</span><br><span class="line">                showTimePickerDialog();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意事项：</p><p><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/datatimepicker.png" alt="datetimepicker"></p><p>最后的显示效果：</p><center><br><br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/TimePicker.jpg" width="150" height="150"><br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/DatePickerDialog.jpg" width="150" height="150"><br> </center>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安卓系统DatePicker与TimePicker的妙用&quot;&gt;&lt;a href=&quot;#安卓系统DatePicker与TimePicker的妙用&quot; class=&quot;headerlink&quot; title=&quot;安卓系统DatePicker与TimePicker的妙用&quot;&gt;&lt;/a&gt;安卓系统DatePicker与TimePicker的妙用&lt;/h3&gt;&lt;p&gt;  其实安卓系统自带的DatePicker和TimePicker的界面都已经很好看啦~&lt;br&gt;可以直接拿过来直接用，当然也可以自定义。&lt;br&gt;  它们可以直接以界面的形式显示，也可以用new DatePickerDialog()的方法以弹框的形式显示，使用特别方便。不信？你看~&lt;br&gt;  main.xml:定义一个需要用到的Datepicker和TimePicker，首先然后先设置visibility为gone，
    
    </summary>
    
      <category term="安卓学习" scheme="http://mindyu.com/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="andriod" scheme="http://mindyu.com/tags/andriod/"/>
    
      <category term="安卓" scheme="http://mindyu.com/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>AndriodManifest.xml配置</title>
    <link href="http://mindyu.com/2017/07/19/AndriodManifest-xml%E9%85%8D%E7%BD%AE/"/>
    <id>http://mindyu.com/2017/07/19/AndriodManifest-xml配置/</id>
    <published>2017-07-19T12:40:36.000Z</published>
    <updated>2018-02-25T14:06:45.143Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="AndriodManifest的配置基础"><a href="#AndriodManifest的配置基础" class="headerlink" title="AndriodManifest的配置基础"></a>AndriodManifest的配置基础</h3><p>1.全局篇<br>应用的包名以及版本信息，控制安卓的版本信息。</p><center><p><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/andriodmanifest.png" alt="andriodmanifest.xml"></p><p></p></center><br><a id="more"></a><br>2.组件篇（四大组件）<br>    Activity(活动)<br>    ：启动一个没有在清单中定义的Activity会抛出异常<br>    Service(服务)<br>    ：做为后台运行的一个逻辑代码的处理<br>    Content Provider(内容提供者)<br>    ：是用来管理数据库访问以及程序内和程序间共享的<br>    Broadcast Receiver(广播接收者)<p></p><p> 其属性可以设置：<br>图标：android:icon<br>标题：android:label<br>主题样式：android:theme<br>注意：只能包含一个application节点</p><p>3.权限篇</p><p><uses-permission>申请系统权限<br>自定义权限，限制其它应用使用该应用的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;permission</span><br><span class="line">        andriod:name=&quot;com.example.test&quot;</span><br><span class="line">        andriod:protectionLevel=&quot;normal&quot;&gt;</span><br><span class="line">&lt;/permission&gt;</span><br><span class="line"></span><br><span class="line">&lt;activity</span><br><span class="line">        andriod:permission=&quot;com.example.test&quot;</span><br><span class="line">        ....</span><br><span class="line">        &gt;</span><br></pre></td></tr></table></figure></uses-permission></p><p>然后在其他应用中若希望调用该应用则必须声明权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission andriod:name=&quot;com.example.test&quot;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="ListView的使用"><a href="#ListView的使用" class="headerlink" title="ListView的使用"></a>ListView的使用</h3><p>数据适配器：<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E6%95%B0%E6%8D%AE%E9%80%82%E9%85%8D%E5%99%A8.png" alt="数据适配器作用"><br>纯文字使用ArrayAdapter,有图片有文字又复杂的一系列内容的用SimpleAdapter.<br>1.ArrayAdapter(context, 当前listview加载的每一个列表项所对应的布局文件，数据源)<br>2.SimpleAdapter( context, data , resource , from ,to )：<br>context：上下文<br>data：数据源（List&lt;? extends Map&lt;String,?&gt;&gt; data）一个由Map组成的List合集<br>    每一个Map都对应ListView列表中的一行<br>    每一个Map（键-值对）中的键都必须包含所有在from中所指定的键<br>resource：列表项的布局文件ID<br>from：Map中的键名<br>to：绑定数据视图中的ID，与from成对应关系。<br>监听器：<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E7%9B%91%E5%90%AC%E5%99%A8.png" alt="ListView的两种监听器"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;AndriodManifest的配置基础&quot;&gt;&lt;a href=&quot;#AndriodManifest的配置基础&quot; class=&quot;headerlink&quot; title=&quot;AndriodManifest的配置基础&quot;&gt;&lt;/a&gt;AndriodManifest的配置基础&lt;/h3&gt;&lt;p&gt;1.全局篇&lt;br&gt;应用的包名以及版本信息，控制安卓的版本信息。&lt;/p&gt;
&lt;center&gt;

&lt;p&gt;&lt;img src=&quot;http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/andriodmanifest.png&quot; alt=&quot;andriodmanifest.xml&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/center&gt;&lt;br&gt;
    
    </summary>
    
      <category term="安卓学习" scheme="http://mindyu.com/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="andriod" scheme="http://mindyu.com/tags/andriod/"/>
    
      <category term="安卓" scheme="http://mindyu.com/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>安卓自定义控件</title>
    <link href="http://mindyu.com/2017/07/17/%E5%AE%89%E5%8D%93%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    <id>http://mindyu.com/2017/07/17/安卓自定义控件/</id>
    <published>2017-07-17T02:19:39.000Z</published>
    <updated>2018-02-25T14:06:45.150Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="自定义UI组件"><a href="#自定义UI组件" class="headerlink" title="自定义UI组件"></a>自定义UI组件</h3><p>  许久没有更新自己的博客了，感觉这些天，并没有做什么额。想想接下来这些时间还是多学习学习安卓的基础，多花时间尝试做一些小Demo。<br>  昨天，跟着网易云课堂自己做了一个自定义UI控件的小例子，分为以下三个步骤：<br>  1.设计需要的属性：<br>     新建一个attrs.xml文件声明以下内容 <a id="more"></a><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;declare-styleable name=&quot;Topbar&quot;&gt;</span><br><span class="line">        &lt;!--自定义属性--&gt;</span><br><span class="line">        &lt;!--中间的标题--&gt;</span><br><span class="line">        &lt;attr name=&quot;title&quot; format=&quot;string&quot; /&gt;</span><br><span class="line">        &lt;attr name=&quot;titleTextSize&quot; format=&quot;dimension&quot; /&gt;</span><br><span class="line">        &lt;attr name=&quot;titleTextColor&quot; format=&quot;color&quot; /&gt;</span><br><span class="line">        &lt;!--左边的按钮--&gt;</span><br><span class="line">        &lt;attr name=&quot;leftTextColor&quot; format=&quot;color&quot;/&gt;</span><br><span class="line">        &lt;attr name=&quot;leftTextSize&quot; format=&quot;dimension&quot;/&gt;</span><br><span class="line">        &lt;attr name=&quot;leftText&quot; format=&quot;string&quot;/&gt;</span><br><span class="line">        &lt;attr name=&quot;leftBackground&quot; format=&quot;color|reference&quot;/&gt;</span><br><span class="line">        &lt;!--右边的按钮--&gt;</span><br><span class="line">        &lt;attr name=&quot;rightTextColor&quot; format=&quot;color&quot;/&gt;</span><br><span class="line">        &lt;attr name=&quot;rightTextSize&quot; format=&quot;dimension&quot;/&gt;</span><br><span class="line">        &lt;attr name=&quot;rightText&quot; format=&quot;string&quot;/&gt;</span><br><span class="line">        &lt;attr name=&quot;rightBackground&quot; format=&quot;color|reference&quot;/&gt;</span><br><span class="line">    &lt;/declare-styleable&gt;</span><br><span class="line">    &lt;!--&quot;reference&quot; //引用--&gt;</span><br><span class="line">    &lt;!--&quot;color&quot; //颜色--&gt;</span><br><span class="line">    &lt;!--&quot;boolean&quot; //布尔值--&gt;</span><br><span class="line">    &lt;!--&quot;dimension&quot; //尺寸值--&gt;</span><br><span class="line">    &lt;!--&quot;float&quot; //浮点值--&gt;</span><br><span class="line">    &lt;!--&quot;integer&quot; //整型值--&gt;</span><br><span class="line">    &lt;!--&quot;string&quot; //字符串--&gt;</span><br><span class="line">    &lt;!--&quot;fraction&quot; //百分数,比如20%--&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p><p>  2.实现一个我们的自定义View</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">package com.example.topbardemo;</span><br><span class="line"></span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.content.res.TypedArray;</span><br><span class="line">import android.graphics.Color;</span><br><span class="line">import android.graphics.drawable.Drawable;</span><br><span class="line">import android.support.annotation.Dimension;</span><br><span class="line">import android.util.AttributeSet;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.ViewGroup;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.RelativeLayout;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line"></span><br><span class="line">public class Topbar extends RelativeLayout&#123;</span><br><span class="line"></span><br><span class="line">    //自定义控件中的组件</span><br><span class="line">    private Button leftButton,rightButton;</span><br><span class="line">    private TextView tvTitle;</span><br><span class="line"></span><br><span class="line">    //各组件的属性</span><br><span class="line">    private String title;</span><br><span class="line">    private float titleTextSize;</span><br><span class="line">    private int titleTextColor;</span><br><span class="line"></span><br><span class="line">    private int leftButtonColor;</span><br><span class="line">    private String leftText;</span><br><span class="line">    private Drawable leftBack;</span><br><span class="line">    private float leftTextSize;</span><br><span class="line"></span><br><span class="line">    private int rightButtonColor;</span><br><span class="line">    private String rightText;</span><br><span class="line">    private Drawable rightBack;</span><br><span class="line">    private float rightTextSize;</span><br><span class="line"></span><br><span class="line">    private LayoutParams leftParam,rightParam,titleParam;</span><br><span class="line"></span><br><span class="line">    private topbarClickListener listener;</span><br><span class="line"></span><br><span class="line">    public interface topbarClickListener&#123;</span><br><span class="line">        void leftClick();</span><br><span class="line">        void rightClick();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //接口回调机制，实现组件的事件</span><br><span class="line">    public void setTopbarClickListener(topbarClickListener listener)&#123;</span><br><span class="line">        this.listener=listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Topbar(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);                                     //引用自定义的属性name</span><br><span class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs,R.styleable.Topbar);</span><br><span class="line"></span><br><span class="line">        //获取到自定义的各个属性</span><br><span class="line">        title=typedArray.getString(R.styleable.Topbar_title);</span><br><span class="line">        titleTextColor=typedArray.getColor(R.styleable.Topbar_titleTextColor,0);</span><br><span class="line">        titleTextSize=typedArray.getDimension(R.styleable.Topbar_titleTextSize,1);</span><br><span class="line"></span><br><span class="line">        leftText = typedArray.getString(R.styleable.Topbar_leftText);</span><br><span class="line">        leftButtonColor = typedArray.getColor(R.styleable.Topbar_leftTextColor,0);</span><br><span class="line">        leftTextSize = typedArray.getDimension(R.styleable.Topbar_leftTextSize,1);</span><br><span class="line">        leftBack = typedArray.getDrawable(R.styleable.Topbar_leftBackground);</span><br><span class="line"></span><br><span class="line">        rightText = typedArray.getString(R.styleable.Topbar_rightText);</span><br><span class="line">        rightButtonColor = typedArray.getColor(R.styleable.Topbar_rightTextColor,0);</span><br><span class="line">        rightTextSize = typedArray.getDimension(R.styleable.Topbar_rightTextSize,1);</span><br><span class="line">        rightBack = typedArray.getDrawable(R.styleable.Topbar_rightBackground);</span><br><span class="line"></span><br><span class="line">        //调用结束后务必调用recycle()方法，否则这次的设定会对下次的使用造成影响</span><br><span class="line">        typedArray.recycle();</span><br><span class="line"></span><br><span class="line">        //定义各个组件</span><br><span class="line">        leftButton= new Button(context);</span><br><span class="line">        rightButton = new Button(context);</span><br><span class="line">        tvTitle =new TextView(context);</span><br><span class="line"></span><br><span class="line">        //为组件添加属性</span><br><span class="line">        leftButton.setText(leftText);</span><br><span class="line">        leftButton.setTextColor(leftButtonColor);</span><br><span class="line">        leftButton.setTextSize(leftTextSize);</span><br><span class="line">        leftButton.setBackground(leftBack);</span><br><span class="line"></span><br><span class="line">        rightButton.setText(rightText);</span><br><span class="line">        rightButton.setTextColor(rightButtonColor);</span><br><span class="line">        rightButton.setTextSize(rightTextSize);</span><br><span class="line">        rightButton.setBackground(rightBack);</span><br><span class="line"></span><br><span class="line">        tvTitle.setText(title);</span><br><span class="line">        tvTitle.setTextColor(titleTextColor);</span><br><span class="line">        tvTitle.setTextSize(titleTextSize);</span><br><span class="line"></span><br><span class="line">        setBackgroundColor(0xFFF1233);</span><br><span class="line"></span><br><span class="line">        //布局参数样式</span><br><span class="line">        leftParam = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);</span><br><span class="line">        leftParam.addRule(RelativeLayout.ALIGN_PARENT_LEFT,TRUE);</span><br><span class="line"></span><br><span class="line">        //组件以leftParam样式添加到View中</span><br><span class="line">        addView(leftButton,leftParam);</span><br><span class="line"></span><br><span class="line">        rightParam = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);</span><br><span class="line">        rightParam.addRule(RelativeLayout.ALIGN_PARENT_RIGHT,TRUE);</span><br><span class="line"></span><br><span class="line">        addView(rightButton,rightParam);</span><br><span class="line"></span><br><span class="line">        titleParam = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);</span><br><span class="line">        titleParam.addRule(RelativeLayout.CENTER_IN_PARENT,TRUE);</span><br><span class="line"></span><br><span class="line">        addView(tvTitle,titleParam);</span><br><span class="line"></span><br><span class="line">        //组件的点击事件</span><br><span class="line">        leftButton.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) &#123;</span><br><span class="line">                listener.leftClick();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        rightButton.setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) &#123;</span><br><span class="line">                listener.rightClick();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //其他事件的完善</span><br><span class="line">    public void setLeftButtonVisable(boolean flag)&#123;</span><br><span class="line">        if (flag)&#123;</span><br><span class="line">            leftButton.setVisibility(VISIBLE);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            leftButton.setVisibility(GONE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  3.引用我们的View</p><ul><li>在activity_main.xml中引入<code>xmlns:custom=&quot;http://schemas.android.com/apk/res-auto&quot;</code>声明引用的组件并设置属性值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.example.topbardemo.Topbar</span><br><span class="line">           android:id=&quot;@+id/topbar&quot;</span><br><span class="line">           android:layout_width=&quot;match_parent&quot;</span><br><span class="line">           android:layout_height=&quot;50dp&quot;</span><br><span class="line">           custom:leftText=&quot;Left&quot;</span><br><span class="line">           custom:leftTextColor=&quot;@color/colorPrimaryDark&quot;</span><br><span class="line">           custom:leftTextSize=&quot;8sp&quot;</span><br><span class="line">           custom:rightText=&quot;Right&quot;</span><br><span class="line">           custom:rightTextColor=&quot;@color/colorPrimaryDark&quot;</span><br><span class="line">           custom:rightTextSize=&quot;8sp&quot;</span><br><span class="line">           custom:title=&quot;自定义标题&quot;</span><br><span class="line">           custom:titleTextColor=&quot;@color/colorAccent&quot;</span><br><span class="line">           custom:titleTextSize=&quot;10sp&quot;</span><br><span class="line">           &gt;</span><br><span class="line">   &lt;/com.example.topbardemo.Topbar&gt;</span><br></pre></td></tr></table></figure><ul><li>在Activity中定义各个组件的事件。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">topbar= (Topbar) findViewById(R.id.topbar);</span><br><span class="line">      topbar.setTopbarClickListener(new Topbar.topbarClickListener() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void leftClick() &#123;</span><br><span class="line">              Toast.makeText(getApplicationContext(),&quot;Left&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void rightClick() &#123;</span><br><span class="line">              Toast.makeText(getApplicationContext(),&quot;Right&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      button = (Button) findViewById(R.id.button1);</span><br><span class="line">      button.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void onClick(View view) &#123;</span><br><span class="line">              topbar.setLeftButtonVisable(false);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure></li></ul><p>  最后的完成的效果：</p><center><br><br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/andriod%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6.jpg" width="150" height="150"><br><br> </center>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;自定义UI组件&quot;&gt;&lt;a href=&quot;#自定义UI组件&quot; class=&quot;headerlink&quot; title=&quot;自定义UI组件&quot;&gt;&lt;/a&gt;自定义UI组件&lt;/h3&gt;&lt;p&gt;  许久没有更新自己的博客了，感觉这些天，并没有做什么额。想想接下来这些时间还是多学习学习安卓的基础，多花时间尝试做一些小Demo。&lt;br&gt;  昨天，跟着网易云课堂自己做了一个自定义UI控件的小例子，分为以下三个步骤：&lt;br&gt;  1.设计需要的属性：&lt;br&gt;     新建一个attrs.xml文件声明以下内容
    
    </summary>
    
      <category term="安卓学习" scheme="http://mindyu.com/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="安卓" scheme="http://mindyu.com/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="自定义控件" scheme="http://mindyu.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>安卓学习之2048</title>
    <link href="http://mindyu.com/2017/07/07/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0%E4%B9%8B2048/"/>
    <id>http://mindyu.com/2017/07/07/安卓学习之2048/</id>
    <published>2017-07-07T07:11:40.000Z</published>
    <updated>2018-02-25T14:06:45.149Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="一个叫做2048的小游戏"><a href="#一个叫做2048的小游戏" class="headerlink" title="一个叫做2048的小游戏"></a>一个叫做2048的小游戏</h3><ul><li><p>许久未更新我的博客了，只是因为，这几天觉得并没有什么好写的，好记录下来的。有时候只是学习到编码中的一点点小技巧，大多也是自己通过在网上学习，自己敲代码所总结出来的。可能是自己做的不多吧。</p></li><li><p>这两天重新把自己开始接触安卓时想做的一个小游戏继续完善了一下，两个月之后回头再看看自己当时的代码，还是学的有许多许多需要去改进的地方，这也说明我还是不断的在学习^ - ^。<a id="more"></a> 以前直接将每一种方块看成图片，然后自己做2~2048的图片，以图片的形式填充到每一个ImageView中，现在则是以TextView形式，动态设置每一方块的数字以及背景色。这样使得游戏占得空间小多啦，这也是网上所推荐的方法。</p></li></ul><center><br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/S70707-150825.jpg" width="150" height="200"><br> </center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">private LinearLayout layout;</span><br><span class="line">   private Button mainMenu;</span><br><span class="line">   private Button btnReset;</span><br><span class="line">   private Button btnUp;</span><br><span class="line">   private TextView textScore;</span><br><span class="line">   private TextView textBestScore;</span><br><span class="line">   private int[][] oldFlag = new int[4][4];</span><br><span class="line">   private static int score = 0;</span><br><span class="line">   private static int best_score=0;</span><br><span class="line">   //触摸事件手指按下和松开的两个坐标</span><br><span class="line">   private float x1 = 0;</span><br><span class="line">   private float x2 = 0;</span><br><span class="line">   private float y1 = 0;</span><br><span class="line">   private float y2 = 0;</span><br><span class="line">   //16个方块的id</span><br><span class="line">   static int[][] btnBlock = &#123;</span><br><span class="line">           &#123;R.id.btn00, R.id.btn01, R.id.btn02, R.id.btn03&#125;,</span><br><span class="line">           &#123;R.id.btn10, R.id.btn11, R.id.btn12, R.id.btn13&#125;,</span><br><span class="line">           &#123;R.id.btn20, R.id.btn21, R.id.btn22, R.id.btn23&#125;,</span><br><span class="line">           &#123;R.id.btn30, R.id.btn31, R.id.btn32, R.id.btn33&#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   //16个方块的对应的值</span><br><span class="line">   static int[][] flag = &#123;</span><br><span class="line">           &#123;0, 0, 0, 0&#125;,</span><br><span class="line">           &#123;0, 0, 0, 0&#125;,</span><br><span class="line">           &#123;0, 0, 0, 0&#125;,</span><br><span class="line">           &#123;0, 0, 0, 0&#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><ul><li>以二维数组的形式存储每一个方块对应的值，然后根据方块中的值，来动态绘制每一个方块的数字以及背景色。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//手势滑动</span><br><span class="line">    @TargetApi(Build.VERSION_CODES.M)</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</span><br><span class="line">        switch (event.getAction()) &#123;</span><br><span class="line">            case MotionEvent.ACTION_DOWN:</span><br><span class="line">                x1 = event.getX();</span><br><span class="line">                y1 = event.getY();</span><br><span class="line">                break;</span><br><span class="line">            case MotionEvent.ACTION_MOVE:</span><br><span class="line">                x2 = event.getX();</span><br><span class="line">                y2 = event.getY();</span><br><span class="line">                break;</span><br><span class="line">            case MotionEvent.ACTION_UP:</span><br><span class="line">                if (x2 - x1 &gt; 50 &amp;&amp; Math.abs(x2 - x1) &gt; Math.abs(y2 - y1)) &#123;</span><br><span class="line">//                    Toast.makeText(this,&quot;向右滑动&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">                    moveToRight();</span><br><span class="line">                &#125; else if (x1 - x2 &gt; 50 &amp;&amp; Math.abs(x2 - x1) &gt; Math.abs(y2 - y1)) &#123;</span><br><span class="line">//                    Toast.makeText(this,&quot;向左滑动&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">                    moveToLeft();</span><br><span class="line">                &#125; else if (y2 - y1 &gt; 50 &amp;&amp; Math.abs(x2 - x1) &lt; Math.abs(y2 - y1)) &#123;</span><br><span class="line">//                    Toast.makeText(this,&quot;向下滑动&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">                    moveToBottom();</span><br><span class="line">                &#125; else if (y1 - y2 &gt; 50 &amp;&amp; Math.abs(x2 - x1) &lt; Math.abs(y2 - y1)) &#123;</span><br><span class="line">//                    Toast.makeText(this,&quot;向上滑动&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">                    moveToUp();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>重写触摸事件，按下的时候记录当前的坐标，手指滑动时记录手指所在坐标。滑动结束时（也就是手指放开时），计算坐标之间的变化来判断手势的滑动方向以进行方块的滑动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">//向右滑动</span><br><span class="line">    public void moveToRight() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 16; i++) &#123;</span><br><span class="line">            oldFlag[i / 4][i % 4] = flag[i / 4][i % 4];</span><br><span class="line">        &#125;</span><br><span class="line">        for (int j = 0; j &lt; 4; j++) &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; list1 = new ArrayList&lt;&gt;();</span><br><span class="line">            for (int i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">                if (flag[j][3 - i] != 0) &#123;</span><br><span class="line">                    list1.add(flag[j][3 - i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ArrayList&lt;Integer&gt; temp = new ArrayList&lt;&gt;();</span><br><span class="line">            int i = 0;</span><br><span class="line">            for (i = 0; i &lt; list1.size() - 1; i++) &#123;</span><br><span class="line">                if (list1.get(i) == 2048)&#123;</span><br><span class="line">                &#125;else if (list1.get(i) == list1.get(i + 1)) &#123;</span><br><span class="line">                    temp.add(list1.get(i) * 2);</span><br><span class="line">                    score += list1.get(i) * 2;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    temp.add(list1.get(i));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (i == list1.size() - 1) &#123;</span><br><span class="line">                temp.add(list1.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            if (list1.size() &gt; 1) &#123;</span><br><span class="line">                list1 = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            for (i = 0; i &lt; list1.size(); i++) &#123;</span><br><span class="line">                flag[j][3 - i] = list1.get(i);</span><br><span class="line">                fillBlock(list1.get(i), j, 3 - i);</span><br><span class="line">            &#125;</span><br><span class="line">            for (i = list1.size(); i &lt; 4; i++) &#123;</span><br><span class="line">                flag[j][3 - i] = 0;</span><br><span class="line">                fillBlock(0, j, 3 - i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //判断是否变化</span><br><span class="line">        boolean isNext = false;</span><br><span class="line">        for (int i = 0; i &lt; 16; i++) &#123;</span><br><span class="line">            if (oldFlag[i / 4][i % 4] != flag[i / 4][i % 4]) &#123;</span><br><span class="line">                isNext = true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (isNext) &#123;</span><br><span class="line">            nextBlock();</span><br><span class="line">        &#125; else if (isGameOver()) &#123;</span><br><span class="line">            Toast.makeText(MainActivity.this, &quot;GAME OVER&quot;, Toast.LENGTH_SHORT);</span><br><span class="line">            reset();   //重新开始</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><ul><li>首先记录滑动之前的二维数组（1.判断此次滑动时候有方块变化，2.便于返回上一步），然后根据手势滑动所得的方向，将方块中的值依次添加到四个List<integer>，接下来遍历一遍，如果当前list.get(i)与list.get(i+1)相等，则两个数据合并，保存到一个temp的List中。最后将temp中的值一次填到二维数组的对应位置中去。</integer></li><li>最后将方块显示出来，通过设置每一个方块的数字以及背景色。（这里还是差一个动画的效果，就更完美了！）</li><li><p>还有最高的记录，是用的安卓的SharedPreferences存储，以XML标签的形式将数据保存与本地手机上。每次打开游戏的时候，初始化界面的时候从score_data.xml文件中读取到对应的最高分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//保存数据</span><br><span class="line">   public void saveBest_score(Score score)&#123;</span><br><span class="line">       SharedPreferences.Editor editor =getApplicationContext().getSharedPreferences(&quot;score_data&quot;, Context.MODE_PRIVATE).edit();</span><br><span class="line">       editor.putString(&quot;name&quot;,score.getName());</span><br><span class="line">       editor.putInt(&quot;score&quot;,score.getScore());</span><br><span class="line">       editor.putString(&quot;time&quot;,score.getTime());</span><br><span class="line">       editor.commit();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><center><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/S70707-150832.jpg" width="150" height="150"><br></center></li></ul><p>我的<b><a href="https://github.com/Mindyu/2048Game.git" target="_blank" rel="noopener">2048游戏源码</a></b></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一个叫做2048的小游戏&quot;&gt;&lt;a href=&quot;#一个叫做2048的小游戏&quot; class=&quot;headerlink&quot; title=&quot;一个叫做2048的小游戏&quot;&gt;&lt;/a&gt;一个叫做2048的小游戏&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;许久未更新我的博客了，只是因为，这几天觉得并没有什么好写的，好记录下来的。有时候只是学习到编码中的一点点小技巧，大多也是自己通过在网上学习，自己敲代码所总结出来的。可能是自己做的不多吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这两天重新把自己开始接触安卓时想做的一个小游戏继续完善了一下，两个月之后回头再看看自己当时的代码，还是学的有许多许多需要去改进的地方，这也说明我还是不断的在学习^ - ^。
    
    </summary>
    
      <category term="安卓学习" scheme="http://mindyu.com/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="andriod" scheme="http://mindyu.com/tags/andriod/"/>
    
      <category term="安卓" scheme="http://mindyu.com/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="2048" scheme="http://mindyu.com/tags/2048/"/>
    
  </entry>
  
  <entry>
    <title>JNI（java 本地接口）开发</title>
    <link href="http://mindyu.com/2017/07/02/JNI%EF%BC%88java-%E6%9C%AC%E5%9C%B0%E6%8E%A5%E5%8F%A3%EF%BC%89%E5%BC%80%E5%8F%91/"/>
    <id>http://mindyu.com/2017/07/02/JNI（java-本地接口）开发/</id>
    <published>2017-07-02T10:31:24.000Z</published>
    <updated>2018-02-25T14:06:45.145Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="JNI开发之NDK环境搭建"><a href="#JNI开发之NDK环境搭建" class="headerlink" title="JNI开发之NDK环境搭建"></a>JNI开发之NDK环境搭建</h3><p> 首先得先说说JNI是什么，Java Native Interface(java本地接口)的缩写，主要是实现Java与其他语言的通信（主要是C，C++）。当实际项目中一些接口并不支持java安卓的时候，就得靠自己进行封装，来达到目的。缺点是java与本地以编译好的代码交互，可能会丧失平台可移植性，另外程序安全性降低使用不当可能是整个程序崩溃，使用时尽量降低语言之间的耦合性。<a id="more"></a>开发JNI项目前提是需要有NDK（Native Development Kit）的支持。因此，在开发前需要先安装和配置NDK。推荐一个<a href="http://blog.csdn.net/xbw12138/article/details/54882331#html" target="_blank" rel="noopener">NDK安装教程</a> 对于windows系统依然适用。<br> 1.项目配置文件gradle.properties中添加<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.useDeprecatedNdk=true</span><br></pre></td></tr></table></figure></p><p> 2.local.properties文件添加：（如果是在AS-&gt;SDK Manager-&gt;Appearance&amp;Behavior-&gt;System Settings-&gt;Andriod SDK-&gt;SDK Tools安装，会自动配置）<br> <code>ndk.dir=NDK的路径</code><br>3.打开模块的build.gradle文件，在android/defaultConfig下面添加ndk节点，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ndk &#123;</span><br><span class="line">          moduleName &quot;JNIDemo&quot;</span><br><span class="line">          stl &quot;stlport_static&quot;</span><br><span class="line">          ldLibs &quot;log&quot;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p>4.创建JNIUtil类，声明本地方法。编译后在Terminal终端面板中定位到<code>cd app/build/intermediates/classes/debug/</code> 执行<code>javah 包名.JNIUtil</code>（JNIUtil是刚刚定义的类名）执行成功之后会在刚刚的debug目录下生成一个.h的头文件（文件名为:Java.类名.包名.h(‘.’换成’_‘)）。<br>5.在app目录下新建JNI目录，拷贝第四步生成的.h文件，再创建一个.cpp文件实现头文件中的方法。<br>6.ok~   编译运行。完美~</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JNI开发之NDK环境搭建&quot;&gt;&lt;a href=&quot;#JNI开发之NDK环境搭建&quot; class=&quot;headerlink&quot; title=&quot;JNI开发之NDK环境搭建&quot;&gt;&lt;/a&gt;JNI开发之NDK环境搭建&lt;/h3&gt;&lt;p&gt; 首先得先说说JNI是什么，Java Native Interface(java本地接口)的缩写，主要是实现Java与其他语言的通信（主要是C，C++）。当实际项目中一些接口并不支持java安卓的时候，就得靠自己进行封装，来达到目的。缺点是java与本地以编译好的代码交互，可能会丧失平台可移植性，另外程序安全性降低使用不当可能是整个程序崩溃，使用时尽量降低语言之间的耦合性。
    
    </summary>
    
      <category term="安卓学习" scheme="http://mindyu.com/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="安卓" scheme="http://mindyu.com/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="NDK" scheme="http://mindyu.com/tags/NDK/"/>
    
      <category term="JNI" scheme="http://mindyu.com/tags/JNI/"/>
    
  </entry>
  
</feed>
