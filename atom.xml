<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yang Cq</title>
  
  <subtitle>一个学习的网站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mindyu.com/"/>
  <updated>2018-12-24T14:18:14.377Z</updated>
  <id>http://mindyu.com/</id>
  
  <author>
    <name>Yang Cq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>品优购项目笔记（下）</title>
    <link href="http://mindyu.com/2018/12/22/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://mindyu.com/2018/12/22/品优购项目笔记（下）/</id>
    <published>2018-12-22T01:45:33.000Z</published>
    <updated>2018-12-24T14:18:14.377Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="购物车解决方案"><a href="#购物车解决方案" class="headerlink" title="购物车解决方案"></a>购物车解决方案</h3><p>用户在商品详细页点击加入购物车，提交商品 SKU 编号和购买数量，添加到购物车。当用户在未登录的情况下，将此购物车存入 cookies , 在用户登陆的情况下，将购物车数据存入 redis 。如果用户登陆时，cookies 中存在购物车，需要将 cookies 的购物车合并到 redis 中存储.<br><a id="more"></a><br>购物车数据存储结构：<br><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%88%97%E8%A1%A8%E6%A8%A1%E5%9E%8B.png" alt="购物车数据存储结构"></p><p>购物车实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cart</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;<span class="comment">// 对每一个商家购物车的封装</span></span><br><span class="line"><span class="keyword">private</span> String sellerId;<span class="comment">// 商家ID</span></span><br><span class="line"><span class="keyword">private</span> String sellerName;<span class="comment">// 商家名称</span></span><br><span class="line"><span class="keyword">private</span> List&lt;TbOrderItem&gt; orderItemList;<span class="comment">// 购物车明细</span></span><br><span class="line"> <span class="comment">// setter getter方法   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Cookie 存储购物车</strong></p><p>服务实现层：向购物车列表中添加物品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cart&gt; <span class="title">addGoodsToCartList</span><span class="params">(List&lt;Cart&gt; cartList, Long itemId, Integer num)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 根据skuID （itemId）查询商品明细sku的对象</span></span><br><span class="line">    TbItem item = itemMapper.selectByPrimaryKey(itemId);</span><br><span class="line">    <span class="keyword">if</span> (item == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"商品不存在"</span>);</span><br><span class="line">    <span class="comment">// 时间差，比如在添加提交订单时，商品下架了</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">"1"</span>.equals(item.getStatus())) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"商品不存在"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 根据sku对象获取商家ID</span></span><br><span class="line">    String sellerId = item.getSellerId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 根据商家ID在购物车列表中查询购物车对象</span></span><br><span class="line">    Cart cart = searchCartBySellerId(cartList, sellerId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.如果购物车列表中不存在该商家ID对应的购物车对象</span></span><br><span class="line">    <span class="keyword">if</span> (cart == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 4.1创建该商家的购物车对象</span></span><br><span class="line">        cart = <span class="keyword">new</span> Cart();</span><br><span class="line">        cart.setSellerId(sellerId);</span><br><span class="line">        cart.setSellerName(item.getSeller());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建购物车明细对象</span></span><br><span class="line">        List&lt;TbOrderItem&gt; orderItemList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        TbOrderItem orderItem = createOrderItem(item, num);</span><br><span class="line">        orderItemList.add(orderItem);</span><br><span class="line"></span><br><span class="line">        cart.setOrderItemList(orderItemList);</span><br><span class="line">        <span class="comment">// 4.2将该购物车对象添加到购物车列表中</span></span><br><span class="line">        cartList.add(cart);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123; <span class="comment">// 5. 如果购物车列表中存在该商家ID对应的购物车对象</span></span><br><span class="line">        <span class="comment">// 然后判断购物车对象中是否存在该商品的明细对象</span></span><br><span class="line">        TbOrderItem orderItem = searchOrderItemByItemId(cart.getOrderItemList(), itemId);</span><br><span class="line">        <span class="keyword">if</span> (orderItem == <span class="keyword">null</span>) &#123; <span class="comment">// 5.1 如果明细列表中不存在，创建明细对象添加到购物车对象中</span></span><br><span class="line">            <span class="comment">// 创建购物车明细对象</span></span><br><span class="line">            orderItem = createOrderItem(item, num);</span><br><span class="line">            cart.getOrderItemList().add(orderItem);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">// 5.2 如果明细列表中存在，则增加对应的数量</span></span><br><span class="line">            orderItem.setNum(orderItem.getNum()+num);<span class="comment">// 更改数量</span></span><br><span class="line">            orderItem.setTotalFee( <span class="keyword">new</span> BigDecimal(orderItem.getPrice().doubleValue()*orderItem.getNum()) );<span class="comment">// 更改价格</span></span><br><span class="line">            <span class="keyword">if</span>(orderItem.getNum()&lt;<span class="number">1</span>) cart.getOrderItemList().remove(orderItem);<span class="comment">// 当明细的数量小于1时移除</span></span><br><span class="line">            <span class="keyword">if</span> (cart.getOrderItemList().size()&lt;<span class="number">1</span>) cartList.remove(cart);<span class="comment">// 当购物车的明细项数为0时，移除购物车列表该对象</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cartList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据商家ID在购物车列表中查询该商家的购物车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cartList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sellerId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Cart <span class="title">searchCartBySellerId</span><span class="params">(List&lt;Cart&gt; cartList, String sellerId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Cart cart :cartList) &#123;</span><br><span class="line"><span class="keyword">if</span> (sellerId.equals(cart.getSellerId())) &#123;</span><br><span class="line"><span class="keyword">return</span> cart;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的购物明细对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> TbOrderItem <span class="title">createOrderItem</span><span class="params">(TbItem item, Integer num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&lt;<span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"非法数量"</span>);</span><br><span class="line">TbOrderItem order = <span class="keyword">new</span> TbOrderItem();</span><br><span class="line">order.setGoodsId(item.getGoodsId());</span><br><span class="line">order.setItemId(item.getId());</span><br><span class="line">order.setNum(num);</span><br><span class="line">order.setPicPath(item.getImage());</span><br><span class="line">order.setPrice(item.getPrice());</span><br><span class="line">order.setSellerId(item.getSellerId());</span><br><span class="line">order.setTitle(item.getTitle());</span><br><span class="line">order.setTotalFee(<span class="keyword">new</span> BigDecimal( item.getPrice().doubleValue()*num ));</span><br><span class="line"><span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在购物车明细列表中，根据SKUID查询购物车明细对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderItemList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> itemId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> TbOrderItem <span class="title">searchOrderItemByItemId</span><span class="params">(List&lt;TbOrderItem&gt; orderItemList, Long itemId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(TbOrderItem orderItem : orderItemList) &#123;</span><br><span class="line"><span class="keyword">if</span> (orderItem.getItemId().longValue()==itemId.longValue()) &#123;</span><br><span class="line"><span class="keyword">return</span> orderItem;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车列表</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findCartList"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cart&gt; <span class="title">findCartList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String cartListString = util.CookieUtil.getCookieValue(request, <span class="string">"cartList"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="keyword">if</span> (cartListString == <span class="keyword">null</span> || cartListString.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">cartListString = <span class="string">"[]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Cart&gt; cartList_cookie = JSON.parseArray(cartListString, Cart.class);</span><br><span class="line"><span class="keyword">return</span> cartList_cookie;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加商品到购物车</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> itemId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/addGoodsToCartList"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">addGoodsToCartList</span><span class="params">(Long itemId, Integer num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;Cart&gt; cartList = findCartList();<span class="comment">// 获取购物车列表</span></span><br><span class="line">cartList = cartService.addGoodsToCartList(cartList, itemId, num);</span><br><span class="line">util.CookieUtil.setCookie(request, response, <span class="string">"cartList"</span>, JSON.toJSONString(cartList), <span class="number">3600</span> * <span class="number">24</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"添加成功"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"添加失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端服务层：将逻辑实现放在服务层，以便重用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 购物车明细求和</span></span><br><span class="line"><span class="keyword">this</span>.sum=<span class="function"><span class="keyword">function</span>(<span class="params">cartList</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> total = &#123;<span class="attr">totalNum</span>:<span class="number">0</span>, <span class="attr">totalMoney</span>:<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;cartList.length;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> cart = cartList[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;cart.orderItemList.length;j++)&#123;</span><br><span class="line"><span class="keyword">var</span> item=cart.orderItemList[j];<span class="comment">// 购物车明细</span></span><br><span class="line">total.totalNum +=item.num;</span><br><span class="line">total.totalMoney += item.totalFee;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Redis 存储购物车</strong></p><p>判断当前用户是否登陆，如果未登录采用 Cookie 存储，如果登录则采用 Redis 存储。登录后要进行 Cookie 购物车与 Redis 购物车的合并操作，并清除 Cookie 购物车。</p><ol><li>首先修改 spring-security 配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;http pattern="/cart/*.do" security="none"&gt;&lt;/http&gt; --&gt;</span><span class="comment">&lt;!-- 这种方式会导致不会经过登录认证操作，无法获取登录用户名 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--   entry-point-ref  入口点引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">use-expressions</span>=<span class="string">"false"</span> <span class="attr">entry-point-ref</span>=<span class="string">"casProcessingFilterEntryPoint"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/cart/*.do"</span> <span class="attr">access</span>=<span class="string">"IS_AUTHENTICATED_ANONYMOUSLY"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/**"</span> <span class="attr">access</span>=<span class="string">"ROLE_USER"</span>/&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">csrf</span> <span class="attr">disabled</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- custom-filter为过滤器， position 表示将过滤器放在指定的位置上，before表示放在指定位置之前  ，after表示放在指定的位置之后  --&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">"casAuthenticationFilter"</span>  <span class="attr">position</span>=<span class="string">"CAS_FILTER"</span> /&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">"requestSingleLogoutFilter"</span> <span class="attr">before</span>=<span class="string">"LOGOUT_FILTER"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">"singleLogoutFilter"</span> <span class="attr">before</span>=<span class="string">"CAS_FILTER"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之前配置的过滤购物车拦截的方式，会导致该逻辑不会经过spring security的生命周期。那么在 CartController 中就无法通过 <code>SecurityContextHolder.getContext().getAuthentication().getName()</code> 的方式来获取当前登录用户名。报空指针异常。</p><p>access=”IS_AUTHENTICATED_ANONYMOUSLY” 用于设置资源可以在不登陆时可以访问。此 配 置 与 security=”none” 的 区 别 在 于 当 用 户 未 登 陆 时 获 取 登 陆 人 账 号 的 值 为 anonymousUser ，而 security=”none”的话，无论是否登陆都不能获取登录人账号的值。</p><ol><li>服务层实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cart&gt; <span class="title">findCartListFromRedis</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// System.out.println("从redis中获取购物车数据");</span></span><br><span class="line">    List&lt;Cart&gt; cartList = (List&lt;Cart&gt;) redisTemplate.boundHashOps(<span class="string">"cartList"</span>).get(username);</span><br><span class="line">    <span class="keyword">if</span>(cartList == <span class="keyword">null</span>) cartList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> cartList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCartListToRedis</span><span class="params">(String username, List&lt;Cart&gt; cartList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// System.out.println("向Redis中存储购物车数据");</span></span><br><span class="line">    redisTemplate.boundHashOps(<span class="string">"cartList"</span>).put(username, cartList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>控制层实现，通过判断用户是否登录来选择从cookie还是redis中读取数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findCartList"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cart&gt; <span class="title">findCartList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前登录用户名</span></span><br><span class="line">    String username = SecurityContextHolder.getContext().getAuthentication().getName();</span><br><span class="line">    <span class="comment">// 从cookie中读取购物车数据</span></span><br><span class="line">    String cookieValue = util.CookieUtil.getCookieValue(request, <span class="string">"cartList"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="keyword">if</span> (cookieValue == <span class="keyword">null</span> || <span class="string">""</span>.equals(cookieValue)) cookieValue = <span class="string">"[]"</span>;</span><br><span class="line">    List&lt;Cart&gt; cartList_cookie = JSON.parseArray(cookieValue, Cart.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (username.equals(<span class="string">"anonymousUser"</span>)) &#123;<span class="comment">// 如果未登录从cookie中读取</span></span><br><span class="line">        <span class="comment">// System.out.println("从cookie中读取");</span></span><br><span class="line">        <span class="keyword">return</span> cartList_cookie;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;<span class="comment">// 用户已登录从redis中读取</span></span><br><span class="line">        List&lt;Cart&gt; cartList_redis = cartService.findCartListFromRedis(username);</span><br><span class="line">        <span class="keyword">if</span> (cartList_cookie.size()&gt;<span class="number">0</span>) &#123;<span class="comment">// 本地购物车未合并</span></span><br><span class="line">            <span class="comment">// System.out.println("合并本地和redis购物车数据");</span></span><br><span class="line">            <span class="comment">// 合并本地和redis购物车数据</span></span><br><span class="line">            cartList_redis = cartService.mergeCartList(cartList_cookie, cartList_redis);</span><br><span class="line">            <span class="comment">// 在存储到redis中</span></span><br><span class="line">            cartService.addCartListToRedis( username, cartList_redis);</span><br><span class="line">            <span class="comment">// 清空本地缓存购物车</span></span><br><span class="line">            util.CookieUtil.deleteCookie(request, response, <span class="string">"cartList"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cartList_redis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>合并购物车</strong></p><p>当用户登录时，需要将存储在cookie中的购物车数据添加到redis服务器中。同时清空本地cookie中的数据。已达到合并的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cart&gt; <span class="title">mergeCartList</span><span class="params">(List&lt;Cart&gt; cartList1, List&lt;Cart&gt; cartList2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cartList1==<span class="keyword">null</span> &amp;&amp; cartList2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Cart&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Cart cart : cartList2) &#123;</span><br><span class="line">        <span class="keyword">for</span>(TbOrderItem orderItem : cart.getOrderItemList()) &#123;</span><br><span class="line">            cartList1 = addGoodsToCartList(cartList1, orderItem.getItemId(), orderItem.getNum());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cartList1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环一个 cartList 中的 orderItem 数据，然后逐个添加到另一个 cartList 中。然后控制层在 findCartList 中调用，因为用户登录之后，进入购物车页面时必定经过查询购物车数据的方法。在前面的控制层实现中已经给出代码实现。</p><p><em>跳板页的思想</em></p><p>用户添加购物车完成之后，如果需要购买那么必须先完成登录。该系统使用cas实现的单点登录。如果我们通过直接跳转到 <code>http://localhost:9100/cas/login</code> cas服务器地址来完成登录，这样会出现登录完成之后页面会跳转到cas服务器的登录成功的提示页面，而不是我们想要的购物车页面。</p><p>我们可以采用一种跳板页的方法来实现。点击登录然后跳转到跳板页 login.html。但是由于当前状态为未登录，该页面会被Spring Security拦截然后重定向到cas服务器的登录页，登录成功后会重新回到 login.html 页面。然后在 login.html 页面中执行 js 回跳到购物车页面即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- login.html中添加跳转页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">location.href=<span class="string">"cart.html"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="跨域解决方案与提交订单"><a href="#跨域解决方案与提交订单" class="headerlink" title="跨域解决方案与提交订单"></a>跨域解决方案与提交订单</h3><p><strong>JS  跨域请求</strong></p><p>通过 js 在不同的域之间进行数据传输或通信，比如用 ajax 向一个不同的域请求数据，或者通过 js 获取页面中不同域的框架中(iframe)的数据。只要<strong>协议、域名、端口</strong>有任何一个不同，都被当作是不同的域。这也是面试中经常会问到的一个问题。</p><p>商品详情页面点击提交订单，就会异步调用购物车模块的添加商品到购物车的逻辑。该过程就会用到跨域操作。如果不考虑跨域问题会出现如下问题。点击添加购物车没有响应。<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98.png" alt="跨域存在的问题"></p><p>  <strong>跨域解决方案 CORS</strong></p><p>CORS 是一个 W3C 标准，全称是”跨域资源共享”（Cross-origin resource sharing）。CORS 需要浏览器和服务器同时支持。除了 IE10 以前的浏览器之外其它浏览器都支持。（IE并未实现W3C标准）</p><p>CORS 可以解决跨越问题，允许浏览器向跨源服务器发出 XMLHttpRequest 请求。当存在跨域请求时，浏览器会自动添加附加的头信息，有时候会多一次附加请求，但是用户不会察觉。实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。</p><p>请求过程：首先浏览器向服务器发送一个预请求，服务器返回一个 Preflight Response，如果服务器同意跨域请求，那么浏览器才能继续发送跨域请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务器只需要配置 response 响应头信息即可</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://localhost:9105"</span>);<span class="comment">// 允许跨域请求</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);<span class="comment">// 允许携带cookie （方法中如果会操作cookie的话，必须添加该配置）</span></span><br></pre></td></tr></table></figure><p><code>Access-Control-Allow-Origin</code> 的配置表示服务器支持跨域请求的地址。此时也就是允许 <code>http://localhost:9105</code> 该地址的跨域请求。</p><p>另外 Spring 4.2 版本之后支持注解式跨域请求<code>@CrossOrigin(origins=&quot;http://localhost:9105&quot;,allowCredentials=&quot;true&quot;)    // spring 4.2版本以上支持注解的方式，allowCredentials=&quot;true&quot;可以缺省</code></p><p>CORS 请求默认不发送 Cookie 和 HTTP 认证信息。如果要把 Cookie 发到服务器，一方面要服务器同意，指定 Access-Control-Allow-Credentials 字段。另一方面，<strong>开发者必须在 AJAX 请求中打开 withCredentials 属性</strong>。否则，即使服务器同意发送 Cookie，浏览器也不会发送（点击添加购物车，登录之后，cookie中的购物车数据不会合并到用户的购物车中）。或者，服务器要求设置 Cookie，浏览器也不会处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加到购物车</span></span><br><span class="line">$scope.addToCart=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="comment">// alert('sku_id:'+ $scope.sku.id);</span></span><br><span class="line"> <span class="comment">// 执行跨域请求</span></span><br><span class="line"> $http.get(<span class="string">"http://localhost:9107/cart/addGoodsToCartList.do?itemId="</span>+ $scope.sku.id +<span class="string">"&amp;num="</span> </span><br><span class="line"> + $scope.num, &#123;<span class="string">'withCredentials'</span>:<span class="literal">true</span>&#125;).success(</span><br><span class="line"> <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (response.success) &#123;</span><br><span class="line">location.href=<span class="string">"http://localhost:9107/cart.html"</span>;<span class="comment">// 跳转到购物车页面</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(response.message);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结算页信息显示</strong></p><p><em>收件人的的选择</em></p><p>点击购物车进入结算页，首先会让用户选择收货地址以及收货人信息。而收获人信息是个用户进行关联的，所以将该模块放置在user模块中，在 AddressService 中新增一个通过用户ID查询收货人的信息的方法。然后在controller层，通过SpringSecurityu获取当前登录用户的ID，然后通过服务方法从数据库中取出用户的收获信息列表。前端以列表的信息显示出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询用户的收货地址信息</span></span><br><span class="line">$scope.findAddress=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    cartService.findAddress().success(</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">                $scope.addressList = response;</span><br><span class="line">                <span class="comment">// 查找默认地址</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;$scope.addressList.length;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>($scope.addressList[i].isDefault==<span class="string">'1'</span>)&#123;</span><br><span class="line">                        $scope.address=$scope.addressList[i];<span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择地址</span></span><br><span class="line">$scope.selectAddress=<span class="function"><span class="keyword">function</span>(<span class="params">address</span>)</span>&#123;</span><br><span class="line">    $scope.address = address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该地址是否被选</span></span><br><span class="line">$scope.isSelectedAddress=<span class="function"><span class="keyword">function</span>(<span class="params">address</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ($scope.address == address);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>支付方式</em></p><p>通过 <code>$scope.order={paymentType:&#39;1&#39;};</code>中的paymentType字段来绑定页面的支付方式，1表示微信支付，2表示货到付款 。</p><p><em>商品清单与金额显示</em></p><p>cartController.js 中之前实现了获取购物车的信息。此处的商品清单也可以通过该方法，从redis中获取用户购买的信息。然后通过 ng-repeat 循环遍历显示即可。合计金额也可以通过 sum 方法计算求和。</p><p>  <strong>分布式 ID  生成器</strong></p><p>snowflake 算法。由 Twitter 推出的一款开源的<strong>分布式自增ID</strong>生成算法。</p><p>结构：</p><p>0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000</p><p>第一位为未使用，接下来的41位为毫秒级时间(41位的长度可以使用69年)，然后是5位datacenterId和5位workerId(10位的长度最多支持部署1024个节点），最后12位是毫秒内的计数（12位的计数顺序号支持每个节点每毫秒产生4096个ID序号）</p><p>一共加起来刚好64位，为一个Long型。(转换成字符串后长度最多19)</p><p>snowflake生成的ID整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和workerId作区分不同机器之间也就不会出现重复ID的情况），并且效率较高。经测试snowflake每秒能够产生26万个ID。</p><p><em>注：UUID 存在的问题：128位（16字节）较占内存，无法生成有序的ID。</em></p><p>IdWorker 生成器工具类位于 common 工程。创建一个 IdWorker 对象，然后调用 nextId() 即可生成一个全局唯一ID。在Spring工程中，我们可以通过配置的方式来构造bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"idWorker"</span> <span class="attr">class</span>=<span class="string">"util.IdWorker"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进程 ID --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据中心 ID --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>保存订单</strong></p><p>取出 redis 中存储的用户购物车数据，生成对应的订单项，采用 snowflake 算法生成唯一的订单ID，然后根据商品的SKU信息生成多个订单项。</p><h3 id="微信二维码支付模块"><a href="#微信二维码支付模块" class="headerlink" title="微信二维码支付模块"></a>微信二维码支付模块</h3><p><strong>二维码生成插件 qrious</strong><br>    qrious 是一款基于 HTML5 Canvas 的纯 JS 二维码生成插件。通过 qrious.js 可以快速生成各种二维码，你可以控制二维码的尺寸颜色，还可以将生成的二维码进行 Base64 编码。</p><p>配置参数：<br><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/qriousc%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.png" alt="qrious配置参数"></p><p><strong>微信扫码支付</strong></p><p>商户系统按微信支付协议生成支付二维码，用户再用微信“扫一扫”完成支付的模式。该模式适用于 PC 网站支付、实体店单品或订单支付、媒体广告支付等场景。</p><p>具体开发文档：<a href="https://pay.weixin.qq.com/wiki/doc/api/index.html" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/index.html</a> 主要了解Native支付的统一下单和查询订单API。</p><p>实现原理：首先引入微信支付的sdk依赖。使用 <strong>HttpClient 工具类</strong>，来模拟浏览器行为，去调用微信支付的 api 接口，向该地址提交相应的数据，然后获取结果。</p><p>由于使用微信扫码支付的申请条件比较苛刻，所以这一模块无法完成测试。提供的公共号、商户号、秘钥信息等，无法完成签名。返回的信息为签名错误。</p><p><em>服务接口层</em></p><p>pay-interface </p><p><em>服务实现层</em></p><p>pay-service 依赖 pay 接口，和common模块（将 httpclient 工具类放在公共层、以及微信支付的基本信息配置），spring dubbo 依赖以及微信的 SDK。实现生成二维码和查询订单状态的方法。</p><p><em>控制层</em></p><p>cart-web 模块依赖支付服务，生成订单之后进入支付页面，调用服务层的生成二维码的方法，得到返回的 code_url ，然后让前端 qrious 插件根据该 url 去生成二维码即可。然后后端定时调用查询订单状态的方法，每隔3秒钟去查询订单支付状态，同时每隔五分钟之后就提示二维码支付超时，然后前端就收到超时信息之后，可以将其显示出来或者重新生成二维码信息。同时如果前端页面被关闭，后端会在五分钟之后返回超时的提示。</p><p><strong>支付日志</strong></p><p> （1）在用户下订单时，判断如果为微信支付，就向支付日志表添加一条记录，信息包括支付总金额、订单 ID（一个支付日志对应多个订单）、用户 ID 、下单时间等信息，支付状态为 0（未支付）<br>    （2）生成的支付日志对象放入 redis 中，以用户 ID 作为 key，这样在生成支付二维码时就可以从 redis 中提取支付日志对象中的金额和订单号。<br>    （3）当用户支付成功后，修改支付日志的支付状态为 1（已支付），并记录微信传递给我们的交易流水号。根据订单 ID（多个）修改订单的状态为 2（已付款）。同时删除缓存中的支付日志。</p><h3 id="秒杀解决方案"><a href="#秒杀解决方案" class="headerlink" title="秒杀解决方案"></a>秒杀解决方案</h3><p>秒杀的特点就是在特定的时间对限量的商品进行抢购。在该时间可能存在很高的并发请求，而造成对后端数据库的巨大压力。此时可以采用缓存机制，来避免用户直接与数据库的交互。<em>秒杀时说有数据都存储在缓存中，只有当商品抢购完或者时间到期时才将缓存中的数据一次性存入数据库中。</em></p><p>模块需求：</p><p>（1）商家提交秒杀商品申请，录入秒杀商品数据，主要包括：商品标题、原价、秒杀价、商品图片、介绍等信息</p><p>（2）运营商审核秒杀申请</p><p>（3）秒杀频道首页列出正在秒杀的商品，用户点击秒杀商品图片跳转到秒杀商品详细页。</p><p>（4）商品详细页显示秒杀商品信息，点击立即抢购实现秒杀下单，下单时扣减库存。当库存为 0 或不在活动期范围内时无法秒杀。</p><p>（5）秒杀下单成功，直接跳转到支付页面（微信扫码），支付成功，跳转到成功页，填写收货地址、电话、收件人等信息，完成订单。</p><p>（6）当用户秒杀下单 5 分钟内未支付，取消预订单，调用微信支付的关闭订单接口，恢复库存。</p><p><strong>秒杀频道首页</strong></p><p>seckill 模块服务层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回当前正在参与秒杀的商品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TbSeckillGoods&gt; <span class="title">findList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;TbSeckillGoods&gt; seckillGoodsList = redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).values();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (seckillGoodsList==<span class="keyword">null</span> || seckillGoodsList.size()==<span class="number">0</span>) &#123; <span class="comment">// 当前缓存还没有数据</span></span><br><span class="line">        TbSeckillGoodsExample example = <span class="keyword">new</span> TbSeckillGoodsExample();</span><br><span class="line">        Criteria criteria = example.createCriteria();</span><br><span class="line">        criteria.andStatusEqualTo(<span class="string">"1"</span>);<span class="comment">// 已审核状态</span></span><br><span class="line">        criteria.andStockCountGreaterThan(<span class="number">0</span>);<span class="comment">// 库存量&gt;0</span></span><br><span class="line">        criteria.andStartTimeLessThanOrEqualTo(<span class="keyword">new</span> Date());<span class="comment">// 当前时间大于等于开始时间</span></span><br><span class="line">        criteria.andEndTimeGreaterThanOrEqualTo(<span class="keyword">new</span> Date());<span class="comment">// 当前时间晚于结束时间</span></span><br><span class="line">        seckillGoodsList = seckillGoodsMapper.selectByExample(example );<span class="comment">// 从数据库中读取数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(TbSeckillGoods seckillGood : seckillGoodsList) &#123;<span class="comment">// 将当前时间的秒杀商品按商品ID存入缓存</span></span><br><span class="line">            redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).put(seckillGood.getId(), seckillGood);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"从数据库中读取秒杀商品并放入缓存"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"从缓存中读取秒杀商品数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> seckillGoodsList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TbSeckillGoods <span class="title">findOneFromRedis</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (TbSeckillGoods) redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).get(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中查询当前秒杀的商品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findList"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TbSeckillGoods&gt; <span class="title">findList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> seckillGoodsService.findList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findOneFromRedis"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> TbSeckillGoods <span class="title">findOneFromRedis</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> seckillGoodsService.findOneFromRedis(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端服务层</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.service(<span class="string">'seckillGoodsService'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$http</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取列表数据绑定到表单中</span></span><br><span class="line"><span class="keyword">this</span>.findList=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> $http.get(<span class="string">'seckillGoods/findList.do'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.findOne=<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> $http.get(<span class="string">'seckillGoods/findOneFromRedis.do?id='</span>+id); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.submitOrder=<span class="function"><span class="keyword">function</span>(<span class="params">seckillId</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> $http.get(<span class="string">'seckillOrder/submitOrder.do?seckillId='</span>+seckillId);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>前端控制层</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">app.controller(<span class="string">'seckillGoodsController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $location, $interval, seckillGoodsService</span>)</span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取列表数据绑定到表单中</span></span><br><span class="line">$scope.findList=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">seckillGoodsService.findList().success(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">$scope.list=response;</span><br><span class="line">&#125; </span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询实体点击秒杀首页商品的详情页时，跳转到详情页，传递商品的ID信息</span></span><br><span class="line">$scope.findOne=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">seckillGoodsService.findOne($location.search()[<span class="string">'id'</span>]).success(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">$scope.entity = response;</span><br><span class="line">totalSecond = <span class="built_in">Math</span>.floor((<span class="keyword">new</span> <span class="built_in">Date</span>($scope.entity.endTime).getTime() - (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()))/<span class="number">1000</span>);</span><br><span class="line">time = $interval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 倒计时的实现</span></span><br><span class="line"><span class="keyword">if</span> (totalSecond&gt;<span class="number">0</span>) &#123;</span><br><span class="line">$scope.timeString = convertSecondToTime(totalSecond);</span><br><span class="line">--totalSecond;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">"秒杀已结束"</span>);</span><br><span class="line">$interval.cancel(time);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">convertSecondToTime=<span class="function"><span class="keyword">function</span>(<span class="params">totalSecond</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> sec = totalSecond%<span class="number">60</span>;</span><br><span class="line">totalSecond = <span class="built_in">Math</span>.floor(totalSecond/<span class="number">60</span>);</span><br><span class="line"><span class="keyword">var</span> min = totalSecond%<span class="number">60</span>;</span><br><span class="line">totalSecond = <span class="built_in">Math</span>.floor(totalSecond/<span class="number">60</span>);</span><br><span class="line"><span class="keyword">var</span> hour = totalSecond%<span class="number">24</span>;</span><br><span class="line">totalSecond = <span class="built_in">Math</span>.floor(totalSecond/<span class="number">24</span>);</span><br><span class="line"><span class="keyword">var</span> day = totalSecond;</span><br><span class="line"><span class="keyword">return</span> day==<span class="number">0</span>? hour+<span class="string">":"</span>+min+<span class="string">":"</span>+sec : day+<span class="string">"天 "</span>+hour+<span class="string">":"</span>+min+<span class="string">":"</span>+sec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$scope.submitOrder=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">seckillGoodsService.submitOrder($scope.entity.id).success(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (response.success) &#123;</span><br><span class="line">alert(<span class="string">"抢购成功，请在五分钟内付款"</span>);</span><br><span class="line">location.href=<span class="string">"pay.html"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(response.message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>秒杀倒计时效果</strong></p><p>$interval 服务用来间歇性处理某事务</p><p>格式：$interval(执行的函数,间隔的毫秒数,运行次数);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">time = $interval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 倒计时的实现</span></span><br><span class="line">    <span class="keyword">if</span> (totalSecond&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        $scope.timeString = convertSecondToTime(totalSecond);<span class="comment">// 格式转换</span></span><br><span class="line">        --totalSecond;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">"秒杀已结束"</span>);</span><br><span class="line">        $interval.cancel(time); <span class="comment">// 退出定时任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><strong>秒杀提交订单</strong></p><p>服务层逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitOrder</span><span class="params">(Long seckillId, String userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从缓存中查询商品</span></span><br><span class="line">    TbSeckillGoods seckillGoods = (TbSeckillGoods) redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).get(seckillId);</span><br><span class="line">    <span class="comment">// 判断商品状态</span></span><br><span class="line">    <span class="keyword">if</span> (seckillGoods == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"商品不存在"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(seckillGoods.getStockCount()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"商品已抢购一空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 商品库存 -1</span></span><br><span class="line">    seckillGoods.setStockCount(seckillGoods.getStockCount()-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (seckillGoods.getStockCount() == <span class="number">0</span>) &#123;<span class="comment">// 商品被抢空</span></span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).delete(seckillId);<span class="comment">// 删除缓存中该商品</span></span><br><span class="line">        seckillGoodsMapper.updateByPrimaryKey(seckillGoods);<span class="comment">// 同步到数据库 </span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 更新秒杀商品中数据</span></span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).put(seckillId, seckillGoods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成订单信息</span></span><br><span class="line">    TbSeckillOrder order = <span class="keyword">new</span> TbSeckillOrder();</span><br><span class="line">    order.setId(idWorker.nextId());<span class="comment">// 生成订单ID</span></span><br><span class="line">    order.setSeckillId(seckillId);<span class="comment">// 秒杀商品ID</span></span><br><span class="line">    order.setMoney(seckillGoods.getCostPrice());<span class="comment">// 秒杀价格</span></span><br><span class="line">    order.setUserId(userId);</span><br><span class="line">    order.setSellerId(seckillGoods.getSellerId()); <span class="comment">// 商家ID</span></span><br><span class="line">    order.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    order.setStatus(<span class="string">"0"</span>); <span class="comment">// 状态</span></span><br><span class="line">    redisTemplate.boundHashOps(<span class="string">"seckillOrder"</span>).put(userId, order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/submitOrder"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">submitOrder</span><span class="params">(Long seckillId)</span> </span>&#123;</span><br><span class="line">    String username = SecurityContextHolder.getContext().getAuthentication().getName();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"anonymousUser"</span>.equals(username)) &#123; <span class="comment">// 如果未登录</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"用户未登录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        seckillOrderService.submitOrder(seckillId, username);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"订单提交成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, e.getMessage());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"订单提交失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>秒杀支付</strong></p><p>用户抢购成功之后跳转到支付页面。调用微信二维码支付接口，生成二维码，用户支付完成之后跳转到收获人地址信息填写页面。超过五分钟未付款就取消订单，恢复redis中的库存量，同时关闭微信订单，防止用户支付无效的订单。由于微信支付接口无法测试该功能预留。</p><h3 id="SpringTask-任务调度"><a href="#SpringTask-任务调度" class="headerlink" title="SpringTask 任务调度"></a>SpringTask 任务调度</h3><p>实现上述秒杀功能之后，我想你一定也有和我一样的疑惑，那就是秒杀的商品什么时候从数据库中实时更新了，先前实现的逻辑只有在第一次访问秒杀系统时，即判断 redis 缓存中是否存在对应的商品信息，如果不存在就从数据库中取出数据同时还需要全量添加到缓存中。但是之后就一直从缓存中取数据。</p><p>此时就可以使用 SpringTask 任务调度来实现计划任务，即在某个时间点执行某件事。实现每秒钟去增量更新redis数据库中的秒杀商品信息。</p><p> <strong>Cron 表达式格式</strong><br>    Cron 表达式是一个字符串，字符串以 5 或 6 个空格隔开，分为 6 或 7 个域，每一个域代表一个含义，Cron 有如下两种语法格式：<br>（1）Seconds Minutes Hours DayofMonth Month DayofWeek Year<br>（2）Seconds Minutes Hours DayofMonth Month DayofWeek</p><p>每一个域可出现的字符如下：</p><ul><li>Seconds: 可出现”, - * /“四个字符，有效范围为 0-59 的整数</li><li>Minutes: 可出现”, - * /“四个字符，有效范围为 0-59 的整数</li><li>Hours: 可出现”, - * /“四个字符，有效范围为 0-23 的整数</li><li>DayofMonth: 可出现”, - * / ? L W C”八个字符，有效范围为 1-31 的整数</li><li>Month: 可出现”, - * /“四个字符，有效范围为 1-12 的整数或 JAN-DEC(英文单词的前三个字母)</li><li>DayofWeek: 可出现”, - * / ? L C #”四个字符，有效范围为 1-7 的整数或 SUN-SAT 两个范围。1表示星期天，2 表示星期一， 依次类推</li><li>Year: 可出现”, - * /“四个字符，有效范围为 1970-2099 年</li></ul><p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">(1)*: 表示匹配该域的任意值，假如在 Minutes 域使用, 即表示每分钟都会触发事件。</span><br><span class="line"></span><br><span class="line">(2)?: 只能用在 DayofMonth 和 DayofWeek 两个域。它也匹配域的任意值，但实际不会。因为DayofMonth 和 DayofWeek 会相互影响。例如想在每月的 20 日触发调度，不管 20 日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用，如果使用表示不管星期几都会触发，实际上并不是这样。</span><br><span class="line"></span><br><span class="line">(3)-: 表示范围，例如在 Minutes 域使用 5-20，表示从 5 分到 20 分钟每分钟触发一次</span><br><span class="line"></span><br><span class="line">(4)/: 表示起始时间开始触发，然后每隔固定时间触发一次，例如在 Minutes 域使用 5/20,则意味着 5 分钟触发一次，而 25，45 等分别触发一次.</span><br><span class="line"></span><br><span class="line">(5),: 表示列出枚举值值。例如：在 Minutes 域使用 5,20，则意味着在 5 和 20 分每分钟触发一次。</span><br><span class="line"></span><br><span class="line">(6)L: 表示最后，只能出现在 DayofWeek 和 DayofMonth 域，如果在 DayofWeek 域使用 5L,意味着在最后的一个星期四触发。</span><br><span class="line"></span><br><span class="line">(7)W: 表示有效工作日(周一到周五),只能出现在 DayofMonth 域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth 使用 5W，如果 5 号是星期六，则将在最近的工作日：星期五，即 4 号触发。如果 5 号是星期天，则在 6 号(周一)触发；如果 5 号在星期一到星期五中的一天，则就在 5 号触发。另外一点，W 的最近寻找不会跨过月份。</span><br><span class="line"></span><br><span class="line">(8)LW: 这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</span><br><span class="line"></span><br><span class="line">(9)#: 用于确定每个月第几个星期几，只能出现在 DayofMonth 域。例如在 4#2，表示某月的第二个星期三。</span><br><span class="line"></span><br><span class="line">Cron 表达式例子：</span><br><span class="line">0 0 10,14,16 * * ? 每天上午 10 点，下午 2 点，4 点</span><br><span class="line">0 0/30 9-17 * * ? 每天上午九点到下午五点每半小时</span><br><span class="line">0 0 12 ? * WED 表示每个星期三中午 12 点</span><br><span class="line">&quot;0 0 12 * * ?&quot; 每天中午 12 点触发</span><br><span class="line">&quot;0 15 10 ? * *&quot; 每天上午 10:15 触发</span><br><span class="line">&quot;0 15 10 * * ?&quot; 每天上午 10:15 触发</span><br><span class="line">&quot;0 15 10 * * ? *&quot; 每天上午 10:15 触发</span><br><span class="line">&quot;0 15 10 * * ? 2005&quot; 2005 年的每天上午 10:15 触发</span><br><span class="line">&quot;0 * 14 * * ?&quot; 在每天下午 2 点到下午 2:59 期间的每 1 分钟触发</span><br><span class="line">&quot;0 0/5 14 * * ?&quot; 在每天下午 2 点到下午 2:55 期间的每 5 分钟触发</span><br><span class="line">&quot;0 0/5 14,18 * * ?&quot; 在每天下午 2 点到 2:55 期间和下午 6 点到 6:55 期间的每 5 分钟触发</span><br><span class="line">&quot;0 0-5 14 * * ?&quot; 在每天下午 2 点到下午 2:05 期间的每 1 分钟触发</span><br><span class="line">&quot;0 10,44 14 ? 3 WED&quot; 每年三月的星期三的下午 2:10 和 2:44 触发</span><br><span class="line">&quot;0 15 10 ? * MON-FRI&quot; 周一至周五的上午 10:15 触发</span><br><span class="line">&quot;0 15 10 15 * ?&quot; 每月 15 日上午 10:15 触发</span><br><span class="line">&quot;0 15 10 L * ?&quot; 每月最后一日的上午 10:15 触发</span><br><span class="line">&quot;0 15 10 ? * 6L&quot; 每月的最后一个星期五上午 10:15 触发</span><br><span class="line">&quot;0 15 10 ? * 6L 2002-2005&quot; 2002 年至 2005 年的每月的最后一个星期五上午 10:15 触发</span><br><span class="line">&quot;0 15 10 ? * 6#3&quot; 每月的第三个星期五上午 10:15 触发</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">表达式</th><th>表示含义</th></tr></thead><tbody><tr><td style="text-align:left">0 0 10,14,16 <em> </em> ?</td><td>每天上午 10 点，下午 2 点，4 点</td></tr><tr><td style="text-align:left">0 0/30 9-17 <em> </em> ?</td><td>每天上午九点到下午五点每半小时</td></tr><tr><td style="text-align:left">0 0 12 ? * WED</td><td>每个星期三中午 12 点</td></tr><tr><td style="text-align:left">0 0 12 <em> </em> ?</td><td>每天中午 12 点触发</td></tr><tr><td style="text-align:left">0 15 10 ? <em> </em></td><td>每天上午 10:15 触发</td></tr><tr><td style="text-align:left">0 15 10 <em> </em> ?</td><td>每天上午 10:15 触发</td></tr><tr><td style="text-align:left">0 15 10 <em> </em> ? *</td><td>每天上午 10:15 触发</td></tr><tr><td style="text-align:left">0 15 10 <em> </em> ? 2018</td><td>2018 年的每天上午 10:15 触发</td></tr><tr><td style="text-align:left">0 <em> 14 </em> * ?</td><td>在每天下午 2 点到下午 2:59 期间的每 1 分钟触发</td></tr><tr><td style="text-align:left">0 0/5 14 <em> </em> ?</td><td>在每天下午 2 点到下午 2:55 期间的每 5 分钟触发</td></tr><tr><td style="text-align:left">0 0-5 14 <em> </em> ?</td><td>每天下午 2 点到下午 2:05 期间的每 1 分钟触发</td></tr><tr><td style="text-align:left">0 10,44 14 ? 3 WED</td><td>每年三月的星期三的下午 2:10 和 2:44 触发</td></tr><tr><td style="text-align:left">0 15 10 ? * MON-FRI</td><td>周一至周五的上午 10:15 触发</td></tr><tr><td style="text-align:left">0 15 10 ? * 6L</td><td>每月的最后一个星期五上午 10:15 触发</td></tr><tr><td style="text-align:left">0 15 10 ? * 6L 2002-2005</td><td>2002 年至 2005 年的每月的最后一个星期五上午 10:15 触发</td></tr><tr><td style="text-align:left">0 15 10 ? * 6#3</td><td>每月的第三个星期五上午 10:15 触发</td></tr></tbody></table><p><strong>秒杀商品的增量更新和过期删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TbSeckillGoodsMapper seckillGoodsMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定时刷新秒杀商品</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Scheduled</span>(cron=<span class="string">"0/5 * * * * ?"</span>)<span class="comment">// 每分钟执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshSeckillGoods</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"执行了增量更新任务调度"</span>+<span class="keyword">new</span> Date()); </span><br><span class="line"><span class="comment">// 查询 Redis 中所有商品键集合</span></span><br><span class="line">List ids =  <span class="keyword">new</span> ArrayList&lt;&gt;(redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).keys()); <span class="comment">// 第一次执行为 []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询正在秒杀的商品列表</span></span><br><span class="line">TbSeckillGoodsExample example = <span class="keyword">new</span> TbSeckillGoodsExample();</span><br><span class="line">Criteria criteria = example.createCriteria();</span><br><span class="line">criteria.andStatusEqualTo(<span class="string">"1"</span>);<span class="comment">// 已审核状态</span></span><br><span class="line">criteria.andStockCountGreaterThan(<span class="number">0</span>);<span class="comment">// 库存量&gt;0</span></span><br><span class="line">criteria.andStartTimeLessThanOrEqualTo(<span class="keyword">new</span> Date());<span class="comment">// 当前时间大于等于开始时间</span></span><br><span class="line">criteria.andEndTimeGreaterThanOrEqualTo(<span class="keyword">new</span> Date());<span class="comment">// 当前时间晚于结束时间</span></span><br><span class="line"><span class="keyword">if</span>(ids.size()&gt;<span class="number">0</span>)</span><br><span class="line">criteria.andIdNotIn(ids);<span class="comment">// 排除已存在的商品，实现增量更新</span></span><br><span class="line">List&lt;TbSeckillGoods&gt; seckillGoodsList = seckillGoodsMapper.selectByExample(example );<span class="comment">// 从数据库中读取数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 装入缓存</span></span><br><span class="line"><span class="keyword">for</span>( TbSeckillGoods seckill:seckillGoodsList )&#123;</span><br><span class="line">redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).put(seckill.getId(), seckill);</span><br><span class="line">System.out.println(<span class="string">"添加商品："</span> + seckill.getId());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"将"</span>+seckillGoodsList.size()+<span class="string">"条商品装入缓存"</span>);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 每秒钟在缓存中查询已过期的商品，发现过期的秒杀商品后同步到数据库，并在缓存中移除该秒杀商品</span></span><br><span class="line"><span class="meta">@Scheduled</span>(cron=<span class="string">"* * * * * ?"</span>)<span class="comment">// 每秒钟执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeSeckillGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"执行了删除过期商品任务调度"</span>+<span class="keyword">new</span> Date()); </span><br><span class="line">List&lt;TbSeckillGoods&gt; seckillGoodsList =redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).values();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( TbSeckillGoods seckillGood : seckillGoodsList) &#123;</span><br><span class="line"><span class="keyword">if</span> (seckillGood.getEndTime().getTime()&lt;<span class="keyword">new</span> Date().getTime()) &#123;</span><br><span class="line">redisTemplate.boundHashOps(<span class="string">"seckillGoods"</span>).delete(seckillGood.getId());<span class="comment">// 删除缓存数据</span></span><br><span class="line">seckillGoodsMapper.updateByPrimaryKey(seckillGood);<span class="comment">// 向数据库保存记录</span></span><br><span class="line">System.out.println(<span class="string">"移除秒杀商品："</span>+seckillGood.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Maven Profile</strong></p><p>项目开发中会用到很多配置文件，比如 mysql 、redis 以及其他很多的 properties 配置文件。而在我们开发和部署的时候（开发环境、测试环境、生产环境），这些配置文件往往是不同的。而如果需要我们每次去切换也是非常麻烦的。而 Maven Profile 就可以帮我们完成动态选择配置文件的工作。profile 可以让我们定义一系列的配置信息，然后指定其激活条件。</p><ol><li><strong>动态切换模块的端口号</strong>，比如对于 page-web 模块来说，默认端口号为9105.</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置默认属性 方式一</span></span><br><span class="line"><span class="comment">  &lt;properties&gt;</span></span><br><span class="line"><span class="comment">&lt;port&gt;9105&lt;/port&gt;</span></span><br><span class="line"><span class="comment">  &lt;/properties&gt; </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>9105<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span><span class="comment">&lt;!-- 配置默认属性 方式二 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>9205<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>$&#123;port&#125;<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们执行命令 tomcat7:run -P pro 发现以 9205 端口启动，执行命令 tomcat7:run -P dev 发现以 9105 端口启动。 （-P 后边为 profile 的 id）而当我们不指定环境时，默认环境为开发环境。上述代码提供两种配置方式。</p><ol start="2"><li><strong>切换数据库连接配置</strong></li></ol><p>对于数据库操作模块（dao）在 <code>src/main/resources/properties/</code>目录下有 db.properties 配置文件。其中配置了连接数据库的相关配置，数据库驱动、url、用户名、密码等。</p><p>(1) 首先编写不同的环境配置文件，在资源文件夹目录下创建 filter 文件夹，添加多个不同环境下配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 生成环境下的配置文件</span><br><span class="line">env.jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">env.jdbc.url=jdbc:mysql://localhost:3306/pinyougoudb?characterEncoding=utf-8</span><br><span class="line">env.jdbc.username=root</span><br><span class="line">env.jdbc.password=123456</span><br></pre></td></tr></table></figure><p>将原来的 db.properties 文件修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=$&#123;env.jdbc.driver&#125;</span><br><span class="line">jdbc.url=$&#123;env.jdbc.url&#125;</span><br><span class="line">jdbc.username=$&#123;env.jdbc.username&#125;</span><br><span class="line">jdbc.password=$&#123;env.jdbc.password&#125;</span><br></pre></td></tr></table></figure><p>(2)  定义 Profile</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">env</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)  资源过滤与变量替换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 资源过滤与变量替换 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span>&gt;</span>src/main/resources/filters/db_$&#123;env&#125;.properties<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>maven filter可利用指定的xxx.properties文件中对应的key=value对资源文件中的${key}进行替换，最终把你的资源文件中的 username=${key}替换成 username=value</code></p><p>即可完成对配置文件的动态选择。<strong>打包</strong>：对 dao 工程执行 <code>package -P pro</code>打包为jar文件。解压 jar 文件后可以发现 db.properties 配置中被替换为生产环境。<strong>测试运行</strong>时通过 <code>install -P pro</code> 执令，将生产环境添加到本地仓库中。</p><p><strong>切换注册中心连接配置</strong></p><p>在每一个项目中都存在对注册中心的配置，而这个 IP 地址信息在生产环境下肯定是需要进行修改的。</p><ol><li>首先集中配置注册中心地址。</li></ol><p>(1) 在 common 模块下的<code>src/main/resources/properties</code>目录中创建 dubbox.properties 配置文件并配置全局dubbox的地址：<code>address=192.168.25.130:2181</code></p><p>(2) Spring 目录下创建 spring 配置文件 applicationContext-dubbox.xml 配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath*:properties/*.properties"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"$&#123;address&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3) 所有的服务工程与 web 工程都要依赖 pinyougou-common 。 并删除每个工程中关于注册中心地址的配置<br>    (4) 安装 pinyougou-common 到本地仓库，然后测试运行。</p><ol start="2"><li>MavenProfile 配置</li></ol><p>(1) 创建 filters 文件夹，建立多个不同环境的 dubbox 配置。<code>env.address=192.168.25.130:2181</code></p><p>(2) 修改 properties/dubbox.properties 文件。<code>address=${env.address}</code></p><p>(3) 定义 profile</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">env</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(4) 资源配置与变量替换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span>src/main/resources/filters/dubbox_$&#123;env&#125;.properties<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>遇到的问题：</em></p><p>所有的 web 工程在依赖 common 工程的情况下，如果不配置 &lt;dubbo:registry &gt; 的话会报错。<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/error_dubbox_profile.png" alt=""></p><p>原因是 web 工程中无法依赖的 common 公共模块中的 <code>applicationContext-dubbox.xml</code>文件中的配置。存在两种问题: 1.该web工程为依赖 common 模块  2. 加载 spring 容器时，未添加 common 中<code>applicationContext-dubbox.xml</code>文件地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-security.xml,classpath*:spring/applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>param-value 标签中如果有配置，则用逗号分隔即可。classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找。有时候会用模糊匹配的方式去配置多个配置文件。 但是<strong>如果配置文件是在jar包里，模糊匹配就找不到了</strong>。可以用逗号隔开的方式配置多个配置文件。</p><p><strong>MongoDB </strong> </p><p>一个跨平台的，面向文档的数据库。它介于关系数据库和非关系数据库之间，是非关系数据库当中功能最丰富，最像关系数据库的产品。它支持的数据结构非常松散，是类似 JSON 的 BSON 格式，因此可以存储比较复杂的数据类型。</p><p>特性：</p><ul><li>面向集合存储、易于存储对象类型的数据</li><li>模式自由，对象的字段没有固定的限制</li><li>支持动态查询，查询语言强大</li><li>支持完全索引</li><li>支持复制和故障恢复</li><li>使用高效的二进制数据存储，可存放图片、视频等大文件</li><li>支持多种语言</li></ul><p><em>结构层次：</em><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/mongodb%E7%BB%93%E6%9E%84.png" alt="mongodb结构层次"></p><p>使用场景： 数据量较大时，数据价值不高时。比如评论系统、商品足迹信息。</p><p><strong>其他业务功能分析</strong></p><p><em>用户中心</em></p><p>订单中心：订单信息、商品收获、商品评价、物流信息跟踪</p><p>秒杀订单中心：同用户中心</p><p>我的收藏：商品收藏信息的管理</p><p>我的足迹：足迹信息管理</p><p>个人信息管理：信息完善、收货地址信息、密码管理、手机认证</p><p><em>商家后台</em></p><p>订单管理： 查询、发货、退货</p><p>秒杀订单管理：秒杀中的商品在redis中、已完成的秒杀商品在数据库中</p><p><em>运营商后台</em></p><p>订单管理：所有商家订单的信息管理</p><p>秒杀订单管理：查询</p><p><em>评价系统</em></p><p>数据访问层：对 mongodb 数据库的操作</p><p>服务层：逻辑实现</p><p>评价系统在工程中的调用：<br>（1）在商品详细页显示该商品的所有评论信息（CORS 跨域）<br>（2）用户中心 web 工程引用评价服务 可以对已收货的订单追加评价。<br>（3）商家后台 web 工程引用评价服务 可以查看订单的评价<br>（4）运营商后台 web 工程引用评价服务 可以查看订单的评价<br>（5）任务服务 pinyougou-task-service 引用评价服务和搜索服务，统计每个商品的评价更新到 solr 索引库中。</p><p><em>商家首页</em></p><p>商家商品信息的显示、用户也可以直接进入商家的首页选择该商家的商品</p><p><em>资金结算</em></p><p>平台作为第三方，用户付款到平台，然后平台定时给商家结算。存在佣金的问题，平台可能按照不同商品类型收取不同比例的销售提成。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;购物车解决方案&quot;&gt;&lt;a href=&quot;#购物车解决方案&quot; class=&quot;headerlink&quot; title=&quot;购物车解决方案&quot;&gt;&lt;/a&gt;购物车解决方案&lt;/h3&gt;&lt;p&gt;用户在商品详细页点击加入购物车，提交商品 SKU 编号和购买数量，添加到购物车。当用户在未登录的情况下，将此购物车存入 cookies , 在用户登陆的情况下，将购物车数据存入 redis 。如果用户登陆时，cookies 中存在购物车，需要将 cookies 的购物车合并到 redis 中存储.&lt;br&gt;
    
    </summary>
    
      <category term="项目学习" scheme="http://mindyu.com/categories/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="品优购" scheme="http://mindyu.com/tags/%E5%93%81%E4%BC%98%E8%B4%AD/"/>
    
      <category term="电商系统" scheme="http://mindyu.com/tags/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="项目实战" scheme="http://mindyu.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>品优购项目笔记（中）</title>
    <link href="http://mindyu.com/2018/12/20/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
    <id>http://mindyu.com/2018/12/20/品优购项目笔记（中）/</id>
    <published>2018-12-20T02:56:33.000Z</published>
    <updated>2019-01-13T08:23:27.250Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="网页静态化技术"><a href="#网页静态化技术" class="headerlink" title="网页静态化技术"></a>网页静态化技术</h3><p>网页静态化技术和缓存技术的共同点都是为了<strong>减轻数据库的访问压力</strong>，但是具体的应用场景不同，缓存比较适合小规模的数据，而网页静态化比较适合大规模且相对变化不太频繁的数据。另外网页静态化还有利于 SEO（搜索引擎优化）。静态界面通过 Nginx 服务器部署可以达到5万的并发，而Tomcat只有几百。</p><p><em>Freemarker</em> 模板引擎，基于模板来生成文本输出。与web容器无关。</p><p><strong>模板文件的元素</strong></p><ul><li>文本，直接输出的部分</li><li>注释，&lt;#– 该内容不会输出 –&gt;</li><li>插值，${…} 将使用数据模型中的部分来替代输出</li><li>FTL 指令，实现逻辑</li></ul><a id="more"></a><p><strong>生成文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TemplateException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建一个配置对象</span></span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration(Configuration.getVersion());</span><br><span class="line"><span class="comment">// 2. 设置模板所在的目录</span></span><br><span class="line">configuration.setDirectoryForTemplateLoading(<span class="keyword">new</span> File(<span class="string">"E:\\eclipse-workspace\\freemarkerDemo\\src\\main\\resources\\"</span>));</span><br><span class="line"><span class="comment">// 3. 设置默认字符编码</span></span><br><span class="line">configuration.setDefaultEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">// 4. 加载模板，创建一个模板对象</span></span><br><span class="line">Template template = configuration.getTemplate(<span class="string">"test.ftl"</span>);</span><br><span class="line"><span class="comment">// 5. 模板的数据集模型</span></span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">"name"</span>, <span class="string">"Mindyu"</span>);</span><br><span class="line">map.put(<span class="string">"message"</span>, <span class="string">"this is a freemarker demo!"</span>);</span><br><span class="line"><span class="comment">// 6. 模板输出流对象</span></span><br><span class="line">Writer out = <span class="keyword">new</span> FileWriter(<span class="string">"d:\\src\\test.html"</span>);</span><br><span class="line"><span class="comment">// 7. 输出文件</span></span><br><span class="line">template.process(map, out);</span><br><span class="line"><span class="comment">// 8. 关闭输出流对象</span></span><br><span class="line">out.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>FTL 指令</strong></p><ul><li><p>assgin 用于在页面上定义一个变量：&lt;#assign info={“mobile”:”aa”,’address’:’11’} &gt;</p></li><li><p>include 用于模板文件的嵌套：&lt;#include “head.ftl”&gt;</p></li><li><p>if 指令 条件判断语句</p></li><li><p>list 指令 对集合的遍历 (goods_index 获得索引)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list goodsList as goods&gt;</span><br><span class="line">$&#123;goods_index+<span class="number">1</span>&#125; 商品名称： $&#123;goods.name&#125; 价格：$&#123;goods.price&#125;&lt;br&gt;</span><br><span class="line">&lt;<span class="regexp">/#list&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>内建函数</strong> （语法格式：变量+?+函数名称）</p><ul><li>${goodsList?size} 获取集合的大小</li><li>&lt;#assign object=text?eval&gt; 转换 JSON 字符串为对象</li><li>${today?date} 当前日期 （dataModel.put(“today”, new Date());）</li><li>${today?time} 当前时间</li><li>${today?datetime} 当前日期+时间</li><li>${today?string(“yyyy年MM月”)} 日期格式化</li><li>${number} 数字会以每三位一个分隔符显示 123,456,789</li><li>${number?c} 将数字转换为字符串</li><li>空值处理运算符<ul><li>variable?? 判断变量是否存在，存在则返回true</li><li>${aaa!’-‘} 缺失变脸默认值,若aaa为空值则使用默认值‘-’</li></ul></li><li>运算符<ul><li>算数运算符 +、-、*、/</li><li>逻辑运算符 &amp;&amp; || ! </li><li>比较运算符 = 、==、!=、&gt;(gt)、&lt;(lt)、&gt;=(gte)、&lt;=(lte)</li></ul></li></ul><h4 id="商品详情页的数据显示"><a href="#商品详情页的数据显示" class="headerlink" title="商品详情页的数据显示"></a>商品详情页的数据显示</h4><p>创建 pinyougou-page-interface 工程，创建 com.pinyougou.page.service 包,包下创建接口 ItemPageService。然后再创建服务层，来实现接口方法。pom 文件中添加 freemarker 依赖。Spring 配置文件中添加 freemarker 的bean.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"freemarkerConfig"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateLoaderPath"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/ftl/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务层生成静态页面的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">genItemHtml</span><span class="params">(Long goodsId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Configuration configuration = freeMarkerConfig.getConfiguration();</span><br><span class="line">Template template = configuration.getTemplate(<span class="string">"item.ftl"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数据模型</span></span><br><span class="line">Map&lt;Object, Object&gt; dataModel = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 1.商品主表信息</span></span><br><span class="line">TbGoods goods = goodsMapper.selectByPrimaryKey(goodsId);</span><br><span class="line">dataModel.put(<span class="string">"goods"</span>, goods);</span><br><span class="line"><span class="comment">// 2.商品详细信息</span></span><br><span class="line">TbGoodsDesc goodsDesc = goodsDescMapper.selectByPrimaryKey(goodsId);</span><br><span class="line">dataModel.put(<span class="string">"goodsDesc"</span>, goodsDesc);</span><br><span class="line"><span class="comment">// 3.读取商品分类</span></span><br><span class="line">String itemCat1 = itemCatMapper.selectByPrimaryKey(goods.getCategory1Id()).getName();</span><br><span class="line">String itemCat2 = itemCatMapper.selectByPrimaryKey(goods.getCategory2Id()).getName();</span><br><span class="line">String itemCat3 = itemCatMapper.selectByPrimaryKey(goods.getCategory3Id()).getName();</span><br><span class="line">dataModel.put(<span class="string">"itemCat1"</span>, itemCat1);</span><br><span class="line">dataModel.put(<span class="string">"itemCat2"</span>, itemCat2);</span><br><span class="line">dataModel.put(<span class="string">"itemCat3"</span>, itemCat3);</span><br><span class="line"><span class="comment">// 4.读取SKU列表信息</span></span><br><span class="line">TbItemExample example = <span class="keyword">new</span> TbItemExample();</span><br><span class="line">Criteria criteria = example.createCriteria();</span><br><span class="line">criteria.andGoodsIdEqualTo(goodsId);<span class="comment">// 设置SPU信息</span></span><br><span class="line">criteria.andStatusEqualTo(<span class="string">"1"</span>);<span class="comment">// 存在状态</span></span><br><span class="line">example.setOrderByClause(<span class="string">"is_default desc"</span>);<span class="comment">// 按是否默认降序排序,目的是为了方便前端可以直接取出默认选项</span></span><br><span class="line">List&lt;TbItem&gt; itemList = itemMapper.selectByExample(example);</span><br><span class="line">dataModel.put(<span class="string">"itemList"</span>, itemList);</span><br><span class="line"></span><br><span class="line">Writer out = <span class="keyword">new</span> FileWriter(<span class="string">"D:\\src\\item\\"</span>+goodsId+<span class="string">".html"</span>);</span><br><span class="line">template.process(dataModel, out);</span><br><span class="line">out.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (TemplateException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运营商管理后台引入依赖，因为需要在运营商审核之后生成静态页面。</p><p>freemarker 图片列表的生成（扩展属性、规格列表类似）</p><p>​    通过 assign指令，将字符串转换为对象格式<code>&lt;#assign imageList=goodsDesc.itemImages?eval /&gt;</code>，然后在图片显示区遍历图片对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认第一个预览--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"preview"</span> <span class="attr">class</span>=<span class="string">"spec-preview"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> (<span class="attr">imageList</span>?<span class="attr">size</span>&gt;</span>0)&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"jqzoom"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">jqimg</span>=<span class="string">"$&#123;imageList[0].url&#125;"</span> <span class="attr">src</span>=<span class="string">"$&#123;imageList[0].url&#125;"</span> <span class="attr">width</span>=<span class="string">"400px"</span> <span class="attr">height</span>=<span class="string">"400px"</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下方的缩略图--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"spec-scroll"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"prev"</span>&gt;</span>&amp;lt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--左右按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"items"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">imageList</span> <span class="attr">as</span> <span class="attr">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;item.url&#125;"</span> <span class="attr">bimg</span>=<span class="string">"$&#123;item.url&#125;"</span> <span class="attr">onmousemove</span>=<span class="string">"preview(this)"</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span>&amp;gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="商品详情页-前端逻辑"><a href="#商品详情页-前端逻辑" class="headerlink" title="商品详情页-前端逻辑"></a>商品详情页-前端逻辑</h4><p>静态页面的动态效果，就需要 angularjs 来实现。比如商品购买数量的点击事件对应到angularjs的变量中、规格的选择。都已变量的形式与页面进行绑定。</p><p>不同规格的标题、价格等信息都不相同（SKU信息），为了实现静态页面的效果可以在将SKU信息生成到静态页面。以变量的形式保存在前端。然后用户点击不同规格时，去匹配对应的SKU列表中的某一条数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//控制层 </span></span><br><span class="line">app.controller(<span class="string">'itemController'</span> ,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line"> $scope.specificationItems=&#123;&#125;;<span class="comment">// 存储用户选择的规格</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 数量加减</span></span><br><span class="line"> $scope.addNum=<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"> $scope.num+=x;</span><br><span class="line"> <span class="keyword">if</span> ($scope.num&lt;<span class="number">1</span>) $scope.num=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 选择规格</span></span><br><span class="line"> $scope.selectSpecification=<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line"> $scope.specificationItems[key]=value;</span><br><span class="line"> searchSku();<span class="comment">// 查询sku</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 判断规格是否被选中</span></span><br><span class="line"> $scope.isSelected=<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>($scope.specificationItems[key]==value)&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> $scope.sku=&#123;&#125;;</span><br><span class="line"> <span class="comment">// 加载默认的sku信息</span></span><br><span class="line"> $scope.loadSku=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> $scope.sku=skuList[<span class="number">0</span>];</span><br><span class="line"> $scope.specificationItems=<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify($scope.sku.spec)); <span class="comment">// 深克隆</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 判断两个对象是否匹配</span></span><br><span class="line"> isEqual=<span class="function"><span class="keyword">function</span>(<span class="params">map1,map2</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> map1)&#123;</span><br><span class="line"> <span class="keyword">if</span>(map1[k]!=map2[k])&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> map2)&#123;</span><br><span class="line"> <span class="keyword">if</span>(map2[k]!=map1[k])&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 根据规格查询sku信息</span></span><br><span class="line"> searchSku=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;skuList.length;i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>( isEqual($scope.specificationItems, skuList[i].spec) )&#123;</span><br><span class="line"> $scope.sku=skuList[i];</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> $scope.sku=&#123;<span class="attr">id</span>:<span class="number">0</span>,<span class="attr">title</span>:<span class="string">'--------'</span>,<span class="attr">price</span>:<span class="number">0</span>&#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 添加到购物车</span></span><br><span class="line"> $scope.addToCart=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> alert(<span class="string">'sku_id:'</span>+ $scope.sku.id);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="系统模块的对接"><a href="#系统模块的对接" class="headerlink" title="系统模块的对接"></a>系统模块的对接</h4><p>运营商管理后台在审核之后进行静态页面的生成。创建 page-web 工程，用于存储生成页面。实现前端 angular 动态逻辑和静态模板的实现。</p><p>修改搜索系统模块中的search.html。点击搜索页面的图片跳转到静态页面。</p><h3 id="消息中间件解决方案-JMS"><a href="#消息中间件解决方案-JMS" class="headerlink" title="消息中间件解决方案 JMS"></a>消息中间件解决方案 JMS</h3><h4 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h4><p>消息中间件利用<strong>高效可靠的消息传递机制进行平台无关的数据交流</strong>，并基于数据通信来进行分布式系统的集成。通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。对于消息中间件，常见的角色大致也就有 Producer（生产者）、Consumer（消费者）。</p><p><em>常见产品:</em></p><ul><li>ActiveMQ  Apache 出品，最流行的，能力强劲的开源消息总线。</li><li>RabbitMQ AMQP 协议的领导实现，支持多种场景。</li><li>ZeroMQ 史上最快的消息队列系统</li><li>Kafka 高吞吐，在一台普通的服务器上就可以达到 10W/s的吞吐速率；完全的分布式系统。适合处理海量数据。</li></ul><h4 id="JMS（Java-消息服务）"><a href="#JMS（Java-消息服务）" class="headerlink" title="JMS（Java 消息服务）"></a>JMS（Java 消息服务）</h4><p>​ Java 平台上有关面向消息中间件的技术规范，它便于消息系统中的 Java 应用程序进行消息交换，并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发。<strong>是一系列接口规范</strong>。</p><p>消息是 JMS 中的一种类型对象，由两部分组成：<strong>报头和消息主体</strong>。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。消息正文格式：</p><ul><li>TextMessage–一个字符串对象</li><li>MapMessage–一套名称-值对</li><li>ObjectMessage–一个序列化的 Java 对象</li><li>BytesMessage–一个字节的数据流</li><li>StreamMessage – Java 原始值的数据流</li></ul><h4 id="JMS-消息传递类型"><a href="#JMS-消息传递类型" class="headerlink" title="JMS 消息传递类型"></a>JMS 消息传递类型</h4><ul><li>点对点模式：一个生产者一个消费者，存在多个消费者时，只有一个消费者可以获取消息。（未消费的消息会存储在队列中直到被消费）</li><li>发布订阅模式：一个生产者产生消息并进行发送后，可以由多个消费者进<br>行接收。（如果消息发送时没有消费者，那么这个消息无效，不会再被消费）</li></ul><p><em>安装</em></p><p>​    下载、解压、赋权、启动服务（./activemq start）。ActiveMQ 管理页面端口8161。（用户：admin 密码：admin）<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/activemq.png" alt="activemq管理界面"></p><h5 id="点对点模式案例"><a href="#点对点模式案例" class="headerlink" title="点对点模式案例"></a>点对点模式案例</h5><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.13.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>消息生产者:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line"><span class="comment">// 1. 创建连接工厂</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://192.168.25.130:61616"</span>);</span><br><span class="line"><span class="comment">// 2. 创建连接对象</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">// 3. 启动连接</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">// 4. 获取session（会话对象） 参数1：是否启动事务  参数2：消息确认方式</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">// 5. 创建队列对象</span></span><br><span class="line">Queue queue = session.createQueue(<span class="string">"test-queue"</span>);</span><br><span class="line"><span class="comment">// 6. 创建消息生产者对象</span></span><br><span class="line">MessageProducer producer = session.createProducer(queue);</span><br><span class="line"><span class="comment">// 7. 创建消息对象（TextMessage）</span></span><br><span class="line">TextMessage message = session.createTextMessage(<span class="string">"这是一条text消息"</span>);</span><br><span class="line"><span class="comment">// 8. 发送消息 </span></span><br><span class="line">producer.send(message);</span><br><span class="line"><span class="comment">// 9. 关闭资源</span></span><br><span class="line">producer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：创建session的第二个参数为消息确认模式：AUTO_ACKNOWLEDGE = 1 自动确认、CLIENT_ACKNOWLEDGE = 2 客户端手动确认、DUPS_OK_ACKNOWLEDGE = 3 自动批量确认、SESSION_TRANSACTED = 0 事务提交并确认。</p><p><strong>消息消费者：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1. 创建连接工厂</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://192.168.25.130:61616"</span>);</span><br><span class="line"><span class="comment">// 2. 创建连接对象</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">// 3. 启动连接</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">// 4. 获取session（会话对象） 参数1：是否启动事务 参数2：消息确认方式</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">// 5. 创建队列对象</span></span><br><span class="line">Queue queue = session.createQueue(<span class="string">"test-queue"</span>);</span><br><span class="line"><span class="comment">// 6. 创建消息的消费者对象</span></span><br><span class="line">MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line"><span class="comment">// 7. 设置监听</span></span><br><span class="line">consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">TextMessage textMessage = (TextMessage) message;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">""</span>+ textMessage.getText());</span><br><span class="line">&#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 8. 等待键盘输入</span></span><br><span class="line">System.in.read();</span><br><span class="line"><span class="comment">// 9. 关闭资源</span></span><br><span class="line">consumer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h5><p>只需要修改上述第五步中，创建对应的主题对象即可<code>Topic topic = session.createTopic(&quot;test-topic&quot;);</code></p><h4 id="JMS-应用"><a href="#JMS-应用" class="headerlink" title="JMS 应用"></a>JMS 应用</h4><p>运营商后台管理模块中，商品审核之后需要导入 solr 索引库和生成静态页面。对于这种同步调用的情况存在<strong>耦合度高、后期不易维护、同步执行、导致审核过程缓慢、用户体验性不好</strong>等多种问题。我们可以采用消息中间件来进行解耦，实现运营商后端与搜索服务的零耦合。运营商执行审核后，向activeMQ 发送消息（SKU列表），搜索服务从activeMQ接收到消息执行导入操作。</p><p>然后搜索模块采用 solr 系统实现，那么我们可以采用点对点的方式实现消息服务，而静态页面生成服务，由于静态页面存储于多个服务器，并且各个服务器数据相同，需要实现服务器之间同步更新的效果，所以需要采用发布订阅的方式实现。</p><p>导入搜索系统的消息生产者实现：</p><ol><li>解除耦合（移除itemService服务依赖）</li><li>引入activeMQ客户端依赖、spring-jms依赖。</li><li>创建jms生产者配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://192.168.25.130:61616"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>      </span><br><span class="line">   <span class="comment">&lt;!--这个是队列目的地，点对点的  文本信息--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueSolrDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"pinyougou_queue_solr"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!--这个是队列目的地，点对点的  文本信息，删除操作--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueSolrDeleteDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"pinyougou_queue_solr_delete"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这个是订阅模式  生成页面--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicPageDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"pinyougou_topic_page"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--这个是订阅模式  删除页面--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicPageDeleteDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"pinyougou_topic_page_delete"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>web.xml文件中引入该配置文件(contextConfigLocation)</li><li>代码实现，注入所用的对象服务(jmsTemplate、queueSolrDestination、queueSolrDeleteDestination)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/********导入到索引库**********/</span><br><span class="line">// 得到需要的SKU列表</span><br><span class="line">List&lt;TbItem&gt; itemList = goodsService.findItemListByGoodsIdAndStatus(ids, status);</span><br><span class="line">// 导入到solr </span><br><span class="line">// itemSearchService.importItemList(itemList);</span><br><span class="line">final String jsonString = JSON.toJSONString(itemList);// 转换为json字符串</span><br><span class="line"></span><br><span class="line">jmsTemplate.send(queueSolrDestination, new MessageCreator() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Message createMessage(Session session) throws JMSException &#123;</span><br><span class="line">return session.createTextMessage(jsonString);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/********生成静态页面**********/</span><br><span class="line">/*for (final Long id : ids) &#123;</span><br><span class="line">itemPageService.genItemHtml(id);</span><br><span class="line">&#125;*/</span><br><span class="line">jmsTemplate.send(topicPageDestination, new MessageCreator() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Message createMessage(Session session) throws JMSException &#123;</span><br><span class="line">return session.createObjectMessage(ids);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>消息消费者（搜索服务）</strong></p><ol><li>添加 activeMQ 依赖</li><li>添加spring配置文件  applicationContext-jms-consumer.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://192.168.25.130:61616"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这个是队列目的地，导入到索引库--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueSolrDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"pinyougou_queue_solr"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 消息监听容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"queueSolrDestination"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"itemSearchListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这个是队列目的地，删除索引库--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueSolrDeleteDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"pinyougou_queue_solr_delete"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 消息监听容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"queueSolrDeleteDestination"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"itemDeleteListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>消息监听类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemSearchListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ItemSearchService itemSearchService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">TextMessage textMessage = (javax.jms.TextMessage) message;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String text = textMessage.getText();</span><br><span class="line">System.out.println(<span class="string">"监听到消息："</span>+text);</span><br><span class="line"></span><br><span class="line">List&lt;TbItem&gt; itemlist = JSON.parseArray(text,TbItem.class);</span><br><span class="line">itemSearchService.importItemList(itemlist);</span><br><span class="line">System.out.println(<span class="string">"导入到solr索引库"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品删除（移除solr索引库记录）类似。以及网页静态化，主要是消息模式为发布订阅模式。运营商执行商品审核后，向 activeMQ 发送消息（商品 ID集合），网页生成服务从 activeMQ 接收到消息后执行网页生成操作。</p><p><strong>系统模块依赖关系图</strong><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%9B%BE_13.png" alt="系统模块依赖图"></p><p><strong>存在的问题</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'dataSource' defined in URL [jar:file:/D:/Program%20Files/Maven/repository/com/pinyougou/pinyougou-dao/0.0.1-SNAPSHOT/pinyougou-dao-0.0.1-SNAPSHOT.jar!/spring/applicationContext-dao.xml]: Could not resolve placeholder 'jdbc.url' in string value "&#123;jdbc.url&#125;"; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'jdbc.url' in string value "&#123;jdbc.url&#125;"</span><br></pre></td></tr></table></figure><p>提示找不到配置文件中的jdbc.url配置。是因为在page-service中，在生成静态页面时会用到一个页面生成路径的配置信息。然后在spring中的配置文件中设置<code>&lt;context:property-placeholder location=&quot;classpath:config/page.properties&quot; /&gt;</code> 。但是该服务依赖dao模块，这个模块中的数据库连接池的配置信息存放在 properties/db.properties 中，然后在 dao 模块中配置了 <code>&lt;context:property-placeholder location=&quot;classpath*:properties/*.properties&quot; /&gt;</code> 。此时 page-service 模块中的配置会覆盖该配置，就导致了无法访问 properties/db.properties 中数据库连接池的配置信息。解决方法就是使 <code>&lt;context:property-placeholder location=&quot;classpath*:*/*.properties&quot; /&gt;</code> 包含 dao 模块中的加载配置即可。</p><h3 id="SpringBoot-框架与短信解决方案"><a href="#SpringBoot-框架与短信解决方案" class="headerlink" title="SpringBoot 框架与短信解决方案"></a>SpringBoot 框架与短信解决方案</h3><h4 id="Spring-Boot入门"><a href="#Spring-Boot入门" class="headerlink" title="Spring Boot入门"></a>Spring Boot入门</h4><p>Spring 为企业级 Java 开发提供了一种相对简单的方法，通过依赖注入和面向切面编程，用简单的 Java 对象（Plain Old Java Object，POJO）实现了 EJB 的功能。</p><p>虽然 Spring 的组件代码是轻量级的，但它的配置却是重量级的。开始的基于XML配置，Spring2.5引入基于注解的组件扫描，3.0引入基于java的配置。主要是希望简化繁琐的配置。另外项目依赖管理也是一个难题，依赖的版本库会不会起冲突。</p><p>而Spring Boot解决了上述问题，它致力于帮助开发者更容易的创建基于 Spring 的应用程序和服务，让更多人的人更快的对 Spring 进行入门体验，为 Spring生态系统提供了一种固定的、<strong>约定优于配置风格</strong>的框架。</p><p>Spring Boot 具有的特性：</p><ul><li>提供更快的入门体验</li><li>开箱即用，没有代码生成，也无需XML配置。也可以实现修改默认值。</li><li>提供大型项目中常见的非功能特性，如嵌入式服务器、安全、指标。</li><li>并不是Spring功能的增强，而是提供一种快速使用Spring的方式。</li></ul><h5 id="Spring-Boot-Demo"><a href="#Spring-Boot-Demo" class="headerlink" title="Spring Boot Demo"></a>Spring Boot Demo</h5><ol><li>添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web的启动器， 通过依赖传递引入web项目所需的jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>定义引导类 Application</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@SpringBootApplication 其实就是以下三个注解的总和</span></span><br><span class="line"><span class="comment">@Configuration： 用于定义一个配置类</span></span><br><span class="line"><span class="comment">@EnableAutoConfiguration ：Spring Boot 会自动根据你 jar包的依赖来自动配置项目。</span></span><br><span class="line"><span class="comment">@ComponentScan： 告诉 Spring 哪个 packages 的用注解标识的类会被 spring 自动扫描并且装入 bean容器。*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Spring MVC 实现 hello world输出</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloWorldController &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private Environment env;// 用于获取 application.properties 配置中的属性</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/info&quot;)</span><br><span class="line">public String info() &#123;</span><br><span class="line">return &quot;hello world. url:&quot;+env.getProperty(&quot;url&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>启动引导类即可， <a href="http://localhost:8080/info" target="_blank" rel="noopener">http://localhost:8080/info</a></li></ol><p>常用配置：</p><ul><li>端口号修改（只需要在  application.properties 文件中配置 server.port）</li><li>读取配置文件信息（注入 Environment 对象，使用getProperty方法）</li><li>热部署（pom文件中添加 spring-boot-devtools 依赖即可）</li></ul><h4 id="Spring-Boot与ActiveMQ整合"><a href="#Spring-Boot与ActiveMQ整合" class="headerlink" title="Spring Boot与ActiveMQ整合"></a>Spring Boot与ActiveMQ整合</h4><ol><li>使用内嵌服务 spring-boot-starter-activemq</li><li>创建消息生产者</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class QueueController &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/send&quot;)</span><br><span class="line">public void sendMessage(String text) &#123;</span><br><span class="line">jmsMessagingTemplate.convertAndSend(&quot;spring_boot_text&quot;, text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建消息消费者</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class Consumer &#123;</span><br><span class="line"></span><br><span class="line">@JmsListener(destination=&quot;spring_boot_text&quot;)// destination和消息生产者相同</span><br><span class="line">public void readMessage(String text) &#123;</span><br><span class="line">System.out.println(&quot;接收到消息：&quot;+text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>启动服务即可。<a href="http://localhost:8088/send.do?text=aaaaaa" target="_blank" rel="noopener">http://localhost:8088/send.do?text=aaaaaa</a> Spring Boot内置了ActiveMQ服务。</li></ol><p>常用配置：</p><p><em>注：引入外部的ActiveMQ服务</em><code>spring.activemq.broker-url=tcp://192.168.25.130:61616</code></p><h4 id="短信解决方案"><a href="#短信解决方案" class="headerlink" title="短信解决方案"></a>短信解决方案</h4><p><em>项目需求</em></p><p>构建一个通用的短信发送服务（独立于品优购的单独工程），接收 activeMQ 的消息（MAP类型） 消息包括手机号（mobile）、短信模板号（template_code）、签名（sign_name）、参数字符串（param ）。该微服务通过短信验证码平台的API，实现验证码的发送功能。</p><p><em>验证码发送平台</em></p><p>​    由于阿里大于注册需要认证，比较繁琐，所以此处先不实现验证码发送模块。腾讯云的短信服务可以个人认证，但是需要域名备案，这个功能先预留，后期继续完成。</p><h5 id="用户注册模块"><a href="#用户注册模块" class="headerlink" title="用户注册模块"></a>用户注册模块</h5><p><em>工程搭建</em></p><ol><li>用户服务接口层 user-interface</li><li>用户服务实现层 user-service</li><li>用户中心控制层 user-web<ul><li>添加web.xml</li><li>引入依赖 user接口、spring依赖</li><li>添加 Spring 配置文件</li><li>静态原型页面</li></ul></li></ol><p><em>注册判断短信验证码</em></p><p>​    输入手机号，用户点击“获取验证码”，向后端传递手机号。后端随机生成六位数字作为验证码，同时将其保存在redis中（手机号作为key、验证码作为value）, 同时向 ActiveMQ 发送消息。然后短信监听服务接受消息然后向验证码平台发送消息。</p><p>​    用户点击完成注册时，后端根据手机号查询用户输入的验证码与redis中的验证码是否匹配，如果匹配那么就执行注册，向数据库添加一条用户记录，否则提示不能完成注册。</p><p>服务层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSmsCode</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.生成六位随机码</span></span><br><span class="line">    String smsCode = (<span class="keyword">long</span>)(Math.random()*<span class="number">1000000</span>)+<span class="string">""</span>;</span><br><span class="line">    System.out.println(<span class="string">"验证码："</span>+smsCode);</span><br><span class="line">    <span class="comment">// 2.将验证码存入redis</span></span><br><span class="line">    redisTemplate.boundHashOps(<span class="string">"smscode"</span>).put(phone, smsCode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.发送相应的消息给ActiveMQ</span></span><br><span class="line">    <span class="comment">// 待完成..... 将消息发送给ActiveMQ即可</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkSmsCode</span><span class="params">(String phone, String smsCode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取redis中的验证码</span></span><br><span class="line">    String systemCode = (String) redisTemplate.boundHashOps(<span class="string">"smscode"</span>).get(phone);</span><br><span class="line">    <span class="keyword">if</span> (systemCode == <span class="keyword">null</span> || !systemCode.equals(smsCode)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(@RequestBody TbUser user,String smsCode)</span></span>&#123;</span><br><span class="line">     <span class="comment">// 用户注册前进行校验（用户输入的验证码和redis中的验证码进行比较）</span></span><br><span class="line">    <span class="keyword">if</span> (!userService.checkSmsCode(user.getPhone(), smsCode)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"验证码有误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        userService.add(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"注册成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"注册失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/createSmsCode"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">createSmsCode</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (PhoneFormatCheckUtils.isPhoneLegal(phone)) &#123;</span><br><span class="line">        userService.createSmsCode(phone);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"验证码发送成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"验证码发送失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端控制层：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> //控制层 </span><br><span class="line">app.controller(&apos;userController&apos; ,function($scope,$controller,userService)&#123;</span><br><span class="line"></span><br><span class="line">// 注册</span><br><span class="line">$scope.register=function()&#123;</span><br><span class="line">// 判断两次输入密码是否一致</span><br><span class="line">if ($scope.entity.password!=$scope.password) &#123;</span><br><span class="line">alert(&quot;两次输入的密码不一致，请重新输入&quot;);</span><br><span class="line">$scope.entity.password = &quot;&quot;;</span><br><span class="line">$scope.password = &quot;&quot;;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">// 新增</span><br><span class="line">userService.add($scope.entity,$scope.smsCode).success(</span><br><span class="line">function(response)&#123;</span><br><span class="line">alert(response.message);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 生成验证码</span><br><span class="line">$scope.createSmsCode=function()&#123;</span><br><span class="line">userService.createSmsCode($scope.entity.phone).success(</span><br><span class="line">function(response)&#123;</span><br><span class="line">alert(response.message);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="单点登录解决方案"><a href="#单点登录解决方案" class="headerlink" title="单点登录解决方案"></a>单点登录解决方案</h3><p>单点登录（Single Sign On），是目前比较流行的企业业务整合的解决方案之一。SSO 的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。对于分布式的项目，多个子系统分别部署在不同的服务器中，此时采用传统的 session 来记录用户信息是无法实现的。</p><h4 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h4><p>CAS 为 Web 应用系统提供一种可靠的单点登录方法。CAS 包含两个部分： CAS Server 和 CAS Client。CAS Server 需要独立部署，主要负责对用户的认证工作；CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到 CAS Server。</p><h5 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h5><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/cas%E5%8E%9F%E7%90%86.png" alt="cas原理"></p><h5 id="访问流程"><a href="#访问流程" class="headerlink" title="访问流程"></a>访问流程</h5><ol><li>访问服务：用户发送请求访问应用系统提供的服务资源（也是cas client）</li><li>定向认证：cas client 会<strong>重定向(浏览器url会变化)</strong>用户请求到 cas server </li><li>用户认证：和用户进行身份认证</li><li>发送票据：cas server生成一个ticket ，先给浏览器用户，然后浏览器将其带入到cas client端</li><li>验证票据：cas client 向 cas server 请求验证 ticket 的合法性</li><li>传输用户信息：验证通过，cas server 会将用户的信息传输给cas client</li></ol><h5 id="cas-服务端部署"><a href="#cas-服务端部署" class="headerlink" title="cas 服务端部署"></a>cas 服务端部署</h5><p>cas 服务端就是一个 war 包，解压对应的压缩包，将cas-server-webapp-4.0.0.war放入tomcat的webapps下，启动tomcat完成解压。</p><p>常用配置修改</p><ol><li>默认用户和密码为 casuser、Mellon。可以在 cas 的 WEB-INF-&gt;deployerConfigContext.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"primaryAuthenticationHandler"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.authentication.AcceptUsersAuthenticationHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"casuser"</span> <span class="attr">value</span>=<span class="string">"Mellon"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"admin"</span> <span class="attr">value</span>=<span class="string">"admin"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>端口号修改：修改tomcat的默认端口（conf/server.xml），然后 cas 的 WEB-INF/cas.properties 修改<code>server.name=http://localhost:9100</code></li><li>单点退出然后跳转到目标页面 cas 的 WEB-INF/cas-servlet.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logoutAction"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.web.flow.LogoutAction"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:servicesManager-ref</span>=<span class="string">"servicesManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:followServiceRedirects</span>=<span class="string">"$&#123;cas.logout.followServiceRedirects:true&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>去除https认证，cas 默认使用的是 https 协议，该协议需要申请 SSL 证书。一般在开发测试阶段可以使用http协议即可。</li></ol><ul><li>修改 cas 的 WEB-INF/deployerConfigContext.xml，增加 p:requireSecure=”false”</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Required for proxy ticket mechanism. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"proxyAuthenticationHandler"</span>   <span class="attr">class</span>=<span class="string">"org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:httpClient-ref</span>=<span class="string">"httpClient"</span> <span class="attr">p:requireSecure</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改 cas 的/WEB-INF/spring-configuration/ticketGrantingTicketCookieGenerator.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ticketGrantingTicketCookieGenerator"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.web.support.CookieRetrievingCookieGenerator"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookieSecure</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookieMaxAge</span>=<span class="string">"3600"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookieName</span>=<span class="string">"CASTGC"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookiePath</span>=<span class="string">"/cas"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改 cas 的 WEB-INF/spring-configuration/warnCookieGenerator.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"warnCookieGenerator"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.web.support.CookieRetrievingCookieGenerator"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookieSecure</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookieMaxAge</span>=<span class="string">"3600"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookieName</span>=<span class="string">"CASPRIVACY"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:cookiePath</span>=<span class="string">"/cas"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><em>注：参数 p:cookieSecure=”true”，TRUE 为采用 HTTPS 验证，FALSE 为不采用 https 验证。参数 p:cookieMaxAge=”-1”，是 COOKIE 的最大生命周期，-1 为无生命周期，即只在当前打开的窗口有效，关闭或重新打开其它窗口，仍会要求验证。可以根据需要修改为大于 0 的数字，比如 3600 等，意思是在 3600 秒内，打开任意窗口，都不需要验证。</em></p><h5 id="CAS-客户端Demo"><a href="#CAS-客户端Demo" class="headerlink" title="CAS 客户端Demo"></a>CAS 客户端Demo</h5><p>创建 casclient_demo1 工程(war) 引入cas client依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cas --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jasig.cas.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-client-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">webResources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp/WEB-INF<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>WEB-INF<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9001<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加 web.xml 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于单点退出，该过滤器用于实现单点登出功能，可选配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.jasig.cas.client.session.SingleSignOutHttpSessionListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 该过滤器用于实现单点登出功能，可选配置。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Single Sign Out Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.session.SingleSignOutFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Single Sign Out Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 该过滤器负责用户的认证工作，必须启用它 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CASFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.authentication.AuthenticationFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>casServerLoginUrl<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://localhost:9100/cas/login<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里的 server 是服务端的 IP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>serverName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://localhost:9001<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CASFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 该过滤器负责对 Ticket 的校验工作，必须启用它 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Validation Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>casServerUrlPrefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://localhost:9100/cas<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>serverName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://localhost:9001<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Validation Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 该过滤器负责实现 HttpServletRequest 请求的包裹， 比如允许开发者通过 HttpServletRequest 的 getRemoteUser() 方法获得 SSO 登录用户的登录名，可选配置。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS HttpServletRequest Wrapper Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        org.jasig.cas.client.util.HttpServletRequestWrapperFilter</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS HttpServletRequest Wrapper Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 该过滤器使得开发者可以通过 org.jasig.cas.client.util.AssertionHolder 来获取用户的登录名。 比如 AssertionHolder.getAssertion().getPrincipal().getName()。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Assertion Thread Local Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.util.AssertionThreadLocalFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Assertion Thread Local Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主页面 index.jsp <code>&lt;%=request.getRemoteUser()%&gt;</code> 获取远程登录用户名</p><p>然后再创建客户端工程2。启动cas服务端和cas客户端，然后<code>http://localhost:9001</code> 和9002端口，都会跳转到cas的登录页面。实现单点登录。单点退出只需访问 <code>http://localhost:9100/cas/logout</code>即可。</p><h5 id="CAS-服务端数据源设置"><a href="#CAS-服务端数据源设置" class="headerlink" title="CAS 服务端数据源设置"></a>CAS 服务端数据源设置</h5><p>​    使用项目中 user 表中的用户信息来实现登录验证。</p><ol><li>修改 cas 服务端的 WEB-INF/deployerConfigContext.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:jdbcUrl</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/pinyougoudb?characterEncoding=utf8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:user</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:password</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认密码解码方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"passwordEncoder"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.jasig.cas.authentication.handler.DefaultPasswordEncoder"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">c:encodingAlgorithm</span>=<span class="string">"MD5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:characterEncoding</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dbAuthHandler"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:sql</span>=<span class="string">"select password from tb_user where username = ?"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:passwordEncoder-ref</span>=<span class="string">"passwordEncoder"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!----------------------另外配置认证管理器-------------------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"proxyAuthenticationHandler"</span> <span class="attr">value-ref</span>=<span class="string">"proxyPrincipalResolver"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 默认的认证处理方式 &lt;entry key-ref="primaryAuthenticationHandler" value-ref="primaryPrincipalResolver" /&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"dbAuthHandler"</span> <span class="attr">value-ref</span>=<span class="string">"primaryPrincipalResolver"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置了数据库连接池相关信息，那么就需要把数据库相应的jar包引入</li></ol><h5 id="CAS-服务端界面改造"><a href="#CAS-服务端界面改造" class="headerlink" title="CAS 服务端界面改造"></a>CAS 服务端界面改造</h5><p>​    cas server 服务端提供了默认的登录界面，那我们如何修改为我们自己需要的登录页面了。步骤如下：</p><ol><li>将 login.html 拷贝到 cas 系统下的  WEB-INF\view\jsp\default\ui 目录下</li><li>将 css、js、img 等静态资源文件夹拷贝到 cas 目录下。web 工程的根目录</li><li>将原来的 casLoginView.jsp 改名（以做参照模板），将 login.html 改名为 casLoginView.jsp<ul><li>添加 jsp 指令</li><li>修改 form 标签，保留原页面样式</li><li>修改用户名输入框，保留原页面样式</li><li>修改密码框，保留源页面样式</li><li>修改登录按钮，保留原页面的样式</li><li>错误提示<code>&lt;form:errors path=&quot;*&quot; id=&quot;msg&quot; cssClass=&quot;errors&quot; element=&quot;div&quot; htmlEscape=&quot;false&quot; /&gt;</code></li></ul></li></ol><p>注：错误提示信息默认为英文，使用了国际化标准。在 cas 的  WEB-INF\classes 中的 messages_zh_CN.properties 文件中添加配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">authenticationFailure.AccountNotFoundException=用户名或密码错误</span><br><span class="line">authenticationFailure.FailedLoginException=用户名或密码错误</span><br></pre></td></tr></table></figure><p>第一个是用户名不存在时的错误提示<br>    第二个是密码错误的提示</p><p>修改 cas-servlet.xml，设置国际化为 zn_CN（默认为 en ） 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.CookieLocaleResolver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">p:defaultLocale</span>=<span class="string">"zh_CN"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>国际化：i18n。英文为：internationalization 。18表示中间的字符数。</p><h4 id="用户中心实现单点登录（cas-client与Spring-Security集成）"><a href="#用户中心实现单点登录（cas-client与Spring-Security集成）" class="headerlink" title="用户中心实现单点登录（cas client与Spring Security集成）"></a>用户中心实现单点登录（cas client与Spring Security集成）</h4><ol><li>引入 springSecurity、cas 客户端和 springSecurity Cas 整合包依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-security配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring-security-cas --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-cas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jasig.cas.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-client-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>web.xml 添加 spring-security 过滤器，设置首页</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>home-index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 省略post乱码过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-security.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>构建 UserDetailsServiceImpl 认证类，实现UserDetailsService接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"经过认证类："</span>+username);</span><br><span class="line">Collection&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 角色固定了，如果存在多种角色的话，那么此处可能会去数据库中查找来实现动态设置用户角色</span></span><br><span class="line">authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_USER"</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(username, <span class="string">""</span>, authorities);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>添加 spring-security.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans:beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/security"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:beans</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 匿名访问资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/css/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/js/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/img/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/plugins/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册登陆 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/register.html"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/user/add.do"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/user/createSmsCode.do"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--   entry-point-ref  入口点引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">use-expressions</span>=<span class="string">"false"</span> <span class="attr">entry-point-ref</span>=<span class="string">"casProcessingFilterEntryPoint"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/**"</span> <span class="attr">access</span>=<span class="string">"ROLE_USER"</span>/&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">csrf</span> <span class="attr">disabled</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- custom-filter为过滤器， position 表示将过滤器放在指定的位置上，before表示放在指定位置之前  ，after表示放在指定的位置之后  --&gt;</span>           </span><br><span class="line">        <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">"casAuthenticationFilter"</span>  <span class="attr">position</span>=<span class="string">"CAS_FILTER"</span> /&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">"requestSingleLogoutFilter"</span> <span class="attr">before</span>=<span class="string">"LOGOUT_FILTER"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">"singleLogoutFilter"</span> <span class="attr">before</span>=<span class="string">"CAS_FILTER"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- CAS入口点 开始 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"casProcessingFilterEntryPoint"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.cas.web.CasAuthenticationEntryPoint"</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 单点登录服务器登录URL --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"http://localhost:9100/cas/login"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"serviceProperties"</span> <span class="attr">ref</span>=<span class="string">"serviceProperties"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"serviceProperties"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.cas.ServiceProperties"</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!--service 配置自身工程的根地址+/login/cas   --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"service"</span> <span class="attr">value</span>=<span class="string">"http://localhost:9106/login/cas"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- CAS入口点 结束 --&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 认证过滤器 开始 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"casAuthenticationFilter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.cas.web.CasAuthenticationFilter"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"authenticationManager"</span> <span class="attr">ref</span>=<span class="string">"authenticationManager"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 认证管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">authentication-manager</span> <span class="attr">alias</span>=<span class="string">"authenticationManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">authentication-provider</span>  <span class="attr">ref</span>=<span class="string">"casAuthenticationProvider"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">authentication-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">authentication-manager</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 认证提供者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"casAuthenticationProvider"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.cas.authentication.CasAuthenticationProvider"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"authenticationUserDetailsService"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper"</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">beans:constructor-arg</span> <span class="attr">ref</span>=<span class="string">"userDetailsService"</span> /&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"serviceProperties"</span> <span class="attr">ref</span>=<span class="string">"serviceProperties"</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- ticketValidator 为票据验证器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"ticketValidator"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.client.validation.Cas20ServiceTicketValidator"</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">beans:constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"http://localhost:9100/cas"</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"key"</span> <span class="attr">value</span>=<span class="string">"an_id_for_this_auth_provider_only"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>        </span><br><span class="line">   <span class="comment">&lt;!-- 认证类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"userDetailsService"</span> <span class="attr">class</span>=<span class="string">"com.pinyougou.user.service.UserDetailServiceImpl"</span>/&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 认证过滤器 结束 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单点登出  开始  --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"singleLogoutFilter"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.client.session.SingleSignOutFilter"</span>/&gt;</span>          </span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"requestSingleLogoutFilter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.web.authentication.logout.LogoutFilter"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:constructor-arg</span> <span class="attr">value</span>=<span class="string">"http://localhost:9100/cas/logout?service=http://localhost:9103"</span>/&gt;</span>  <span class="comment">&lt;!-- 退出登陆并跳转到首页 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:constructor-arg</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">beans:constructor-arg</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"filterProcessesUrl"</span> <span class="attr">value</span>=<span class="string">"/logout/cas"</span>/&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 此时直接请求 logout/cas 即可实现单点退出，相当于上面链接的一个别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 单点登出  结束 --&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取当前登录用户名，借助Spring Security的方法。<code>SecurityContextHolder.getContext().getAuthentication().getName();</code>即可得到用户名信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;网页静态化技术&quot;&gt;&lt;a href=&quot;#网页静态化技术&quot; class=&quot;headerlink&quot; title=&quot;网页静态化技术&quot;&gt;&lt;/a&gt;网页静态化技术&lt;/h3&gt;&lt;p&gt;网页静态化技术和缓存技术的共同点都是为了&lt;strong&gt;减轻数据库的访问压力&lt;/strong&gt;，但是具体的应用场景不同，缓存比较适合小规模的数据，而网页静态化比较适合大规模且相对变化不太频繁的数据。另外网页静态化还有利于 SEO（搜索引擎优化）。静态界面通过 Nginx 服务器部署可以达到5万的并发，而Tomcat只有几百。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Freemarker&lt;/em&gt; 模板引擎，基于模板来生成文本输出。与web容器无关。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模板文件的元素&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文本，直接输出的部分&lt;/li&gt;
&lt;li&gt;注释，&amp;lt;#– 该内容不会输出 –&amp;gt;&lt;/li&gt;
&lt;li&gt;插值，${…} 将使用数据模型中的部分来替代输出&lt;/li&gt;
&lt;li&gt;FTL 指令，实现逻辑&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="项目学习" scheme="http://mindyu.com/categories/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="品优购" scheme="http://mindyu.com/tags/%E5%93%81%E4%BC%98%E8%B4%AD/"/>
    
      <category term="电商系统" scheme="http://mindyu.com/tags/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="项目实战" scheme="http://mindyu.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>品优购项目笔记（上）</title>
    <link href="http://mindyu.com/2018/12/19/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://mindyu.com/2018/12/19/品优购项目笔记（上）/</id>
    <published>2018-12-19T12:45:32.000Z</published>
    <updated>2018-12-19T12:48:29.373Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="品牌管理模块"><a href="#品牌管理模块" class="headerlink" title="品牌管理模块"></a>品牌管理模块</h3><p><strong>功能实现</strong></p><ol><li>运用AngularJS前端框架的常用指令</li><li>完成品牌管理的列表功能<br><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86.png" alt="品牌管理"></li><li>完成品牌管理的分页列表功能</li><li>完成品牌管理的增加功能</li><li>完成品牌管理的修改功能<a id="more"></a><br><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%93%81%E7%89%8C%E4%BF%AE%E6%94%B9%E4%B8%8E%E6%96%B0%E5%A2%9E.png" alt="品牌新增与修改"></li><li>完成品牌管理的删除功能</li><li>完成品牌管理的条件查询功能</li></ol><p><strong>前端框架 AngularJS</strong><br><em>四大特征</em></p><ol><li>MVC 模式</li></ol><ul><li>Model: 数据,其实就是angular变量($scope.XX);</li><li>View: 数据的呈现,Html+Directive(指令);</li><li>Controller: 操作数据,就是function,数据的增删改查;<ol><li>双向绑定<br>框架采用并扩展了传统HTML，通过双向的数据绑定来适应动态内容，双向的数据绑定允许模型和视图之间的自动同步。遵循声明式编程应该用于构建用户界面以及编写软件构建，而指令式编程非常适合来表示业务逻辑的理念。</li><li>依赖注入<br>对象在创建的时候，其依赖对象由框架来自动创建并注入进来。即最少知道法则。</li><li>模块化设计</li></ol></li><li>高内聚低耦合法则<br>1)官方提供的模块   ng、ngRoute、ngAnimate<br>2)用户自定义的模块     angular.module(‘模块名’,[ ])</li></ul><p><em>常见指令</em></p><ul><li><p>ng-app 定义 AngularJS 应用程序的根元素，表示以下的指令 angularJS 都会识别，且在页面加载完时会自动初始化。</p></li><li><p>ng-model 指令用于绑定变量,将用户在文本框输入的内容绑定到变量上，而表达式可以实时地输出变量。</p></li><li><p>ng-init 对变量初始化或调用某方法。</p></li><li><p>ng-controller 用于指定所使用的控制器，在控制器中定义函数和变量，通过scope 对象来访问。</p></li><li><p>ng-click 单击事件指令，点击时触发控制器的某个方法。</p></li><li><p>ng-if 判断语句，条件不存在就不执行。</p></li><li><p>ng-repeat 指令用于循环集合变量。</p></li><li><p>$index 用于获取 ng-repeat 指令循环中的索引。</p></li><li><p>$http 内置服务，用于访问后端数据。</p></li><li><p>$location 服务，用于获取链接地址中的参数值。<code>$location.search()[&#39;id&#39;]</code>id对应的值。(注：地址中 ? 前需要添加 # )</p><p>eg:  <a href="http://localhost:9102/admin/goods_edit.html#?id=149187842867969" target="_blank" rel="noopener">http://localhost:9102/admin/goods_edit.html#?id=149187842867969</a></p></li><li><p>ng-bind-html 指令用于显示 html 内容</p></li><li><p>app.filter 过滤器，通过 | 来调用过滤器</p></li><li><p>$sce 服务 严格控制上下文访问，为防止 跨站XSS。该服务可以实现安全控制，比如允许html标签的插入转换。</p></li></ul><p><em>复选框的使用</em></p><p>​    定义一个用于存储选中 ID 的数组，当我们点击复选框后判断是选择还是取消选择，如果是选择就加到数组中，如果是取消选择就从数组中移除。在后续点击删除按钮时需要用到这个存储了 ID 的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储当前选中复选框的id集合</span></span><br><span class="line">$scope.selectIds = [];</span><br><span class="line">$scope.updateSelection = <span class="function"><span class="keyword">function</span>(<span class="params">$event, id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($event.target.checked) &#123;<span class="comment">// 当前为勾选状态</span></span><br><span class="line">        $scope.selectIds.push(id); <span class="comment">// 向selectIds集合中添加元素</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = $scope.selectIds.indexOf(id); </span><br><span class="line">        $scope.selectIds.splice(index, <span class="number">1</span>); <span class="comment">// 参数1：移除的下标位置，参数2：需要移除的元素个数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="规格及模板管理"><a href="#规格及模板管理" class="headerlink" title="规格及模板管理"></a>规格及模板管理</h3><p><em>前端分层开发</em></p><p>​    运用 MVC 的思想，将 js 和 html 代码分离，提高程序的可维护性。</p><p>​    实现方式：自定义服务，同后端的 service 层，封装一些操作，比如请求后端数据。在不同控制器通过依赖注入相关服务，即可调用服务的方法。将代码分为前端页面、前端服务层、前端控制层。</p><p><em>主键回填</em></p><p>​    修改 Mapper.xml 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Long"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">SELECT LAST_INSERT_ID() AS id</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    对于规格与具体规格选项，可以创建一个组合实体类，包括 规格 和 规格选项的集合。在插入规格之后，通过主键回填，获取规格 ID ，然后将 ID 作为外键添加到规格选项中去。</p><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E8%A7%84%E6%A0%BC%E7%AE%A1%E7%90%86.png" alt="规格管理"></p><p>  <em>select2 组件-多选下拉列表</em></p><ol><li><p>引入 select 2 相关的 js 和 css。</p></li><li><p>设置数据源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$scope.brandList=&#123;<span class="attr">data</span>:[&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">text</span>:<span class="string">'联想'</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">text</span>:<span class="string">'华为'</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">text</span>:<span class="string">'小米'</span>&#125;]&#125;;<span class="comment">// 品牌列表</span></span><br></pre></td></tr></table></figure></li><li><p>实现多选下拉框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">select2</span>  <span class="attr">select2-model</span>=<span class="string">"entity.brandIds"</span>  <span class="attr">config</span>=<span class="string">"brandList"</span>  <span class="attr">multiple</span> <span class="attr">placeholder</span>=<span class="string">" 选择品牌（可多选）"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>multiple 表示可多选</p><pre><code>Config 用于配置数据来源select2-model 用于指定用户选择后提交的变量![select2多选下拉列表](https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%A4%9A%E9%80%89%E4%B8%8B%E6%8B%89%E6%A1%86.png)</code></pre></li></ol><p><em>模板列表显示</em></p><p>​    将从后台获取的 json 字符串中的某个属性的值提取出来，用逗号分隔，更直观的显示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提取 json 字符串数据中某个属性，返回拼接字符串逗号分隔</span></span><br><span class="line">$scope.jsonToString = <span class="function"><span class="keyword">function</span>(<span class="params">jsonString,key</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> json=<span class="built_in">JSON</span>.parse(jsonString); <span class="comment">// 将 json 字符串转换为 json 对象</span></span><br><span class="line"><span class="keyword">var</span> value=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;json.length;i++)&#123; </span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>) value += <span class="string">","</span>；</span><br><span class="line">value += json[i][key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%95%86%E5%93%81%E7%B1%BB%E5%9E%8B%E6%A8%A1%E6%9D%BF%E7%AE%A1%E7%90%86.png" alt="类型模板管理"></p><h3 id="Spring-Security-安全框架"><a href="#Spring-Security-安全框架" class="headerlink" title="Spring Security  安全框架"></a>Spring Security  安全框架</h3><p>​    为基于 Spring 的企业应用系统提供声明式的安全访问控制的解决方案。提供一组可以在 Spring 应用上下文中配置的 Bean。</p><p><em>使用步骤</em></p><ul><li>引入 jar 包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>web.xml 文件中引入 spring-security.xml 配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-security.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spring-security.xml 配置文件设置页面拦截规则、认证管理器以及不拦截的资源（静态资源、登陆页面）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置页面不登陆也可以访问 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/*.html"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/css/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/img/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/js/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">pattern</span>=<span class="string">"/plugins/**"</span> <span class="attr">security</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 页面的拦截规则    use-expressions:是否启动SPEL表达式 默认是true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">use-expressions</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当前用户必须有ROLE_USER的角色 才可以访问根目录及所属子目录的资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/**"</span> <span class="attr">access</span>=<span class="string">"ROLE_ADMIN"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启表单登陆功能 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form-login</span> <span class="attr">login-page</span>=<span class="string">"/login.html"</span> <span class="attr">default-target-url</span>=<span class="string">"/admin/index.html"</span> <span class="attr">authentication-failure-url</span>=<span class="string">"/login.html"</span> <span class="attr">always-use-default-target</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">csrf</span> <span class="attr">disabled</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">headers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frame-options</span> <span class="attr">policy</span>=<span class="string">"SAMEORIGIN"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">headers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logout</span>/&gt;</span><span class="comment">&lt;!-- 退出登录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 认证管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">authentication-manager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">authentication-provider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user-service</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">authorities</span>=<span class="string">"ROLE_ADMIN"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"yang"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">authorities</span>=<span class="string">"ROLE_ADMIN"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user-service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">authentication-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">authentication-manager</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。</p><p>​    XSS(跨站脚本攻击)利用站点内的信任用户，往Web页面里插入恶意Script代码 。</p><p>​    CSRF通过伪装来自受信任用户的请求来利用受信任的网站。 </p><h3 id="商家系统登录安全控制"><a href="#商家系统登录安全控制" class="headerlink" title="商家系统登录安全控制"></a>商家系统登录安全控制</h3><p><em>安全控制</em></p><ol><li>自定义认证类，创建类 UserDetailsServiceImpl.java 实现 UserDetailsService 接口</li><li>实现类中添加 SellerService 属性、和 setter 注入方法，修改 loadUserByUserName 方法。</li><li>配置 spring-security.xml。认证管理器中 authentication-provider 引用userDetailService 的bean，同时通过 dobbo 去依赖一个 sellerService 对象。</li></ol><p><em>BCrypt 加密算法</em></p><p>​    用户表的密码通常使用 MD5 等不可逆算法加密后存储，为防止彩虹表破解更会先使用<br>一个特定的字符串（如域名）加密，然后再使用一个随机的 salt（盐值）加密。 特定字符串是程序代码中固定的，salt 是每个密码单独随机，一般给用户表加一个字段单独存储，比较麻烦。 BCrypt 算法将 salt 随机并混入最终加密后的密码，验证时也无需单独提供之前的 salt，从而无需单独处理 salt 问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  认证类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YCQ</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SellerService sellerService;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSellerService</span><span class="params">(SellerService sellerService)</span> </span>&#123;<span class="comment">// 通过配置的方式添加</span></span><br><span class="line"><span class="keyword">this</span>.sellerService = sellerService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println("执行 UserDetailsServiceImpl 认证");</span></span><br><span class="line"><span class="comment">// 构建角色列表</span></span><br><span class="line">List&lt;GrantedAuthority&gt; grantAuths = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">grantAuths.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_SELLER"</span>));</span><br><span class="line"></span><br><span class="line">TbSeller seller = sellerService.findOne(username);</span><br><span class="line"><span class="keyword">if</span> (seller!=<span class="keyword">null</span> &amp;&amp; <span class="string">"1"</span>.equals(seller.getStatus())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(username, seller.getPassword(), grantAuths);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring-security 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 认证管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">authentication-manager</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">authentication-provider</span> <span class="attr">user-service-ref</span>=<span class="string">"userDetailService"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password-encoder</span> <span class="attr">ref</span>=<span class="string">"bcryptEncoder"</span>&gt;</span><span class="tag">&lt;/<span class="name">password-encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">authentication-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">authentication-manager</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 认证类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"userDetailService"</span> <span class="attr">class</span>=<span class="string">"com.pinyougou.service.UserDetailsServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"sellerService"</span> <span class="attr">ref</span>=<span class="string">"mSellerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用dubbo 服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"pinyougou-shop-web"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://107.191.52.91:2181"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"mSellerService"</span> <span class="attr">interface</span>=<span class="string">"com.pinyougou.sellergoods.service.SellerService"</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"bcryptEncoder"</span> <span class="attr">class</span>=<span class="string">"org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"</span>&gt;</span><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>注：浏览器控制台提示 [DOM] Input elements should have autocomplete attributes (suggested: “current-password”) 为浏览器表单默认的记忆功能，可以在 input 标签中添加 autocomplete=”off|on” 即可。</em></p><h3 id="商品分类管理"><a href="#商品分类管理" class="headerlink" title="商品分类管理"></a>商品分类管理</h3><p><em>多级分类列表</em></p><p>​    将商品分类分为三级，进入页面首先显示所有一级分类（主分类），点击查询下级，可查看当前主分类下的次分类，再次点击进入三级分类。三级分类为最后一级，列表中不显示查询下级按钮，同时更新面包屑导航。直接点击面包屑导航，可以实现直接层级跳转。</p><p><em>面包屑导航</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前面包屑等级</span></span><br><span class="line">$scope.grade = <span class="number">1</span>;</span><br><span class="line">$scope.setGrade=<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    $scope.grade = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$scope.selectList=<span class="function"><span class="keyword">function</span>(<span class="params">p_entity</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($scope.grade == <span class="number">1</span>) &#123;</span><br><span class="line">        $scope.entity_1 = <span class="literal">null</span>;</span><br><span class="line">        $scope.entity_2 = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($scope.grade == <span class="number">2</span>)&#123;</span><br><span class="line">        $scope.entity_1 = p_entity;</span><br><span class="line">        $scope.entity_2 = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $scope.entity_2 = p_entity;</span><br><span class="line">    &#125;</span><br><span class="line">    $scope.findByParentId(p_entity.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">ng-click</span>=<span class="string">"grade=1;selectList(&#123;id:0&#125;)"</span>&gt;</span>顶级分类列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">ng-click</span>=<span class="string">"grade=2;selectList(entity_1)"</span>&gt;</span>&#123;&#123;entity_1.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-if</span>=<span class="string">"entity_2!=null"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">ng-click</span>=<span class="string">"grade=3;selectList(entity_2)"</span>&gt;</span>&#123;&#123;entity_2.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>修改商品分类</em></p><p>​    实现类型模板的下拉框，采用 select2 组件实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>类型模板<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">select2</span> <span class="attr">ng-model</span>=<span class="string">"entity.typeId"</span> <span class="attr">config</span>=<span class="string">"itemList"</span> <span class="attr">placeholder</span>=<span class="string">"商品类型模板"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    config 为数据来源</p><p>​    ng-model 绑定类型对象数据</p><p>​    itemList 的来源：itemCatController 中 findItemList() 方法 -&gt; typeTemplateService 的 selectOptionList() 方法 -&gt; 请求后端 /typeTemplate/selectOptionList -&gt; TypeTemplateService 服务层 -&gt; TypeTemplateMapper 层方法</p><p><em>删除商品分类</em></p><p>​    判断所选分类下是否存在子分类，存在则不能删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(Long[] ids)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 判断当前所有分类是否存在子分类</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">// 不存在</span></span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            <span class="keyword">if</span>(itemCatService.findByParentId(id)!=<span class="keyword">null</span> &amp;&amp; itemCatService.findByParentId(id).size()!=<span class="number">0</span>)&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"当前所选分类存在子分类，切勿删除"</span>); </span><br><span class="line"></span><br><span class="line">        itemCatService.delete(ids);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, <span class="string">"删除成功"</span>); </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">false</span>, <span class="string">"删除失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>SPU 与 SKU</em></p><p>​    SPU （标准产品单位）为商品信息聚合的最小单位是一组可复用、易检索的标准化信息的集合,该集合描述了一个产品的特性。属性相同、特性相同的商品为一个SPU。</p><p>​    SKU （库存量单位） 为物理上不可分割的最小存货单元。不同的规格、颜色、款式为不同的SKU。</p><p><em>分布式文件服务器 FastDFS</em></p><p>​    FastDFS 是用 c 语言编写的一款开源的分布式文件系统。FastDFS 为互联网量身定制,充分考虑了<strong>冗余备份、负载均衡、线性扩容</strong>等机制,并注重<strong>高可用、高性能</strong>等指标,使用FastDFS 很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。<br>    FastDFS 架构包括 Tracker server 和 Storage server。</p><ul><li><p>Tracker server （追踪服务器、调度服务器）作用为负载均衡和调度。</p></li><li><p>Storage server （存储服务器）作用为文件存储。</p><p>客户端请求 Tracker server 进行文件上传、下载,通过 Tracker server 调度最终由 Storage server 完成文件上传和下载。    </p><p>服务端角色：</p></li><li><p>Tracker : 管理集群，tracker也可以实现集群，每一个节点地位平等，一种备份的机制。tracker负责收集 storage 集群的存储状态。</p></li><li><p>Stroage ：实际保存文件。分为多个组，组内文件相同，起到备份作用。组间文件不同，起到分布式存储。</p></li></ul><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0.png" alt="图片上传"></p><p><em>商品分类级联刷新</em></p><p>​    通过 Angular JS 变量监控方法，实现选择一级分类之后，初始化二级分类的列表信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// angularjs变量监控方法,查询二级分类信息</span></span><br><span class="line">$scope.$watch(<span class="string">'entity.goods.category1Id'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newValue != <span class="literal">undefined</span> &amp;&amp; newValue != <span class="string">""</span>) &#123;</span><br><span class="line">        <span class="comment">// alert("category1Id"+newValue);</span></span><br><span class="line">        itemCatService.findByParentId(newValue).success(</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">                    $scope.itemCat2List = response;</span><br><span class="line">                    $scope.entity.goods.category2Id = <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E7%BA%A7%E8%81%94%E5%88%B7%E6%96%B0.png" alt="商品分类级联刷新"></p><p><em>商品录入【SKU商品信息】</em> </p><p>对于同一个产品分为多种不同的规格组合。根据选择的规格录入商品的 SKU 信息，当用户选择相应的规格，下面的 SKU 列表就会自动生成。<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%95%86%E5%93%81%E8%A7%84%E6%A0%BC%E7%BB%84%E5%90%88.png" alt="规格管理"></p><p>实现思路：<br>（1）我们先定义一个初始的不带规格名称的集合，只有一条记录。<br>（2）循环用选择的规格，根据规格名称和已选择的规格选项对原集合进行扩充，添加规格名称和值，新增的记录数与选择的规格选项个数相同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建SKU列表</span></span><br><span class="line">$scope.creatItemList=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 列表初始化，规格对象、价格、库存量、状态、是否默认</span></span><br><span class="line">    $scope.entity.itemList = [ &#123;<span class="attr">spec</span>:&#123;&#125;,<span class="attr">price</span>:<span class="number">0</span>,<span class="attr">num</span>:<span class="number">9999</span>,<span class="attr">status</span>:<span class="string">'0'</span>,<span class="attr">isDefault</span>:<span class="string">'0'</span>&#125; ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> items = $scope.entity.goodsDesc.specificationItems;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">        $scope.entity.itemList = addColumn($scope.entity.itemList, items[i].attributeName, items[i].attributeValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $scope.entity.itemList:</span></span><br><span class="line"><span class="comment"> * [&#123;"spec":&#123;"网络":"移动3G","机身内存":"16G"&#125;,"price":0,"num":9999,"status":"0","isDefault":"0"&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;"spec":&#123;"网络":"移动3G","机身内存":"32G"&#125;,"price":0,"num":9999,"status":"0","isDefault":"0"&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;"spec":&#123;"网络":"联通3G","机身内存":"16G"&#125;,"price":0,"num":9999,"status":"0","isDefault":"0"&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;"spec":&#123;"网络":"联通3G","机身内存":"32G"&#125;,"price":0,"num":9999,"status":"0","isDefault":"0"&#125;]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深克隆方法   原集合、列名、列值</span></span><br><span class="line">addColumn=<span class="function"><span class="keyword">function</span>(<span class="params">list, columnName, columnValues</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newList = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> oldRow = list[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; columnValues.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> newRow = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify(oldRow) );</span><br><span class="line">            newRow.spec[columnName] = columnValues[j];</span><br><span class="line">            newList.push(newRow);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>商家后台列表显示</em><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%95%86%E5%AE%B6%E5%95%86%E5%93%81%E7%AE%A1%E7%90%86.png" alt="商家商品管理"></p><p>状态显示：</p><p>​    商品信息表（goods）中状态子段为 audit_status 。存储的为数字，0表示未审核、1表示已审核、2表示审核未通过、3为已关闭。从后台获取的状态值，直接在前端进行修改。通过一个status数组存储：</p><p>​    $scope.status=[‘未审核’,’已审核’,’审核未通过’,’关闭’];//商品状态</p><p>​    然后列表中显示为 。</p><p>分类信息显示：</p><p>​    商品分为三级分类。存储于 tb_item_cat 表中。包括 id、父级id、分类名称、对应绑定的类型id。但是为了避免商品查询时重复的关联查询，可以采用现将所有分类信息读取到本地，然后在前端进行分类id到分类名称的转换操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$scope.itemCatList = [];</span><br><span class="line"><span class="comment">// 全部商品分类查询，存储在itemList数组中，然后再前端页面通过数组下标直接将商品分类ID转换为商品分类名称，避免后端连接查询。</span></span><br><span class="line">$scope.findItemList = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    itemCatService.findAll().success(</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; response.length; i++) &#123;</span><br><span class="line">                    $scope.itemCatList[response[i].id] = response[i].name;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    将分类结果 response 对象封装为数组类型，数组下标为商品分类id，数组值为商品分类的名称。然后在列表项中通过  将id转换为名称。</p><p><em>存在的问题</em></p><p>​    pinyougou-shop-web 模块中分页插件提示 ClassNotFoundException。但是页面可以访问。<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/error_page.png" alt=""></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    如上配置之后，又出现下图错误，导致商品列表无法显示。（但是 manager-web 模块中也没有引入pagehelper,但是没有出现问题）<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/error_RowBounds.png" alt=""></p><p>商品删除</p><p>​    逻辑删除，通过修改数据库表中的 is_delete 字段为1，然后过滤掉商品。然后查询时，在 findPage() 方法中添加 criteria.andIsDeleteIsNull() 条件。</p><p><em>注解式事务配置</em></p><p>​    创建  applicationContext-tx.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启事务控制的注解支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​    然后在方法或服务实现类上添加 @Transactional 注解。</p><p><em>网站前台广告服务</em></p><p>​    设计为广告分类表（id、name）与广告内容表（id、categoryId、title、url、pic、status、order）。广告有首页轮播广告、今日推荐、各品类楼层广告等分类。</p><p>​    Redis 缓存数据库用于解决高访问量对后端数据库造成的很大的访问压力。（另一种解决方案为网页静态化）</p><p>​    Spring Data Redis 提供了在 srping 应用中通过简单的配置访问 redis 服务，对 reids 底层开发包(Jedis, JRedis, and RJC)进行了高度封装，RedisTemplate 提供了 redis 各种操作、异常处理及序列化，支持发布订阅，并对 spring 3.1 cache 进行了实现。</p><p>spring-data-redis 针对 jedis 提供了如下功能：<br>    1.连接池自动管理，提供了一个高度封装的“RedisTemplate”类。<br>    2.针对 jedis 客户端中大量 api 进行了归类封装,将同一类型操作封装为 operation 接口</p><p>操作样例：</p><p>key-value 键值对操作</p><p>​    插入：redisTemplate.boundValueOps(“name”).set(“mindyu”);</p><p>​    读取：redisTemplate.boundValueOps(“name”).get();</p><p>​    删除：redisTemplate.delete(“name”);</p><p>Set 类型操作（无序集合）</p><p>​    插入：redisTemplate.boundSetOps(“nameset”).add(“曹操”); </p><p>​    读取：redisTemplate.boundSetOps(“nameset”).members();</p><p>​    删除：redisTemplate.boundSetOps(“nameset”).remove(“曹操”);    // 单一元素</p><p>redisTemplate.delete(“name”);  // 整个集合</p><p>List 集合 （有序）</p><p>​    rightPush() 、leftPush()、读取：range(0,10)、index(1)、remove(1, “value”) // 1 表示删除数据的个数</p><p>Hash 类型</p><p>​    put(“key”,”value”)、读取所有键：keys()、读取所有值：values()、get(“key”)、delete(“key”)</p><p>​    使用 Redis 缓存时，需要注意，当数据修改时需要清除缓存数据，使其达到一致性约束。必须修改广告时，如果修改了该广告所属的分类，那么需要同时清除原分类以及新分类的缓存信息。</p><p>出现的问题：</p><p>​    首页在加载广告模块时，出现 “Failed to load resource: net::ERR_BLOCKED_BY_CLIENT” 错误，是因为谷歌浏览器的广告插件，导致无法加载该图片。</p><h3 id="搜索解决方案"><a href="#搜索解决方案" class="headerlink" title="搜索解决方案"></a>搜索解决方案</h3><p><em>简介</em></p><p>​    Solr 是一个开源搜索平台，用于构建搜索应用程序。 它建立在 Lucene(全文搜索引擎)之上。 Solr 是企业级的，快速的和高度可扩展的。 使用 Solr 构建的应用程序非常复杂，可提供高性能。Solr 是一个<strong>可扩展的</strong>，<strong>可部署</strong>，<strong>搜索/存储引擎</strong>，<strong>优化搜索大量以文本为中心的数据</strong>。</p><p><em>安装及配置</em></p><ol><li>安装 Tomcat，解压缩。</li><li>解压 solr。</li><li>把 solr 下的 dist 目录 solr-4.10.3.war 部署到 webapps 下(去掉版本号，方便访问)。</li><li>启动 Tomcat 解压缩 war 包</li><li>把solr下 example/lib/ext 目录下的所有的扩展 jar 包，添加到 solr 的工程中(\WEB-INF\lib目录下)。</li><li>创建一个 solrhome 。solr 下的 /example/solr 目录就是一个 solrhome。复制此目录到 D 盘改名为 solrhome</li><li>关联 solr 及 solrhome。需要修改 solr 工程的 web.xml 文件。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">env-entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">env-entry-name</span>&gt;</span>solr/home<span class="tag">&lt;/<span class="name">env-entry-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">env-entry-value</span>&gt;</span>d:\solrhome<span class="tag">&lt;/<span class="name">env-entry-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">env-entry-type</span>&gt;</span>java.lang.String<span class="tag">&lt;/<span class="name">env-entry-type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">env-entry</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>启动 Tomcat 。访问 <a href="http://localhost:8080/solr" target="_blank" rel="noopener">http://localhost:8080/solr</a> 即可<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/solr%E6%8E%A7%E5%88%B6%E5%8F%B0.png" alt="solr"></li></ol><p><em>中文分析器 IK Analyzer</em></p><p>​    IK Analyzer 是一个开源的，基于 java 语言开发的轻量级的中文分词工具包。</p><p>配置</p><ol><li><p>把 IKAnalyzer2012FF_u1.jar 添加到 solr 工程的 lib 目录下</p></li><li><p>solr 工程下创建 WEB-INF/classes 文件夹，用于存放扩展词典、停用词词典、配置文件。</p></li><li><p>修改 Solrhome 中的 schema.xml 文件，配置一个 FieldType，使用 IKAnalyzer </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_ik"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKAnalyzer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>配置域 </p><p>​    域相当于数据库的表字段，用户存放数据，用户可根据业务需要去定义相关的 Field（域），一般来说，每一种域对应着一种数据，用户对同一种数据进行相同的操作。域的常用属性：</p><ul><li>name  域的名称</li><li>type 域的类型</li><li>indexed 是否索引</li><li>stored 是否存储</li><li>required 是否必须</li><li>multiValued 是否多值</li></ul><p>复制域：</p><p>​    将某一个域中的数据复制到另一个域中。比如商品查询时，同样一个关键字可能是品牌、商品标题、商品分类、商家名称等多种可能。此时就需要复制域。</p><p>动态域：</p><p>​    对于字段名称不固定的情况下，用于动态扩充字段。比如商品的规格的值不是固定的（不同商品可能存在不同的规格项）。</p><p>出现的错误</p><ol><li>前端可以从后台获取数据（ itemsearch/search.do正常获取数据 ），但是控制台显示” TypeError: Cannot read property ‘success’ of undefined “错误。<img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/success_undefined.png" alt="success_of_undefined"></li></ol><p>原因是因为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.service(<span class="string">'searchService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$http</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.search=<span class="function"><span class="keyword">function</span>(<span class="params">searchMap</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> $http.post(<span class="string">'itemsearch/search.do'</span>,searchMap);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>angularjs 服务层的search方法并未 return。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. 服务启动超时：com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout. start time: 2018-12-02 08:35:41.093, end time: 2018-12-02 08:35:46.094, client elapsed: 0 ms, server elapsed: 5001 ms, timeout: 5000 ms。</span><br></pre></td></tr></table></figure><ul><li>网站前台 portal-web 模块出现的原因是因为没有启动 redis 服务器。然后前台广告数据获取不到。</li><li>搜索模块 search-web ：就很奇怪，dubbox 服务正常、solr 服务正常。昨天晚上还是正常的，上午纠结了半天，然后不知道为啥突然又好了。。。 烦躁</li></ul><p><em>批量数据导入 solr 系统</em></p><p>​    将商品数据导入到 solr 系统。</p><ul><li>创建 solr-util (jar)，引入 dao 模块以及 spring 相关依赖。</li><li>创建spring 的配置文件，添加包扫描。</li></ul><p>&lt;context:component-scan base-package=”com.pinyougou.solrutil”&gt;<br>&lt;/context:component-scan&gt;</p><ul><li><p>依赖 pojo 模块，为实体类添加 @Field 注解。</p></li><li><p>pojo 中引入 spring-data-solr 依赖（会自动引入其所依赖solr包）动态域中@Dynamic 注解是该包提供的</p></li><li><p>添加 solr.xml 配置文件与 spring 目录中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- solr 服务器地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">solr:solr-server</span> <span class="attr">id</span>=<span class="string">"solrServer"</span> <span class="attr">url</span>=<span class="string">"http://127.0.0.1:8080/solr"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- solr 模板，使用 solr 模板可对索引库进行 CRUD 的操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"solrTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.solr.core.SolrTemplate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"solrServer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过 spring 注入 SolrTemplate 模板类对象。</p></li><li><p>使用 SolrTemplate 对象执行相应的方法。</p></li></ul><p><em>关键字搜索模块</em></p><p>​    通过注入 SolrTemplate 对象，使用该对象实现关键字搜索。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(timeout=<span class="number">5000</span>)<span class="comment">// 超时5S，默认是1S</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemSearchServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemSearchService</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SolrTemplate solrTemplate; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">search</span><span class="params">(Map searchMap)</span> </span>&#123;</span><br><span class="line">Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">Query query = <span class="keyword">new</span> SimpleQuery(<span class="string">"*:*"</span>);</span><br><span class="line">Criteria criteria = <span class="keyword">new</span> Criteria(<span class="string">"item_keywords"</span>).is(searchMap.get(<span class="string">"keywords"</span>));</span><br><span class="line">query.addCriteria(criteria);</span><br><span class="line"></span><br><span class="line">ScoredPage&lt;TbItem&gt; page = solrTemplate.queryForPage(query, TbItem.class);</span><br><span class="line">map.put(<span class="string">"rows"</span>, page.getContent());<span class="comment">// page.getContent() 返回一个 List 集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>搜索结果高亮显示</em></p><p>​    将搜索关键字在搜索结果中，高亮显示出来。实现原理也就是在关键字前后添加html标签：<em style="color:red">关键字</em></p><p>​    后端实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">search</span><span class="params">(Map searchMap)</span> </span>&#123;</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Query query = new SimpleQuery("*:*");</span></span><br><span class="line"><span class="comment">    Criteria criteria = new Criteria("item_keywords").is(searchMap.get("keywords"));</span></span><br><span class="line"><span class="comment">    query.addCriteria(criteria);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ScoredPage&lt;TbItem&gt; page = solrTemplate.queryForPage(query, TbItem.class);</span></span><br><span class="line"><span class="comment">    map.put("rows", page.getContent());// page.getContent() 返回一个 List 集合</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 高亮显示</span></span><br><span class="line">    HighlightQuery query = <span class="keyword">new</span> SimpleHighlightQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建高亮选项</span></span><br><span class="line">    HighlightOptions highlightOptions = <span class="keyword">new</span> HighlightOptions().addField(<span class="string">"item_title"</span>);<span class="comment">// 高亮域（可以为多个）</span></span><br><span class="line">    highlightOptions.setSimplePrefix(<span class="string">"&lt;em style='color:red'&gt;"</span>);<span class="comment">// 前缀</span></span><br><span class="line">    highlightOptions.setSimplePostfix(<span class="string">"&lt;/em&gt;"</span>);<span class="comment">// 后缀</span></span><br><span class="line"></span><br><span class="line">    query.setHighlightOptions(highlightOptions);<span class="comment">// 为查询设置高亮查询</span></span><br><span class="line"></span><br><span class="line">    Criteria criteria = <span class="keyword">new</span> Criteria(<span class="string">"item_keywords"</span>).is(searchMap.get(<span class="string">"keywords"</span>));</span><br><span class="line">    query.addCriteria(criteria);</span><br><span class="line"></span><br><span class="line">     HighlightPage&lt;TbItem&gt; page = solrTemplate.queryForHighlightPage(query, TbItem.class);</span><br><span class="line">     <span class="comment">// 高亮入口集合（每条高亮结果的入口）</span></span><br><span class="line">     List&lt;HighlightEntry&lt;TbItem&gt;&gt; entryList = page.getHighlighted();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (HighlightEntry&lt;TbItem&gt; entry : entryList) &#123;</span><br><span class="line">         <span class="comment">// 获取高亮列表（高亮域的个数）</span></span><br><span class="line">         List&lt;Highlight&gt; hightLightList = entry.getHighlights();</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">         for (Highlight highLight : hightLightList) &#123;</span></span><br><span class="line"><span class="comment">             // 每个域可能存在多值（复制域）</span></span><br><span class="line"><span class="comment">             List&lt;String&gt; sns = highLight.getSnipplets();</span></span><br><span class="line"><span class="comment">             System.out.println(sns);</span></span><br><span class="line"><span class="comment">         &#125;*/</span></span><br><span class="line">         <span class="keyword">if</span> (entry.getHighlights().size()&gt;<span class="number">0</span> &amp;&amp; entry.getHighlights().get(<span class="number">0</span>).getSnipplets().size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">             TbItem item = entry.getEntity();</span><br><span class="line">             item.setTitle(entry.getHighlights().get(<span class="number">0</span>).getSnipplets().get(<span class="number">0</span>));<span class="comment">// 用高亮标签结果替换</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     map.put(<span class="string">"rows"</span>, page.getContent());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    前端实现：</p><p>angularJS 会将后端插入的html标签原样输出，而不会去解析。这是防止html攻击采取的一种安全策略。可以使用 $sce 服务的 trustAsHtml 方法来实现转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义过滤器</span></span><br><span class="line">app.filter(<span class="string">'trustHtml'</span>, [<span class="string">'$sce'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$sce</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="comment">// 传入参数时，被过滤的内容</span></span><br><span class="line"><span class="keyword">return</span> $sce.trustAsHtml(data);<span class="comment">// 返回的是过滤后的内容（信任html的转换）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; ]);</span><br></pre></td></tr></table></figure><p>然后在页面通过 <code>&lt;div class=&quot;attr&quot; ng-bind-html=&quot;item.title | trustHtml&quot;&gt;&lt;/div&gt;</code>来调用转换方法。</p><h3 id="搜索业务规则"><a href="#搜索业务规则" class="headerlink" title="搜索业务规则"></a>搜索业务规则</h3><p>搜索模块</p><ol><li>用户输入搜索关键字，显示列表结果和商品分类信息。因为一个关键字可能对应多种商品分类</li><li>根据第一个商品分类，默认查询该分类的模板ID，然后根据模板ID查询品牌列表和规格列表</li><li>当用户点击某一个商品分类时，则显示该分类对应商品结果，同时根据该分类的模板ID查询对应的品牌列表和规格列表</li><li>当用户点击商品品牌列表时，筛选出当前所选的品牌商品信息</li><li>当用户点击商品规格列表时，筛选出当前所选的规格所对应的商品信息</li><li>用户点击价格区间时，商品信息根据价格进行过滤</li><li>用户点击搜索面板上的条件时，隐藏该条件</li></ol><p>系统搜索量很大，所以需要将搜索信息放置到 Redis 缓存数据库中。</p><p>缓存商品分类信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveToRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将模板ID放入缓存 分类名称作为key,模板ID作为value</span></span><br><span class="line">    List&lt;TbItemCat&gt; itemCatList = findAll();</span><br><span class="line">    <span class="keyword">for</span> (TbItemCat itemCat : itemCatList) &#123;</span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">"itemCat"</span>).put(itemCat.getName(), itemCat.getTypeId());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"将模板ID放入缓存"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存所有的品牌信息和规格信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveToRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;TbTypeTemplate&gt; typeTempList = findAll();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(TbTypeTemplate template : typeTempList) &#123;</span><br><span class="line">        Long id = template.getId();</span><br><span class="line">        <span class="comment">// 将模板ID作为key 品牌列表作为value</span></span><br><span class="line">        List brandList = JSON.parseArray(template.getBrandIds(), Map.class);<span class="comment">// &#123;id:1,text:联想&#125;</span></span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">"brandList"</span>).put(id, brandList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将模板ID作为key 规格列表作为value</span></span><br><span class="line">        List&lt;Map&gt; specList = findSpecList(id);</span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">"specList"</span>).put(id, specList);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"完成品牌列表、规格列表缓存"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分类列表查询（spring data solr 条件查询）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">searchCategoryList</span><span class="params">(Map searchMap)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Query query = <span class="keyword">new</span> SimpleQuery(<span class="string">"*:*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据关键字查询</span></span><br><span class="line">    Criteria criteria = <span class="keyword">new</span> Criteria(<span class="string">"item_keywords"</span>).is(searchMap.get(<span class="string">"keywords"</span>));<span class="comment">// where ...</span></span><br><span class="line">    query.addCriteria(criteria);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置分组选项</span></span><br><span class="line">    GroupOptions groupOptions = <span class="keyword">new</span> GroupOptions().addGroupByField(<span class="string">"item_category"</span>);<span class="comment">// group by ....（可以有多个分组域）</span></span><br><span class="line">    query.setGroupOptions(groupOptions);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取分组页</span></span><br><span class="line">    GroupPage&lt;TbItem&gt; queryForGroupPage = solrTemplate.queryForGroupPage(query, TbItem.class);</span><br><span class="line">    <span class="comment">// 获取分组结果对象</span></span><br><span class="line">    GroupResult&lt;TbItem&gt; groupResult = queryForGroupPage.getGroupResult(<span class="string">"item_category"</span>);</span><br><span class="line">    <span class="comment">// 获取分组入口页</span></span><br><span class="line">    Page&lt;GroupEntry&lt;TbItem&gt;&gt; groupEntries = groupResult.getGroupEntries();</span><br><span class="line">    <span class="comment">// 遍历获取每个对象的值</span></span><br><span class="line">    <span class="keyword">for</span>(GroupEntry&lt;TbItem&gt; entry : groupEntries) &#123;</span><br><span class="line">        list.add(entry.getGroupValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>过滤条件的构建</em></p><p>​    当点击搜索面板的分类、品牌和规格时，实现查询条件的构建。查询 条件以面包屑的形式显示。当面包屑显示分类、品牌和规格时，要同时隐藏搜索面板对应的区域。点击面包屑查询条件的撤销链接时，重新显示搜索面板相应的区域。</p><p>​    面包屑其实就是显示搜索对象。可将搜索对象定义为<code>$scope.searchMap={&#39;keywords&#39;:&#39;&#39;,&#39;category&#39;:&#39;&#39;,&#39;brand&#39;:&#39;&#39;,spec:{}};</code>。然后实现添加查询条件和取消查询条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索</span></span><br><span class="line">$scope.search = function() &#123;</span><br><span class="line">    searchService.search($scope.searchMap).success(function(response) &#123;</span><br><span class="line">        $scope.resultMap = response;<span class="comment">// 搜索返回的结果</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加查询搜索项</span></span><br><span class="line">$scope.addSearchItem=function(key,value)&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="string">'brand'</span> || key == <span class="string">'category'</span>) &#123;<span class="comment">// 如果点击品牌和分类</span></span><br><span class="line">        $scope.searchMap[key] = value;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $scope.searchMap.spec[key]=value;</span><br><span class="line">    &#125;</span><br><span class="line">    $scope.search();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消查询条件</span></span><br><span class="line">$scope.removeSearchItem=function(key)&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="string">'brand'</span> || key == <span class="string">'category'</span>) &#123;<span class="comment">// 如果点击品牌和分类</span></span><br><span class="line">        $scope.searchMap[key] = <span class="string">""</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        delete $scope.searchMap.spec[key];</span><br><span class="line">    &#125;</span><br><span class="line">    $scope.search();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>价格区间筛选</em></p><p>​    点击搜索面板的价格区间，实现按价格筛选相应的商品。和上述的过滤条件类似，前端依然将价格区间以字符串的形式放入到 searchMap 集合中（如 ‘price’:’500-1000’）。然后后端通过字符串的截取获得相应的价格区间，然后进而筛选。</p><p><em>自定义搜索结果分页</em></p><p>​    前端将当前页数和页大小通过 searchMap 传给后端，然后后端通过构建 solr 的 query 对象实现分页效果。然后返回当前页数据和总页数以及总记录数。<code>$scope.searchMap={&#39;keywords&#39;:&#39;&#39;,&#39;category&#39;:&#39;&#39;,&#39;brand&#39;:&#39;&#39;,&#39;spec&#39;:{},&#39;price&#39;:&#39;&#39;,&#39;pageNo&#39;:1,&#39;pageSize&#39;:40 };//搜索条件封装对象</code></p><p>通过当前页数、总页数然后构建分页标签。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建分页标签</span></span><br><span class="line">buildPageLable=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $scope.pageLable=[];</span><br><span class="line">    <span class="keyword">var</span> firstPage = <span class="number">1</span>;<span class="comment">// 开始页码</span></span><br><span class="line">    <span class="keyword">var</span> lastPage = $scope.resultMap.totalPages; <span class="comment">// 截止页码</span></span><br><span class="line">    $scope.firstDot = <span class="literal">true</span>;</span><br><span class="line">    $scope.lastDot = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lastPage &gt; <span class="number">5</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> ($scope.searchMap.pageNo&lt;=<span class="number">3</span>)&#123;<span class="comment">// 当前页码小于3，显示前五页</span></span><br><span class="line">            lastPage = <span class="number">5</span>;</span><br><span class="line">            $scope.firstDot = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ($scope.searchMap.pageNo&gt;=lastPage<span class="number">-2</span>) &#123;<span class="comment">// 当前页码大于总页数-2，则显示后5页</span></span><br><span class="line">            firstPage = lastPage - <span class="number">4</span>;</span><br><span class="line">            $scope.lastDot = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            firstPage = $scope.searchMap.pageNo - <span class="number">2</span>;</span><br><span class="line">            lastPage = $scope.searchMap.pageNo + <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $scope.firstDot = <span class="literal">false</span>;</span><br><span class="line">        $scope.lastDot = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = firstPage; i &lt;= lastPage; i++) &#123;</span><br><span class="line">        $scope.pageLable.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>多关键字搜索</em></p><p>​    在搜索时，分词器首先会将我们输入的关键字进行分词，然后对每个分词都会去搜索对应的结果，然后求得并集。比如搜索“三星手机”时，会将“三星”的搜索集合和“手机”搜索结构都返回给我们。这样做可以显示更多数据，让用户有更多的选择。同时会根据搜索的关键字匹配度进行排序。</p><p>​    此时注意：当搜索关键字有空格时，中文分词无法进行分词，那么就会导致搜索出来的结果较少或者没有。然后可以采用在<strong>后端去掉关键字中所有的空格</strong>。原来如此，我平时搜索的时候经常喜欢敲空格，以为这样多个条件就能更精准的搜索我想要的额，套路套路。</p><p><em>搜索数据排序</em></p><p>​    根据综合、价格升降序、新品的来实现排序。前端传递两个参数，分别为待排序的字段名称和排序方式（升序or降序）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.7 排序</span></span><br><span class="line">String sortValue = (String) searchMap.get(<span class="string">"sort"</span>);<span class="comment">// 升序 or 降序</span></span><br><span class="line">String sortFiled = (String) searchMap.get(<span class="string">"sortFiled"</span>); <span class="comment">// 升序字段</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="string">""</span>.equals(sortValue) &amp;&amp; !<span class="string">""</span>.equals(sortFiled)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sortValue.equals(<span class="string">"ASC"</span>)) &#123;<span class="comment">// 升序</span></span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.ASC, <span class="string">"item_"</span>+sortFiled);</span><br><span class="line">        query.addSort(sort);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sortValue.equals(<span class="string">"DESC"</span>)) &#123;</span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"item_"</span>+sortFiled);</span><br><span class="line">        query.addSort(sort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    销量和评价的排序(待完成)：</p><p>增加域 item_salecount 用于存储每一个 SKU 的销量信息，然后定时更新每一个 SKU 的销量数据（固定时间，比如一个月，否则会导致新上架的商品无法排在前列），同时每天定时更新一次销量数据。</p><p><em>隐藏品牌列表</em></p><p>​    当用户搜索的关键字包含品牌时隐藏品牌列表。也就是判断搜索关键字中是否存在返回的品牌列表中的信息。这个过程中发现，搜索关键字 searchMap.keywords 和输入框进行了绑定。那么当我们修改输入框的时候，可能就会影响品牌列表的显示。 此处将 search 重载，添加一个带 keywords的方法。然后搜索框就不和搜索关键字进行绑定，而是以传递参数的形式赋值给 searchMap。</p><p><em>首页和搜索页对接</em></p><p>​    在首页输入框中输入关键字，然后跳转到搜索页面，查询对应关键字的数据。</p><p>首页通过 链接的形式传递参数<code>location.href=&quot;http://localhost:9104/search.html#?keywords=&quot;+$scope.keywords;</code> 然后搜索模块使用 $location 服务接受参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 $location 服务</span></span><br><span class="line"><span class="comment">// 接受首页跳转</span></span><br><span class="line">$scope.loadKeywords=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$scope.searchMap.keywords =  $location.search()[<span class="string">'keywords'</span>];</span><br><span class="line">$scope.search();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>索引库的增量更新</em></p><p>​    实现在商品审核之后将数据更新到 solr 索引库，在商品删除的时候删除 solr 索引库中相应的记录。(增量更新)</p><p>​    商品审核是对商品表（SPU信息）进行操作，但是索引库中存储的是SKU信息，所以首先需要通过商品的 SPU 信息查询该商品对应的 SKU 信息，然后将查询到的集合提交给 solrTemplate。删除可以直接根据 goodsId 集合进行条件删除。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;品牌管理模块&quot;&gt;&lt;a href=&quot;#品牌管理模块&quot; class=&quot;headerlink&quot; title=&quot;品牌管理模块&quot;&gt;&lt;/a&gt;品牌管理模块&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;功能实现&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运用AngularJS前端框架的常用指令&lt;/li&gt;
&lt;li&gt;完成品牌管理的列表功能&lt;br&gt;&lt;img src=&quot;https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86.png&quot; alt=&quot;品牌管理&quot;&gt;&lt;/li&gt;
&lt;li&gt;完成品牌管理的分页列表功能&lt;/li&gt;
&lt;li&gt;完成品牌管理的增加功能&lt;/li&gt;
&lt;li&gt;完成品牌管理的修改功能
    
    </summary>
    
      <category term="项目学习" scheme="http://mindyu.com/categories/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="品优购" scheme="http://mindyu.com/tags/%E5%93%81%E4%BC%98%E8%B4%AD/"/>
    
      <category term="电商系统" scheme="http://mindyu.com/tags/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="项目实战" scheme="http://mindyu.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>品优购项目学习笔记</title>
    <link href="http://mindyu.com/2018/12/18/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://mindyu.com/2018/12/18/品优购项目学习笔记/</id>
    <published>2018-12-18T12:27:17.000Z</published>
    <updated>2019-01-13T08:36:44.626Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>一个综合性的 B2B2C 的电商网站系统。网站采用商家入驻的模式，商家入驻平台提交申请，有平台进行资质审核，审核通过后，商家拥有独立的管理后台录入商品信息。商品经过平台审核后即可发布。 </p><p><a href="https://github.com/Mindyu/pinyougou" target="_blank" rel="noopener">Github地址</a></p><a id="more"></a><h4 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h4><h5 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h5><ul><li>网站前台</li><li>运营商平台</li><li>商家管理平台</li></ul><h5 id="框架组合"><a href="#框架组合" class="headerlink" title="框架组合"></a>框架组合</h5><p>前端 angularJS + Bootstrap </p><p>后端 Spring + SpringMVC + mybatis + Dubbox</p><h5 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h5><p>面向服务的架构（SOA架构）。控制层与服务层分离，通过网络调用。<br><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9E%B6%E6%9E%84.jpg" width="50%" height="50%"></p><h5 id="模块关联关系图"><a href="#模块关联关系图" class="headerlink" title="模块关联关系图"></a>模块关联关系图</h5><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9D%97%E5%9B%BE.png" width="50%" height="50%"></p><h4 id="项目环境搭建"><a href="#项目环境搭建" class="headerlink" title="项目环境搭建"></a>项目环境搭建</h4><h5 id="Dubbox框架"><a href="#Dubbox框架" class="headerlink" title="Dubbox框架"></a>Dubbox框架</h5><p>致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。远程服务调用的分布式框架。</p><p><strong>原理图</strong><br><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/Dubbox%E5%8E%9F%E7%90%86.jpg" width="50%" height="50%"></p><p>节点角色说明：</p><ul><li>Provider: 暴露服务的服务提供方。 </li><li>Consumer: 调用远程服务的服务消费方。 </li><li>Registry: 服务注册与发现的注册中心。</li><li>Monitor: 统计服务的调用次调和调用时间的监控中心。 </li><li>Container: 服务运行容器。</li></ul><p><em>Dubbox 本地 jar 包部署与安装 ：</em></p><p>Dubbox 并不在 maven 中央仓库，需安装到本地仓库。将 dubbo-2.8.4.jar 包放到 d:\setup, 然后输入命令</p><p><code>mvn install:install-file -Dfile=d:\setup\dubbo-2.8.4.jar -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4 -Dpackaging=jar</code> 即可。</p><h5 id="管理中心的部署"><a href="#管理中心的部署" class="headerlink" title="管理中心的部署"></a>管理中心的部署</h5><p>开发过程中需要知道注册了哪些服务以便测试与管理。通过部署一个管理中心来实现。其实管理中心就是一个web应用，部署到tomcat即可。 </p><ul><li>编译 dubbox 源码，dubbox-master.zip 文件中的 dubbox-master 目录下，执行 mvn package -Dmaven.skip.test=true 。即可在 target 目录下看到 dubbo-admin-2.8.4.war 。将 war 包放置到服务器的 webapps 下。</li><li>如果你部署在zookeeper同一台主机并且端口是默认的2181，则无需修改任何配置。如果不是在一台主机上或端口被修改，需要修改 WEB-INF 下的 dubbo.properties  ，修改如下配置：<br><code>dubbo.registry.address=&lt;zookeeper://127.0.0.1:2181&gt;</code> 修改后重新启动tomcat。</li><li><a href="http://虚拟机ip:8080/dubbo-admin" target="_blank" rel="noopener">http://虚拟机ip:8080/dubbo-admin</a> 用户名 root 密码</li></ul><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/dubbox%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83.jpg" width="50%" height="50%"></p><h5 id="注册中心-Zookeeper"><a href="#注册中心-Zookeeper" class="headerlink" title="注册中心 Zookeeper"></a>注册中心 Zookeeper</h5><ul><li>上传 zookeeper 安装包，解压缩，创建 data 目录，修改 zoo.cfg 配置文件的 dataDir 配置</li><li>启动命令 安装目录 /root/zookeeper-3.4.6/</li></ul><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/%E5%93%81%E4%BC%98%E8%B4%AD/zookeeper%E6%9C%8D%E5%8A%A1.jpg" width="50%" height="50%"></p><h5 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h5><p>克隆项目之后，使用 Eclipse 打开，导入Maven项目，此时会报找不到 dubbox 和 fastDFS 依赖包。而这两个依赖包不在 Maven 中央仓库中，所以需要我们手动将这两个包导入本地依赖库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=D:\src\dubbo-2.8.4.jar -DgroupId=com.alibaba -DartifactId=dubbo -Dversion=2.8.4 -Dpackaging=jar</span><br><span class="line"></span><br><span class="line">// 然后配置离线约束：XML Catalog</span><br><span class="line">http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mvn  install:install-file  -DgroupId=org.csource.fastdfs  -DartifactId=fastdfs  -Dversion=1.2 -Dpackaging=jar -Dfile=d:\src\fastdfs_client_v1.20.jar</span><br></pre></td></tr></table></figure><p>以上配置包存放在 <a href="https://github.com/Mindyu/pinyougou" target="_blank" rel="noopener">https://github.com/Mindyu/pinyougou</a> 下的 src 目录中。另外如果本地仓库安装依赖包之后依然报错，那么可能是 Eclipse 的 Maven 配置路径没有修改为本地的仓库路径。</p><h4 id="项目技术要点索引"><a href="#项目技术要点索引" class="headerlink" title="项目技术要点索引"></a>项目技术要点索引</h4><p><a href="http://www.mindyu.com/2018/12/19/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/#%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">前端框架 AngularJS</a></p><p><a href="http://www.mindyu.com/2018/12/19/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/#%E8%A7%84%E6%A0%BC%E5%8F%8A%E6%A8%A1%E6%9D%BF%E7%AE%A1%E7%90%86" target="_blank" rel="noopener">select2 组件使用</a></p><p><a href="http://www.mindyu.com/2018/12/19/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/#Spring-Security-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6" target="_blank" rel="noopener">Spring Security</a></p><p><a href="http://www.mindyu.com/2018/12/19/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/#%E5%95%86%E5%AE%B6%E7%B3%BB%E7%BB%9F%E7%99%BB%E5%BD%95%E5%AE%89%E5%85%A8%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">BCrypt 加密算法 </a></p><p><a href="http://www.mindyu.com/2018/12/19/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/#%E5%95%86%E5%93%81%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86" target="_blank" rel="noopener">分布式文件服务器 FastDFS </a></p><p><a href="http://www.mindyu.com/2018/12/19/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%EF%BC%89/#%E6%90%9C%E7%B4%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" target="_blank" rel="noopener">Spring Data Solr 搜索解决方案</a></p><p><a href="http://www.mindyu.com/2018/12/20/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89/#%E7%BD%91%E9%A1%B5%E9%9D%99%E6%80%81%E5%8C%96%E6%8A%80%E6%9C%AF" target="_blank" rel="noopener">网页静态化技术 Freemarker</a></p><p><a href="http://www.mindyu.com/2018/12/20/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89/#%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-JMS" target="_blank" rel="noopener">消息中间件解决方案 JMS</a></p><p><a href="http://www.mindyu.com/2018/12/20/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89/#Spring-Boot%E5%85%A5%E9%97%A8" target="_blank" rel="noopener">Spring Boot 框架</a></p><p><a href="http://www.mindyu.com/2018/12/20/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89/#Spring-Boot%E4%B8%8EActiveMQ%E6%95%B4%E5%90%88" target="_blank" rel="noopener">Spring Boot 与 ActiveMQ 整合</a></p><p><a href="http://www.mindyu.com/2018/12/20/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89/#%E7%9F%AD%E4%BF%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" target="_blank" rel="noopener">短信解决方案</a></p><p><a href="http://www.mindyu.com/2018/12/20/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%EF%BC%89/#%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" target="_blank" rel="noopener">单点登录解决方案</a></p><p><a href="http://www.mindyu.com/2018/12/22/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/#%E8%B4%AD%E7%89%A9%E8%BD%A6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" target="_blank" rel="noopener">Cookie + Redis 购物车</a></p><p><a href="http://www.mindyu.com/2018/12/22/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/#%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%AE%A2%E5%8D%95" target="_blank" rel="noopener">跨域解决方案</a></p><p><a href="http://www.mindyu.com/2018/12/22/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/#%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%AE%A2%E5%8D%95" target="_blank" rel="noopener">分布式 ID 生成器</a></p><p><a href="http://www.mindyu.com/2018/12/22/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/#%E5%BE%AE%E4%BF%A1%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">二维码生成插件 qrious</a></p><p><a href="http://www.mindyu.com/2018/12/22/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/#%E7%A7%92%E6%9D%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" target="_blank" rel="noopener">秒杀解决方案</a></p><p><a href="http://www.mindyu.com/2018/12/22/%E5%93%81%E4%BC%98%E8%B4%AD%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%EF%BC%89/#SpringTask-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6" target="_blank" rel="noopener">SpringTask 任务调度、Cron表达式、Maven Profile</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个综合性的 B2B2C 的电商网站系统。网站采用商家入驻的模式，商家入驻平台提交申请，有平台进行资质审核，审核通过后，商家拥有独立的管理后台录入商品信息。商品经过平台审核后即可发布。 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Mindyu/pinyougou&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="项目学习" scheme="http://mindyu.com/categories/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="品优购" scheme="http://mindyu.com/tags/%E5%93%81%E4%BC%98%E8%B4%AD/"/>
    
      <category term="电商系统" scheme="http://mindyu.com/tags/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="项目实战" scheme="http://mindyu.com/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Java 异常与反射</title>
    <link href="http://mindyu.com/2018/11/30/Java%20%E5%BC%82%E5%B8%B8%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <id>http://mindyu.com/2018/11/30/Java 异常与反射/</id>
    <published>2018-11-30T02:25:41.000Z</published>
    <updated>2019-01-12T14:41:37.843Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h5 id="Throwable-Java异常的基类"><a href="#Throwable-Java异常的基类" class="headerlink" title="Throwable Java异常的基类"></a>Throwable Java异常的基类</h5><p><img src="https://mubu.com/document_image/34564eaa-c11d-4197-baba-e099c5c74909-983181.jpg" alt="img"></p><ul><li><strong>Error</strong>: 用于标记严重错误。合理的应用程序不应该去 try/catch 这种错误。绝大多数的错误都是非正常的，就根本不该出现的。常见的有OOM、StackOverflowError。</li><li><strong>Exception</strong>: 用于指示一种合理的程序想去 catch 的条件。即它仅仅是一种程序运行条件，而非严重错误，并且鼓励用户程序去 catch 它。</li></ul><a id="more"></a><p>Error和RuntimeException 及其子类都是未检查的异常（unchecked exceptions），而所有其他的Exception类都是检查异常（checked exceptions）</p><p>checked exceptions</p><p>​    通常是从一个可以恢复的程序中抛出来的，并且最好能够从这种异常中使程序恢复。比如 <strong>ParseException(DateFormat日期转换时)、IOException、SQLException、InterruptedException(Thread.sleep方法)、ClassNotFoundException、FileNotFoundException</strong>等。检查异常发生在编译阶段，必须要使用 try…catch（或者throws）否则编译不通过。</p><p>unchecked exceptions</p><p>​    通常是如果一切正常的话本不该发生的异常，但是的确发生了。发生在运行期，具有不确定性，主要是由于程序的逻辑问题所引起的。比如<strong>IndexOutOfBoundException、ClassCastException(强制类型转换)、NullPointerException、NumberFormatException(Integer.valueOf(“123a”);)、ArithmeticException(15/0)、ConcurrentModificationException(迭代时快速失败)、NoSuchMethodException</strong>等。这类错误本身就是bug，应该被修复，出现此类错误时程序就应该立即停止执行。因此，面对 Errors 和 unchecked exceptions 应该让程序自动终止执行，程序员不该做诸如 try/catch 这样的事情，而是应该查明原因，修改代码逻辑。</p><h5 id="一个线程运行时发生异常会怎样？"><a href="#一个线程运行时发生异常会怎样？" class="headerlink" title="一个线程运行时发生异常会怎样？"></a>一个线程运行时发生异常会怎样？</h5><p>存在两种情形(属于运行时异常)：</p><p>​    ① 如果该异常被捕获或抛出，则程序继续运行。</p><p>​    ② 如果异常没有被捕获该线程将会停止执行。</p><p>Thread.UncaughtExceptionHandler 是用于处理未捕获异常造成线程突然中断情况的一个内嵌接口。当一个未捕获异常将造成线程中断的时候JVM会使用Thread.getUncaughtExceptionHandler() 来查询线程的 UncaughtExceptionHandler ，并将线程和异常作为参数传递给 handler 的 uncaughtException() 方法进行处理。</p><h5 id="Java-反射"><a href="#Java-反射" class="headerlink" title="Java 反射"></a>Java 反射</h5><h6 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h6><p>在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取信息以及动态调用对象的方法的功能就是反射。</p><h6 id="使用的前提条件"><a href="#使用的前提条件" class="headerlink" title="使用的前提条件"></a>使用的前提条件</h6><ul><li>必须先得到代表字节码的Class对象，Class类用于表示.class文件（字节码）。</li><li>在运行期间，一个类，只有一个Class对象产生。</li></ul><h6 id="获取Class对象的三种方式"><a href="#获取Class对象的三种方式" class="headerlink" title="获取Class对象的三种方式"></a>获取Class对象的三种方式</h6><ul><li>Object ——&gt; getClass();</li><li>任何数据类型（包括基本数据类型）都有一个“静态”的class属性 Student.class</li><li>通过Class类的静态方法：Class.forName(String  className) (常用) JDBC加载驱动</li></ul><p>比较： 源自Java 编程思想</p><ul><li><p>Student.class 只是加载类，不会进行初始化操作。</p></li><li><p>Class.forName(String  className) 会加载类，同时链接、初始化（类加载流程）</p><p><img src="https://mubu.com/document_image/fa73d98b-d2a1-4a5d-9e48-2cd1e4b2475d-983181.jpg" alt="img"></p></li></ul><h6 id="使用规范"><a href="#使用规范" class="headerlink" title="使用规范"></a>使用规范</h6><p><strong>获取构造方法</strong></p><ul><li><p>批量的方法：</p><ul><li>public Constructor[] getConstructors()：所有”公有的”构造方法</li><li>public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)</li></ul></li><li><p>获取单个的方法，并调用：</p><ul><li>public Constructor getConstructor(Class… parameterTypes): 获取单个的”公有的”构造方法</li><li>public Constructor getDeclaredConstructor(Class… parameterTypes):获取”某个构造方法”可以是私有的，或受保护、默认、公有</li></ul></li><li><p>调用构造方法：</p><ul><li>Constructor–&gt;newInstance(Object… initargs)</li></ul></li></ul><p><strong>获取成员变量并调用</strong></p><ul><li><p>批量的</p><ul><li>Field[] getFields():获取所有的”公有字段”</li><li>Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有</li></ul></li><li><p>获取单个的</p><ul><li>public Field getField(String fieldName):获取某个”公有的”字段</li><li>public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的)</li></ul></li><li><p>设置字段的值：</p><ul><li>Field –&gt; public void set(Object obj,Object value):</li><li>参数说明：obj:要设置的字段所在的对象 value:要为字段设置的值；</li></ul></li></ul><p><strong>获取成员方法并调用</strong></p><ul><li><p>批量的：</p><ul><li>public Method[] getMethods():获取所有”公有方法”；（包含了父类的方法也包含Object类）</li><li>public Method[] getDeclaredMethods():获取所有的成员方法，包括私有的(不包括继承的)</li></ul></li><li><p>获取单个的：</p><ul><li>public Method getMethod(String name,Class&lt;?&gt;… parameterTypes): 参数： name : 方法名；Class … : 形参的Class类型对象</li><li>public Method getDeclaredMethod(String name,Class&lt;?&gt;… parameterTypes)</li></ul></li><li><p>调用方法：</p><ul><li>Method –&gt; public Object invoke(Object obj,Object… args)</li><li>参数说明：obj : 要调用方法的对象； args:调用方式时所传递的实参；</li></ul></li></ul><p><strong>反射 main 方法</strong>，对于静态方法 getMethod 方法的第一个参数为null</p><p><strong>通过反射运行配置文件内容</strong>，通过修改配置文件就可以实现对不同的类进行反射</p><p><strong>通过反射越过泛型检查</strong></p><p><strong>通过反射获得方法的参数名称</strong></p><p>​    JDK 1.8 <em>通过设置编译时是否保留参数名称</em>，否则参数名称将会变成 arg1、arg2等。勾选最下面的一个选项即可。</p><p><img src="https://mubu.com/document_image/0cc9ab96-dacf-411c-8a19-8351c2203797-983181.jpg" alt="img"></p><p>​    案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取某方法的参数名称</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getParameterNameJava8</span><span class="params">(Class clazz, String methodName)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (methods[i].getName().equals(methodName)) &#123;</span><br><span class="line">            Parameter[] p = methods[i].getParameters();</span><br><span class="line">            <span class="keyword">for</span> (Parameter parameter : p) &#123;</span><br><span class="line">                lists.add(parameter.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lists;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Java-新特性"><a href="#Java-新特性" class="headerlink" title="Java 新特性"></a>Java 新特性</h5><p><a href="https://www.cnblogs.com/tony-yang-flutter/p/3503935.html" target="_blank" rel="noopener">https://www.cnblogs.com/tony-yang-flutter/p/3503935.html</a></p><ul><li><p>jdk 1.5</p><ul><li>枚举</li><li>for-each</li><li>泛型</li><li>自动拆箱和装箱功能</li><li>可变参数</li><li>静态导入</li><li>Lock 并发包</li></ul></li></ul><ul><li><p>jdk 1.6</p><ul><li>synchronized 的升级 (自旋、锁消除、锁粗化)</li></ul></li></ul><ul><li><p>jdk 1.7</p><ul><li><p>泛型推断<br>Map&lt;String, List<string>&gt; map = new HashMap&lt;&gt;();</string></p></li><li><p>二进制面值<br>int i = 0b1010; // 10</p></li><li><p>数字变量对下滑线的支持<br>int i = 12_3;</p></li><li><p>switch对String的支持</p></li><li><p>Try-with-resources</p><blockquote><p><strong>利用Try-Catch-Finally管理资源（旧的代码风格）</strong></p><ul><li>即使try语句块中抛出的异常与异常传播更相关，最终还是finally语句块中抛出的异常会根据调用栈向外传播。会抛出finally语句块中资源关闭的异常。</li></ul><p><strong>try-with-resources管理资源</strong></p><ul><li>当try-with-resources结构中抛出一个异常，同时FileInputStream被关闭时（调用了其close方法）也抛出一个异常，try-with-resources结构中抛出的异常会向外传播，而FileInputStream关闭时抛出的异常被抑制了。</li></ul><p><strong>AutoCloseable和Closeable的关系</strong></p><ul><li><p>java.lang.AutoCloseable</p><ul><li>Java 7引入，为所有可以关闭的对象提供资源释放实现，成为java.io.Closeable的父接口</li><li>使用Java 7以及更高版本实现接口后可以使用try-with-resource语法实现自动释放资源</li><li>close()方法声明抛出java.lang.Exception，意味着接口实现类的close()方法可以声明抛出Exception或者Exception的子类</li><li>close()方法不需要保证多次调用不产生副作用</li></ul></li><li><p>java.io.Closeable</p><ul><li>Java 5引入，为流对象提供资源释放实现</li><li>使用Java 7及更高版本实现接口后可以使用try-with-resource语法实现自动释放资源</li><li>close()方法声明抛出java.io.IOException，意味着接口实现类的close()方法只能声明抛出IOException或者IOException的子类</li><li>close()方法需要保证多次调用不产生副作用</li></ul></li></ul></blockquote></li></ul></li><li><p>jdk 1.8</p><ul><li><p>Lambda 表达式 <a href="https://www.cnblogs.com/franson-2016/p/5593080.html" target="_blank" rel="noopener">https://www.cnblogs.com/franson-2016/p/5593080.html</a></p><ul><li>编译器推断并帮你转换包装为常规的代码,因此你可以使用更少的代码来实现同样的功能。</li><li>基本语法:<ul><li>(parameters) -&gt; expression</li><li>(parameters) -&gt;{ statements; }</li></ul></li></ul></li><li><p>接口的默认方法 <a href="https://blog.csdn.net/qq_40369829/article/details/79356133" target="_blank" rel="noopener">https://blog.csdn.net/qq_40369829/article/details/79356133</a></p><p><em>默认方法 default :</em></p><ul><li>可以通过实现接口的类实例化的对象来调用，也可以被重写。</li><li>是 public 的。</li></ul><p><em>静态方法 static：</em></p><p>只能在本接口中调用，实现类中也不能调用。职责上是工具方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        getStatic();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注解(Annotation)</p><p> <a href="https://www.cnblogs.com/xdp-gacl/p/3622275.html" target="_blank" rel="noopener">https://www.cnblogs.com/xdp-gacl/p/3622275.html</a></p></li><li><p>Fork/Join 框架</p><ul><li>在必要的情况下，将一个大任务，进行拆分（fork）成若干个子任务（拆到不能再拆，这里就是指我们制定的拆分的临界值），再将一个个小任务的结果进行join汇总。</li><li>Fork/Join与传统线程池的区别<ul><li>Fork/Join采用“工作窃取模式”，当执行新的任务时他可以将其拆分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随即线程中偷一个并把它加入自己的队列中。</li><li>就比如两个CPU上有不同的任务，这时候A已经执行完，B还有任务等待执行，这时候A就会将B队尾的任务偷过来，加入自己的队列中，对于传统的线程，ForkJoin更有效的利用的CPU资源！</li></ul></li></ul></li><li><p>optional <a href="https://blog.csdn.net/aitangyong/article/details/54564100" target="_blank" rel="noopener">https://blog.csdn.net/aitangyong/article/details/54564100</a></p><ul><li>使用 Optional 避免 null 导致的 NullPointerException</li><li>Optional.of() 或者 Optional.ofNullable()：创建 Optional 对象，差别在于 of 不允许参数是null，而 ofNullable 则无限制。</li><li>Optional.empty()：所有null包装成的Optional对象</li><li>isPresent()：判断值是否存在</li><li>ifPresent(Consumer consumer)：如果option对象保存的值不是null，则调用consumer对象，否则不调用</li><li>orElse(value)：如果optional对象保存的值不是null，则返回原来的值，否则返回value参数</li></ul></li><li><p>jvm 元空间代替永久代</p></li><li><p>HashMap 链表长度&gt;=8时，转换为红黑树；取消 Segment 使用 CAS 和 Synchronized 进行锁操作。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Throwable-Java异常的基类&quot;&gt;&lt;a href=&quot;#Throwable-Java异常的基类&quot; class=&quot;headerlink&quot; title=&quot;Throwable Java异常的基类&quot;&gt;&lt;/a&gt;Throwable Java异常的基类&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;https://mubu.com/document_image/34564eaa-c11d-4197-baba-e099c5c74909-983181.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt;: 用于标记严重错误。合理的应用程序不应该去 try/catch 这种错误。绝大多数的错误都是非正常的，就根本不该出现的。常见的有OOM、StackOverflowError。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception&lt;/strong&gt;: 用于指示一种合理的程序想去 catch 的条件。即它仅仅是一种程序运行条件，而非严重错误，并且鼓励用户程序去 catch 它。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java 学习" scheme="http://mindyu.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="笔记整理" scheme="http://mindyu.com/tags/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
      <category term="面经" scheme="http://mindyu.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="Java异常" scheme="http://mindyu.com/tags/Java%E5%BC%82%E5%B8%B8/"/>
    
      <category term="Java反射" scheme="http://mindyu.com/tags/Java%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Java 类加载和双亲委派模型</title>
    <link href="http://mindyu.com/2018/11/28/Java%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/"/>
    <id>http://mindyu.com/2018/11/28/Java 类加载与双亲委派模型/</id>
    <published>2018-11-28T12:48:41.000Z</published>
    <updated>2019-01-13T07:44:09.847Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h4 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h4><p>加载，连接(验证，准备，解析)，初始化</p><p><img src="https://mubu.com/document_image/1274e1ce-70d8-467b-b8ba-de9c51d3fb9a-983181.jpg" alt="img"></p><a id="more"></a><h5 id="类加载阶段总共分为五个阶段："><a href="#类加载阶段总共分为五个阶段：" class="headerlink" title="类加载阶段总共分为五个阶段："></a>类加载阶段总共分为五个阶段：</h5><p><strong>加载</strong></p><p>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的入口。注意这里不一定非得要从一个 class 文件获取，这里既可以从ZIP包中读取（比如从jar包和war包中读取），也可以在运行时计算生成（动态代理），也可以由其它文件生成（比如将JSP文件转换成对应的Class类）</p><p><strong>验证</strong></p><p>为了确保 Class 文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><p>包含四种验证：</p><ol><li>文件格式验证</li></ol><p>验证字节流是否符合 class 文件格式的规范，并且能被当前版本的虚拟机处理</p><ol start="2"><li>元数据验证</li></ol><p>对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范的要求</p><ol start="3"><li>字节码验证</li></ol><p>进行数据流和控制流分析</p><ol start="4"><li>符号引用验证</li></ol><p><strong>准备</strong></p><p>为类的静态变量分配内存并将其初始化为默认值,这些内存都将在方法区中进行分配。准备阶段不分配类中的实例变量的内存,实例变量将会在对象实例化时随着对象一起分配在Java 堆中。静态常量会直接赋值。</p><p>默认值</p><p><img src="https://mubu.com/document_image/610c4fad-fb70-456d-96c3-7bb615f0edc0-983181.jpg" alt="img"></p><p><strong>解析</strong></p><p>虚拟机将常量池中的符号引用替换为直接引用的过程。</p><blockquote><p>符号引用：以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。</p><p>直接引用：指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。</p></blockquote><p><strong>初始化</strong></p><p>类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由JVM主导。到了初始化阶段，才开始真正执行类中定义的Java程序代码。</p><p>初始化阶段是<strong>执行类构造器 clinit() 方法</strong>的过程。clinit() 方法是由编译器自动收集类中的所有<strong>类变量</strong>的赋值动作和<strong>静态语句块(static{}块)</strong>中的语句合并产生的。</p><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><h6 id="启动类加载器-Bootstrap-ClassLoader"><a href="#启动类加载器-Bootstrap-ClassLoader" class="headerlink" title="启动类加载器(Bootstrap ClassLoader)"></a>启动类加载器(Bootstrap ClassLoader)</h6><p>负责加载 JAVA_HOME\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。<u>使用C++实现，属于虚拟机的自身的一部分。而其他的类加载器使用Java语言实现，独立于虚拟机外部，并且全部继承自java.lang.ClassLoader。</u></p><h6 id="扩展类加载器-Extension-ClassLoader"><a href="#扩展类加载器-Extension-ClassLoader" class="headerlink" title="扩展类加载器(Extension ClassLoader)"></a>扩展类加载器(Extension ClassLoader)</h6><p>负责加载 JAVA_HOME\lib\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</p><h6 id="应用程序类加载器-Application-ClassLoader"><a href="#应用程序类加载器-Application-ClassLoader" class="headerlink" title="应用程序类加载器(Application ClassLoader)"></a>应用程序类加载器(Application ClassLoader)</h6><p>负责加载用户路径（classpath）上的类库。可以通过ClassLoader.getSystemClassLoader()来获取它。</p><h6 id="用户自定义类加载器"><a href="#用户自定义类加载器" class="headerlink" title="用户自定义类加载器"></a>用户自定义类加载器</h6><p>通过继承 java.lang.ClassLoader 类的方式实现。</p><h5 id="自定义加载器"><a href="#自定义加载器" class="headerlink" title="自定义加载器"></a>自定义加载器</h5><ol><li>继承 ClassLoader 类并重写 findClass 方法。否则会报运行时异常。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol><li>如果想打破双亲委派模型则需要重写 loadClass 方法。默认的 loadClass 方法是实现了双亲委派机制的逻辑，即会先让父类加载器加载，当无法加载时才由自己加载。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// 首先检查请求的类是否已经被加载过</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;<span class="comment">// 未被加载</span></span><br><span class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);<span class="comment">// 调用父加载器的 loadclass</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name); <span class="comment">// 父加载器为空时，使用启动类加载器</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                    c = findClass(name);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>当一个类加载器收到类加载任务，会先交给其父类加载器去完成，因此最终加载任务都会传递到顶层的启动类加载器，只有当父类加载器无法完成加载任务时，才会尝试执行加载任务。</p><p><img src="https://mubu.com/document_image/136b94af-57ea-4e10-b05f-41996811545d-983181.jpg" alt="img"></p><p><u>注：启动类加载器无法被 java 程序直接引用，用户在编写自定义类加载器时，如果需要把请求加载委派给引导类加载器，那么字节使用 null 即可。</u></p><p>好处：比如加载位于rt.jar包中的类 java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。<strong>保证类的唯一性</strong>、 <strong>因类加载器的分层使得类也分层次加载(带有优先级)</strong>。</p><h5 id="打破双亲委派模型的三种情况"><a href="#打破双亲委派模型的三种情况" class="headerlink" title="打破双亲委派模型的三种情况"></a>打破双亲委派模型的三种情况</h5><ol><li><p>双亲委派模型与JDK1.2时引入的，为了向前兼容，新增一个 protected 的 findClass() 方法。在此之前用户继承 ClassLoader 类就是为了重写 loadClass() 方法。而之后则不推荐覆盖 loadClass() 方法，而是<strong>把类加载逻辑写到 findClass() 方法中</strong>。</p></li><li><p>双亲委派很好的解决了各个类加载器的基础类的统一问题。但是如果基础类需要回调用户代码则无法实现。<em>比如 JNDI（Java 命名和目录接口），由启动类加载器加载，实现对资源进行集中管理和查找，它需要调用由独立厂商实现并部署在应用程序的 ClassPath 下的 JNDI 接口提供者（SPI），但是启动类加载器不可能“认识”这些代码。JDBC、JCE、JAXB、JBI也是如此。</em></p><p>解决方案为：<strong>线程上下文类加载器</strong>。该类加载器通过 Thread 类的 setContextClassLoader() 方法进行设置。 如果创建线程时没有还未设置，则从父线程中继承一个，如果应用程序的全局范围内都没有设置过的话，那么该类加载器就是应用程序类启动器。</p><p>然后上下文类加载器去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作。</p></li><li><p>由于用户对程序动态性的追求而导致。比如<strong>代码热替换、模块热部署</strong>等。</p><p>OSGI（Open Service Gateway Initiative）开放服务网关协议为 Java 动态化模块化系统的一系列规范。而 <strong>OSGI 实现模块化热部署的关键则是它自定义的类加载器机制的实现</strong>。每一个程序模块（OSGI中称为 Bundle）都有一个自己的类加载器，当需要更换一个 Bundle 时，就把 Bundle 连同类加载器一起换掉以实现代码的热替换。</p><p>在OSGI环境下，类加载器不再是双亲委派模型的树状结构，而是进一步发展为更加复杂的网状结构。加载流程为：</p><blockquote><ol><li>将以 java.* 开头的类委派给父类加载器加载</li><li>否则，将委派列表名单内的类委派给父类加载器加载</li><li>否则，将 Import 列表中的类委派给 Export 这个类的 Bundle 的类加载器加载</li><li>否则，查找当前 Bundle 的 ClassPath ，使用自己的类加载器加载</li><li>否则，查找类是否在自己的 Fragment Bundle 中，如果在，则委派给 Fragment Bundle 的类加载器加载</li><li>否则，查找 Dynamic Import 列表的 Bundle，委派给对应的 Bundle 的类加载器加载</li><li>否则，类查找失败。</li></ol></blockquote></li></ol><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="何时开始类的初始化（主动引用）"><a href="#何时开始类的初始化（主动引用）" class="headerlink" title="何时开始类的初始化（主动引用）"></a>何时开始类的初始化（主动引用）</h5><ol><li>创建类的实例</li><li>访问类的静态变量(除常量【被final修辞的静态变量】)</li><li>访问类的静态方法</li><li>反射如(Class.forName(“my.xyz.Test”))</li><li>当初始化一个类时，发现其父类还未初始化，则先出发父类的初始化（对于接口，使用时才会去初始化父接口）</li><li>虚拟机启动时，定义了Main()方法的那个类先初始化</li></ol><h5 id="不会初始化类的情况-（被动引用）"><a href="#不会初始化类的情况-（被动引用）" class="headerlink" title="不会初始化类的情况 （被动引用）"></a>不会初始化类的情况 （被动引用）</h5><ol><li><strong>子类调用父类的静态变量，子类不会被初始化</strong>。只有父类被初始化。对于静态字段，只有直接定义这个字段的类才会被初始化</li><li>通过数组定义来引用类，不会触发类的初始化  SubClass[] arr= new SubClass[10];</li><li>访问类的常量，不会初始化类</li><li>反射通过 .class 获取 class 对象时</li><li>反射通过 Class.forName(“my.xyz.Test”,false,ClassLoader.getSystemClassLoader()) 第二个参数代表是否初始化类</li></ol><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(Father.FAN);  <span class="comment">// 访问常量</span></span><br><span class="line">Class clazz = Father.class;<span class="comment">// .class 获取 class 对象</span></span><br><span class="line">System.out.println(clazz.getName()); <span class="comment">// 输出全限定名</span></span><br><span class="line">System.out.println(clazz.getSimpleName());    <span class="comment">// 输出类名(不包含包名)</span></span><br><span class="line">Father[] f = <span class="keyword">new</span> Father[<span class="number">10</span>];<span class="comment">// 数组定义来引用类</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(<span class="string">"Father"</span>,<span class="keyword">false</span>,ClassLoader.getSystemClassLoader());  <span class="comment">// 也不会初始化</span></span><br><span class="line">System.out.println(<span class="string">"----------"</span>);</span><br><span class="line">Class.forName(<span class="string">"Father"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FAN = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Father类初始化"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果图</p><p><img src="https://mubu.com/document_image/6c5df023-bda6-4b36-ad9c-bd1f7b5e652c-983181.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;类加载过程&quot;&gt;&lt;a href=&quot;#类加载过程&quot; class=&quot;headerlink&quot; title=&quot;类加载过程&quot;&gt;&lt;/a&gt;类加载过程&lt;/h4&gt;&lt;p&gt;加载，连接(验证，准备，解析)，初始化&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mubu.com/document_image/1274e1ce-70d8-467b-b8ba-de9c51d3fb9a-983181.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java 学习" scheme="http://mindyu.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="笔记整理" scheme="http://mindyu.com/tags/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
      <category term="面经" scheme="http://mindyu.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="Java类加载机制" scheme="http://mindyu.com/tags/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java Object类与内部类</title>
    <link href="http://mindyu.com/2018/11/24/Java%20Object%E7%B1%BB%E4%B8%8E%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://mindyu.com/2018/11/24/Java Object类与内部类/</id>
    <published>2018-11-24T02:25:41.000Z</published>
    <updated>2019-01-12T14:43:38.992Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h5 id="Object-类"><a href="#Object-类" class="headerlink" title="Object 类"></a>Object 类</h5><p>Java Object类为所有类的基类，所有类都是该类的子类。有时候面试官也会问到Object类中存在哪些方法等问题。</p><p><strong>包含的所有方法</strong></p><p>9个 public 方法（4+5）</p><ul><li>getClass()、hashCode()、equals(Object obj)、toString()</li><li>notify()、notifyAll()、wait()、wait(long timeout)、wait(long timeout, int nanos)</li></ul><p>2个 protect 方法</p><ul><li>clone()、finalize()</li></ul><a id="more"></a><p>JDK1.8 Object类源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        registerNatives();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                                <span class="string">"nanosecond timeout value out of range"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            timeout++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        wait(timeout);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>wait() 与 notify()/notifyAll()</strong></p><p>wait(): 释放占有的对象锁，线程进入等待池，释放cpu，而其他正在等待的线程即可抢占此锁，获得锁的线程即可运行程序。</p><p>Thread.sleep()：此方法为<strong>线程方法</strong>，线程调用此方法后，会休眠一段时间，休眠期间，会暂时释放cpu，但并不释放对象锁。</p><p>notify(): 该方法会唤醒因为调用对象的wait()而等待的线程，其实就是对对象锁的唤醒，从而使得wait()的线程可以有机会获取对象锁。调用notify()后，并不会立即释放锁，而是继续执行当前代码，直到 synchronized 中的代码全部执行完毕，才会释放对象锁。JVM则会在等待的线程中调度一个线程去获得对象锁，执行代码。<em>注意：wait() 方法需要 try/catch 包裹（会出现 InterruptedException 检查异常），另外wait()和notify()必须在 synchronized 代码块中（否则出现 IllegalMonitorStateException 运行时异常）。</em></p><p>notifyAll()则是唤醒所有等待的线程。</p><h5 id="内部类-https-www-cnblogs-com-chenssy-p-3388487-html"><a href="#内部类-https-www-cnblogs-com-chenssy-p-3388487-html" class="headerlink" title="内部类 https://www.cnblogs.com/chenssy/p/3388487.html"></a>内部类 <a href="https://www.cnblogs.com/chenssy/p/3388487.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenssy/p/3388487.html</a></h5><h6 id="为什么要使用内部类"><a href="#为什么要使用内部类" class="headerlink" title="为什么要使用内部类"></a>为什么要使用内部类</h6><p>​    每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。内部类使得多重继承的解决方案变得更加完整。</p><p>​    特性</p><p>1、内部类可以用多个实例，每个实例都有自己的状态信息，并且与其他外围对象的信息相互独立。</p><p>2、在单个外围类中，可以让多个内部类以不同的方式实现同一个接口，或者继承同一个类。</p><p>3、创建内部类对象的时刻并不依赖于外围类对象的创建。</p><p>4、内部类并没有令人迷惑的“is-a”关系，他就是一个独立的实体。</p><p>5、内部类提供了更好的封装，除了该外围类，其他类都不能访问。</p><h6 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h6><ul><li><p>成员内部类中不能存在任何 static 的变量和方法</p></li><li><p>成员内部类是依附于外围类的，所以只有先创建了外围类才能够创建内部类。</p></li><li><p>推荐使用 getxxx() 来获取成员内部类，尤其是该内部类的构造函数无参数时 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outerDisplay</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"outerClass..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">innerDisplay</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//使用外围内的属性</span></span><br><span class="line">            str = <span class="string">"chenssy..."</span>;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">            <span class="comment">//使用外围内的方法</span></span><br><span class="line">            outerDisplay();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*推荐使用getxxx()来获取成员内部类，尤其是该内部类的构造函数无参数时 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InnerClass <span class="title">getInnerClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InnerClass();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OuterClass outer = <span class="keyword">new</span> OuterClass();</span><br><span class="line">        OuterClass.InnerClass inner = outer.getInnerClass();</span><br><span class="line">        inner.innerDisplay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h6><ul><li>嵌套在方法和作用于内</li><li>对于这个类的使用主要是应用与解决比较复杂的问题，想创建一个类来辅助我们的解决方案，到那时又不希望这个类是公共可用的，所以就产生了局部内部类，局部内部类和成员内部类一样被编译，只是它的作用域发生了改变，它只能在该方法和属性中被使用，出了该方法和属性就会失效。</li></ul><h6 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h6><ul><li><p>匿名内部类是没有访问修饰符的</p></li><li><p>new 匿名内部类，这个类首先是要存在的。如果我们将那个InnerClass接口注释掉，就会出现编译出错。</p></li><li><p>注意getInnerClass()方法的形参，第一个形参是用final修饰的，而第二个却没有。同时我们也发现第二个形参在匿名内部类中没有使用过，所以<strong>当所在方法的形参需要被匿名内部类使用，那么这个形参就必须为final。</strong></p></li><li><p>匿名内部类是没有构造方法的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> InnerClass <span class="title">getInnerClass</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> num,String str2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InnerClass()&#123;</span><br><span class="line">            <span class="keyword">int</span> number = num + <span class="number">3</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> number;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;        <span class="comment">/* 注意：分号不能省 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OuterClass out = <span class="keyword">new</span> OuterClass();</span><br><span class="line">        InnerClass inner = out.getInnerClass(<span class="number">2</span>, <span class="string">"chenssy"</span>);</span><br><span class="line">        System.out.println(inner.getNumber());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h6><ul><li>它的<strong>创建是不需要依赖于外围类</strong>的</li><li>它<strong>不能使用任何外围类的非static成员变量和方法</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Object-类&quot;&gt;&lt;a href=&quot;#Object-类&quot; class=&quot;headerlink&quot; title=&quot;Object 类&quot;&gt;&lt;/a&gt;Object 类&lt;/h5&gt;&lt;p&gt;Java Object类为所有类的基类，所有类都是该类的子类。有时候面试官也会问到Object类中存在哪些方法等问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;包含的所有方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;9个 public 方法（4+5）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getClass()、hashCode()、equals(Object obj)、toString()&lt;/li&gt;
&lt;li&gt;notify()、notifyAll()、wait()、wait(long timeout)、wait(long timeout, int nanos)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2个 protect 方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clone()、finalize()&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java 学习" scheme="http://mindyu.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="笔记整理" scheme="http://mindyu.com/tags/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
      <category term="面经" scheme="http://mindyu.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="Java内部类" scheme="http://mindyu.com/tags/Java%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程</title>
    <link href="http://mindyu.com/2018/11/18/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://mindyu.com/2018/11/18/Java 并发编程/</id>
    <published>2018-11-18T02:25:41.000Z</published>
    <updated>2019-01-12T14:46:30.221Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h5 id="Java-并发基础"><a href="#Java-并发基础" class="headerlink" title="Java 并发基础"></a>Java 并发基础</h5><p>在并发编程中，如果想要一个程序正确的执行，必须保证<strong>原子性</strong>、<strong>可见性</strong>以及<strong>有序性</strong>，只要有一个没有被保证，就有可能会导致程序运行不正确。</p><p>需要考虑的问题</p><ul><li><p>原子问题</p><p>一个操作或多个操作要么全部执行并且执行过程中不能被任何操作打断，要么都不执行。</p></li><li><p>可见性问题</p><p>多个线程访问同一个变量时，一个线程修改了这个变量的值，其它线程能够立即看到修改的值。</p></li><li><p>有序性问题</p><p>程序执行的顺序按照代码的先后顺序执行。在 java 内存模型中，允许编译器和处理器对执行进行重排，但是重排过程不会影响单线程程序的执行，却会影响到多线程并发执行的正确性。</p></li></ul><a id="more"></a><p><strong>指令重排</strong></p><p>一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。如果两个语句之间没有数据依赖，那么可能会被重排。指令重排不会影响单个线程的执行，但是会影响到线程并发执行的正确性。</p><h5 id="CyclicBarrier-和-CountDownLatch-的区别"><a href="#CyclicBarrier-和-CountDownLatch-的区别" class="headerlink" title="CyclicBarrier 和 CountDownLatch 的区别"></a>CyclicBarrier 和 CountDownLatch 的区别</h5><ul><li>CountDownLatch 简单的说就是<strong>一个或多个线程等待</strong>，直到它所等待的其他线程都<strong>执行完成</strong>并且调用countDown() 方法发出通知后，当前线程才可以继续执行。</li><li>CyclicBarrier 是<strong>所有线程都进行等待</strong>，直到所有线程<strong>都准备好</strong>进入 await() 方法之后，<strong>所有线程同时开始执行</strong>！</li><li>CountDownLatch 的计数器只能使用一次。而 CyclicBarrier 的计数器可以使用 reset() 方法重置。所以 CyclicBarrier 能处理更为复杂的业务场景，比如如果计算发生错误，可以重置计数器，并让线程们重新执行一次。</li><li>CyclicBarrier 还提供其他有用的方法，比如 getNumberWaiting 方法可以获得 CyclicBarrier 阻塞的线程数量。isBroken 方法用来知道阻塞的线程是否被中断。如果被中断返回true，否则返回false。</li></ul><h5 id="BIO、NIO、AIO"><a href="#BIO、NIO、AIO" class="headerlink" title="BIO、NIO、AIO"></a>BIO、NIO、AIO</h5><p><strong>同步、异步、阻塞、非阻塞</strong> <a href="https://blog.csdn.net/u013851082/article/details/53942947" target="_blank" rel="noopener">https://blog.csdn.net/u013851082/article/details/53942947</a></p><ul><li><p>同步指的是用户进程触发IO操作并等待或者轮询的去查看IO操作是否就绪</p></li><li><p>异步是指用户进程触发IO操作以后便开始做自己的事情，而当IO操作已经完成的时候会得到IO完成的通知（异步的特点就是通知）</p></li><li><p>阻塞方式是指, 当试图对该文件描述符进行读写时, 如果当时没有东西可读,或者暂时不可写, 程序就进入等待状态, 直到有东西可读或者可写为止</p></li><li><p>非阻塞状态下, 如果没有东西可读, 或者不可写, 读写函数马上返回, 而不会等待</p></li></ul><p><strong>Java对 BIO、NIO、AIO 的支持</strong></p><ul><li>Java BIO ：同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。</li><li>Java NIO ：同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。</li><li>Java AIO ：异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由 OS 先完成了再通知服务器应用去启动线程进行处理数据即可</li></ul><p>BIO、NIO、AIO<strong>适用场景</strong>分析:</p><ul><li>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。</li><li>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。</li><li>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。</li></ul><h5 id="ThreadLocal-线程本地存储-http-www-jasongj-com-java-threadlocal"><a href="#ThreadLocal-线程本地存储-http-www-jasongj-com-java-threadlocal" class="headerlink" title="ThreadLocal (线程本地存储) http://www.jasongj.com/java/threadlocal/"></a>ThreadLocal (线程本地存储) <a href="http://www.jasongj.com/java/threadlocal/" target="_blank" rel="noopener">http://www.jasongj.com/java/threadlocal/</a></h5><p>线程的局部变量， 是每一个线程所单独持有的，其他线程不能对其进行访问，可以用来解决对某一个变量的访问冲突问题。当使用 ThreadLocal 维护变量的时候，为每一个使用该变量的线程提供一个独立的变量副本。（会导致内存资源占用增加）</p><p><strong>方法详解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123; &#125; <span class="comment">// 用来获取ThreadLocal在当前线程中保存的变量副本</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123; &#125; <span class="comment">//set()用来设置当前线程中变量的副本</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; &#125; <span class="comment">//remove()用来移除当前线程中变量的副本</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123; &#125; <span class="comment">//initialValue()是一个protected方法，一般是用来在使用时进行重写的</span></span><br></pre></td></tr></table></figure><p><strong>原理</strong></p><p>​    Thread 在内部是通过 ThreadLocalMap 来维护 ThreadLocal 变量表<br><code>ThreadLocal.ThreadLocalMap&lt;ThreadLocal, Object&gt;;</code>初始化时，在 Thread 里面，threadLocals 为空，当通过 ThreadLocal 变量调用 get() 方法或者 set() 方法，就会对 Thread 类中的 threadLocals 进行初始化，并且以当前 ThreadLocal 变量为键值，以 ThreadLocal 要保存的副本变量为 value，存到 threadLocals。然后在当前线程里面，如果要使用副本变量，就可以通过 get 方法在 threadLocals 里面查找调用ThreadLocal.get方法时，实际上是从当前线程中获取ThreadLocalMap&lt;ThreadLocal, Object&gt;，然后根据当前 ThreadLocal 获取当前线程共享变量Object。</p><p><strong>应用场景</strong></p><p>​    解决 <strong>数据库连接、Session管理</strong> 等。ThreadLocal 适用于每个线程需要自己独立的实例且该实例需要在多个方法中被使用，也即变量在<strong>线程间隔离</strong>而在<strong>方法或类间共享</strong>的场景。</p><p><strong>存储结构的优势</strong></p><ul><li><p>ThreadLocalMap 依赖于 Thread ，线程死去的时候，线程本地变量 ThreadLocalMap 则销毁。</p></li><li><p>ThreadLocalMap&lt;ThreadLocal,Object&gt;键值对数量为 ThreadLocal 的数量，一般来说 ThreadLocal 数量很少，相比在 ThreadLocal 中用 Map&lt;Thread, Object&gt; 键值对存储线程本地变量（Thread 数量一般来说比 ThreadLocal 数量多），性能提高很多。</p></li></ul><p><strong>ThreadLocalMap 与内存泄漏</strong></p><ul><li>ThreadLocalMap 的每个 Entry 都是一个对 <strong>键</strong> 的弱引用（下一次GC时会被回收），每个 Entry 都包含了一个对 <strong>值</strong> 的强引用。</li><li>使用<strong>弱引用的原因</strong>在于，当没有强引用指向 ThreadLocal 变量时（线程未结束，但是引用 ThreadLocal 的对象被回收），它可被回收，从而避免上文所述 ThreadLocal 不能被回收而造成的内存泄漏的问题。但是会导致 ThreadLocal 被回收但是 <strong>值</strong> 未被回收，另外 Entry 无法被移除。从而使得实例被该 Entry 引用而无法被回收造成内存泄漏。</li><li>针对该问题，ThreadLocalMap 的 set 方法中，通过 <strong>replaceStaleEntry</strong>方法将所有键为 null 的 Entry 的值设置为 null，从而使得该值可被回收。另外，会在 rehash 方法中通过 <strong>expungeStaleEntry</strong> 方法将键和值为 null 的 Entry 设为 null 从而使得该 Entry 可被回收。通过这种方式，ThreadLocal 可防止内存泄漏。</li></ul><p><strong>为什么要使用 ThreadLocal</strong> <a href="https://blog.csdn.net/zhangzeyuaaa/article/details/43564471" target="_blank" rel="noopener">https://blog.csdn.net/zhangzeyuaaa/article/details/43564471</a></p><p>​    如果我们在方法中要使用方法外的变量（不包括当前类或者父类的成员变量），有两种方式可以引用到方法外的变量：</p><p>​    1.方法传参。</p><p>​    2.将需要被引用的变量定义为类的静态变量。</p><p>​    两种方式都有弊端：方法传参的弊端是可能需要在很多地方传递这个参数，耦合度高（因为变量的存储和获取可能在不同的模块中）；定义为类的静态变量则会引发线程安全问题。</p><p><strong>关于ThreadLocalMap内部类的简单介绍</strong></p><p>​    初始容量16，负载因子2/3，解决冲突的方法是<strong>线性探测再散列</strong>（取下一个可用的地址），也就是：在当前hash的基础上再自增一个常量。</p><h5 id="AQS-抽象队列同步器"><a href="#AQS-抽象队列同步器" class="headerlink" title="AQS 抽象队列同步器"></a>AQS 抽象队列同步器</h5><p>​    一套用于实现基于FIFO等待队列的阻塞锁和相关的同步器的一个同步框架。</p><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><ol><li>使用一个 volatile int 类型的成员变量 state 来表示<strong>状态信息</strong>。</li></ol><ul><li><p>当 state&gt;0 时表示已经获取了锁，当 state = 0 时表示释放了锁。</p></li><li><p>它提供了三个方法（getState()、setState(int newState)、compareAndSetState(int expect,int update)）来对同步状态 state 进行操作，当然 AQS 可以确保对 state 的操作是安全的。</p><p>比如：Semaphore 用它来表现剩余的许可数，ReentrantLock 用它来表现拥有它的线程已经请求了多少次锁；FutureTask 用它来表现任务的状态(尚未开始、运行、完成和取消)</p></li></ul><ol start="2"><li><p>阻塞线程节点队列 CLH Node queue</p><p>内置的FIFO同步队列来完成资源获取线程的排队工作，如果当前线程获取同步状态失败（锁）时，AQS 则会将当前线程以及等待状态等信息构造成一个节点（Node）并将其加入同步队列，同时会阻塞当前线程，当同步状态释放时，则会把节点中的线程唤醒，使其再次尝试获取同步状态。（阻塞和唤醒使用的是 LockSupport.park()  和  LockSupport.unpark() 阻塞原语）</p><p>CLH 队列是一个非阻塞的 FIFO 队列，也就是说往里面插入或移除一个节点的时候，在并发条件下不会阻塞，而是通过自旋锁和 CAS 保证节点插入和移除的原子性。实现无锁且快速的插入。</p></li></ol><h6 id="使用方法-https-blog-csdn-net-vernonzheng-article-details-8275624"><a href="#使用方法-https-blog-csdn-net-vernonzheng-article-details-8275624" class="headerlink" title="使用方法 https://blog.csdn.net/vernonzheng/article/details/8275624"></a>使用方法 <a href="https://blog.csdn.net/vernonzheng/article/details/8275624" target="_blank" rel="noopener">https://blog.csdn.net/vernonzheng/article/details/8275624</a></h6><p>使用 AQS 来实现一个同步器需要覆盖实现如下几个方法</p><ul><li><p>tryAcquire(int arg)：独占式获取同步状态，获取同步状态成功后，其他线程需要等待该线程释放同步状态才能获取同步状态；</p></li><li><p>tryRelease(int arg)：独占式释放同步状态；</p></li><li><p>tryAcquireShared(int arg)：共享式获取同步状态，返回值大于等于0则表示获取成功，否则获取失败；</p></li><li><p>tryReleaseShared(int arg)：共享式释放同步状态；</p></li><li><p>isHeldExclusively()：当前同步器是否在独占式模式下被线程占用，一般该方法表示是否被当前线程所独占；</p></li></ul><h6 id="AQS-实现类"><a href="#AQS-实现类" class="headerlink" title="AQS 实现类"></a>AQS 实现类</h6><p>继承关系图</p><p><img src="https://mubu.com/document_image/a8bb1b96-b524-4032-870a-c491a203fd26-983181.jpg" alt="img"></p><p><em>ReentrantLock</em></p><p>​    需要记录当前线程获取原子状态的次数，如果次数为零，那么就说明这个线程放弃了锁（也有可能其他线程占据着锁从而需要等待），如果次数大于1，也就是获得了重进入的效果，而其他线程只能被park住，直到这个线程重进入锁次数变成0而释放原子状态。</p><p>​    内部Sync类实现的是tryAcquire,tryRelease, isHeldExclusively三个方法(因为获取锁的公平性问题，tryAcquire由继承该Sync类的内部类FairSync和NonfairSync实现)</p><p><em>Semaphore</em></p><p>​    记录当前还有多少次许可可以使用，到0，就需要等待，也就实现并发量的控制，可作为流量控制。Semaphore一开始设置许可数为1，就相当于一把互斥锁。</p><p>​    Semaphore内部类Sync则实现了 tryAcquireShared 和 tryReleasedShared (与 CountDownLatch 相似，因为公平性问题，tryAcquireShared 由其内部类FairSync和NonfairSync实现)。</p><p><em>CountDownLatch</em></p><p>​    闭锁则要保持其状态，在这个状态到达终止态之前，所有线程都会被park住，闭锁可以设定初始值，这个值的含义就是这个闭锁需要被countDown()几次，因为每次CountDown是sync.releaseShared(1),而一开始初始值为10的话，那么这个闭锁需要被countDown()十次，才能够将这个初始值减到0，从而释放原子状态，让等待的所有线程通过。</p><p>​    CountDownLatch 内部类Sync实现了 tryAcquireShared 和 tryReleasedShared。</p><p><em>FutureTask</em></p><p>​    需要记录任务的执行状态，当调用其实例的 get 方法时,内部类 Sync 会去调用AQS的 acquireSharedInterruptibly() 方法，而这个方法会反向调用 Sync 实现的 tryAcquireShared() 方法，即让具体实现类决定是否让当前线程继续还是 park ,而 FutureTask 的 tryAcquireShared 方法所做的唯一事情就是检查状态，如果是 RUNNING 状态那么让当前线程 park 。而跑任务的线程会在任务结束时调用FutureTask 实例的 set 方法（与等待线程持相同的实例），设定执行结果，并且通过 unpark 唤醒正在等待的线程，返回结果。</p><p>​    FutureTask内部类 Sync 也实现了 tryAcquireShared 和 tryReleasedShared。</p><h5 id="java-并发包-J-U-C-同步控制工具-https-blog-csdn-net-heting717-article-details-76768971"><a href="#java-并发包-J-U-C-同步控制工具-https-blog-csdn-net-heting717-article-details-76768971" class="headerlink" title="java 并发包(J.U.C) 同步控制工具 https://blog.csdn.net/heting717/article/details/76768971"></a>java 并发包(J.U.C) 同步控制工具 <a href="https://blog.csdn.net/heting717/article/details/76768971" target="_blank" rel="noopener">https://blog.csdn.net/heting717/article/details/76768971</a></h5><h6 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h6><p><em>特性</em></p><ul><li><p>可重入（获取锁的线程可以重复进入，但要重复退出）</p></li><li><p>可中断 lockInterruptibly()</p></li><li><p>可限时 tryLock()（规定的时间内未能获取锁，则返回 false）</p></li><li><p>公平锁与非公平锁（默认）</p></li></ul><p>  一般意义上的锁是不公平的，不一定先来的线程能先得到锁，后来的线程就后得到锁。不公平的锁可能会产生<strong>饥饿现象</strong>。公平锁的意思就是，这个锁能保证线程是先来的先得到锁。虽然公平锁不会产生饥饿现象，但是公平锁的性能会比非公平锁差很多。</p><p><em>ReentrantLock 的实现</em></p><ul><li>实现主要由3部分组成：<ul><li>CAS状态</li><li>等待队列</li><li>park()</li></ul></li><li>ReentrantLock 的父类中会有一个 state 变量来表示同步的状态</li><li>通过 CAS 操作来设置 state 来获取锁，如果设置成了1，则将锁的持有者给当前线程</li><li>如果拿锁不成功，则会做一个申请，tryAcquire，因为此时可能另一个线程已经释放了锁。</li><li>如果还是没有申请到锁，就 addWaiter，意思是把自己加到等待队列中去</li></ul><h6 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h6><ul><li>Condition与ReentrantLock的关系就类似于 Object.wait()/notify() 与synchronized</li><li>await()方法会使当前线程等待，同时释放当前锁，当其他线程中使用signal()时或者signalAll()方法时，线程会重新获得锁并继续执行。或者当线程被中断时，也能跳出等待。这和 Object.wait() 方法很相似。</li><li>awaitUninterruptibly() 方法与 await() 方法基本相同，但是它并不会在等待过程中响应中断。</li><li>singal() 方法用于唤醒一个在等待中的线程。相对的 singalAll() 方法会唤醒所有在等待中的线程。这和 Obejct.notify() 方法很类似。</li></ul><h6 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h6><p>信号量，控制线程同时进入临界区的数量，可用作流量控制</p><p>常用方法:</p><blockquote><p>acquire() : 获得许可从这个信号量,会阻塞,直到一个可用,或 interrupted线程。</p><p>acquireUninterruptibly() : 获得许可从这个信号量,阻塞,直到一个是可用的。</p><p>tryAcquire() : 获得许可从这个信号量,只有一个可用的时候调用。</p><p>tryAcquire(long timeout, TimeUnit unit) : 获得许可从这个信号量,如果没有一个可用在给定的等待时间和当前线程则返回false,同时可以响应中断。</p><p>release() : 发布许可证,返回信号量。</p></blockquote><h6 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h6><p>读和写是两种不同的功能，读-读不互斥，读-写互斥，写-写互斥。这样的设计是并发量提高了，又保证了数据安全。</p><h6 id="CountDownLatch-倒数计时器、闭锁"><a href="#CountDownLatch-倒数计时器、闭锁" class="headerlink" title="CountDownLatch 倒数计时器、闭锁"></a>CountDownLatch 倒数计时器、闭锁</h6><p>一种典型的场景就是火箭发射。在火箭发射前，为了保证万无一失，往往还要进行各项设备、仪器的检查。只有等所有检查完毕后，引擎才能点火。这种场景就非常适合使用CountDownLatch。它可以使得点火线程，等待所有检查线程全部完工后，再执行。</p><h6 id="CyclicBarrier-屏障"><a href="#CyclicBarrier-屏障" class="headerlink" title="CyclicBarrier 屏障"></a>CyclicBarrier 屏障</h6><p>CyclicBarrier 是所有线程都进行等待，直到所有线程都准备好进入 await() 方法之后，所有线程同时开始执行！另外 CyclicBarrier 可以反复使用。</p><h6 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h6><p>提供线程阻塞原语，和 suspend 类似。与 suspend 相比 不容易引起线程冻结，使用 LockSupport 则不会发生死锁。park() 能够响应中断，但不抛出异常。中断响应的结果是，park() 函数的返回，可以从Thread.interrupted() 得到中断标志。LockSupport 提供 park() 和 unpark() 方法实现<strong>阻塞线程和解除线程阻塞</strong>,实现的阻塞和解除阻塞是基于”许可(permit)”作为关联,permit 相当于一个信号量(0,1)，默认是0。线程之间不再需要一个Object或者其它变量来存储状态,不再需要关心对方的状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Java-并发基础&quot;&gt;&lt;a href=&quot;#Java-并发基础&quot; class=&quot;headerlink&quot; title=&quot;Java 并发基础&quot;&gt;&lt;/a&gt;Java 并发基础&lt;/h5&gt;&lt;p&gt;在并发编程中，如果想要一个程序正确的执行，必须保证&lt;strong&gt;原子性&lt;/strong&gt;、&lt;strong&gt;可见性&lt;/strong&gt;以及&lt;strong&gt;有序性&lt;/strong&gt;，只要有一个没有被保证，就有可能会导致程序运行不正确。&lt;/p&gt;
&lt;p&gt;需要考虑的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原子问题&lt;/p&gt;
&lt;p&gt;一个操作或多个操作要么全部执行并且执行过程中不能被任何操作打断，要么都不执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可见性问题&lt;/p&gt;
&lt;p&gt;多个线程访问同一个变量时，一个线程修改了这个变量的值，其它线程能够立即看到修改的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有序性问题&lt;/p&gt;
&lt;p&gt;程序执行的顺序按照代码的先后顺序执行。在 java 内存模型中，允许编译器和处理器对执行进行重排，但是重排过程不会影响单线程程序的执行，却会影响到多线程并发执行的正确性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java 学习" scheme="http://mindyu.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="笔记整理" scheme="http://mindyu.com/tags/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
      <category term="面经" scheme="http://mindyu.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="Java多线程" scheme="http://mindyu.com/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 锁详解</title>
    <link href="http://mindyu.com/2018/11/16/Java%20%E9%94%81%E8%AF%A6%E8%A7%A3/"/>
    <id>http://mindyu.com/2018/11/16/Java 锁详解/</id>
    <published>2018-11-16T02:25:41.000Z</published>
    <updated>2019-01-12T14:47:53.289Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h5 id="synchronized-与-Lock-的区别"><a href="#synchronized-与-Lock-的区别" class="headerlink" title="synchronized 与 Lock 的区别"></a>synchronized 与 Lock 的区别</h5><p><strong>synchronized</strong></p><ul><li>存在层次：Java 的关键字，在jvm层面上</li><li>锁的释放：1、获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁</li><li>锁的获取：假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待</li><li>锁状态：无法判断</li><li>锁类型：可重入 不可中断 非公平</li><li>性能：适用于少量同步</li></ul><p><strong>Lock</strong></p><ul><li><p>存在层次：一个类</p></li><li><p>锁的释放：在 finally 语句块中必须释放锁，不然容易造成线程死锁</p></li><li><p>锁的获取：分情况而定，Lock 有多个锁获取的方式，可以尝试获得锁，线程可以不会一直等待</p></li><li><p>锁状态：可以判断</p></li><li><p>锁类型：可重入 可中断 可公平（默认为非公平）</p></li><li><p>性能：适用于大量同步</p></li></ul><a id="more"></a><p><strong>常见问题</strong>：<em>Synchronized 同步静态方法 和 非静态方法</em></p><ul><li>Synchronized 同步静态方法 是对<strong>整个类</strong>加锁</li><li>Synchronized 同步非静态方法 是<strong>对类的某个对象</strong>加锁</li><li>Synchronized(this) 对<strong>当前对象</strong>进行加锁，Synchronized(Test.class)对<strong>类对象</strong>进行加锁</li></ul><p><em>静态方法同步与对象方法同步不互斥</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">测试结果：</span></span><br><span class="line"><span class="comment">Sun Aug 12 11:22:30 CST 2018</span></span><br><span class="line"><span class="comment">同步块完成:Sun Aug 12 11:22:33 CST 2018</span></span><br><span class="line"><span class="comment">同步方法完成:Sun Aug 12 11:22:36 CST 2018</span></span><br><span class="line"><span class="comment">静态方法同步完成:Sun Aug 12 11:22:40 CST 2018</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Test.fun1();        <span class="comment">// 静态方法同步，对类进行加锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                t.fun2();            <span class="comment">// 对同步块，对Test的对象进行加锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                t.fun3();            <span class="comment">// 对非静态方法同步，对Test的对象进行加锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date());</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            System.out.println(<span class="string">"静态方法同步完成:"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                System.out.println(<span class="string">"同步块完成:"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            System.out.println(<span class="string">"同步方法完成:"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="synchronized-锁优化-https-blog-csdn-net-championhengyi-article-details-80105718"><a href="#synchronized-锁优化-https-blog-csdn-net-championhengyi-article-details-80105718" class="headerlink" title="synchronized 锁优化 https://blog.csdn.net/championhengyi/article/details/80105718"></a>synchronized 锁优化 <a href="https://blog.csdn.net/championhengyi/article/details/80105718" target="_blank" rel="noopener">https://blog.csdn.net/championhengyi/article/details/80105718</a></h5><p><strong>自旋锁</strong></p><ul><li>互斥同步的进入阻塞状态的开销都很大，应该尽量避免。在许多应用中，共享数据的锁定状态只会持续很短的一段时间。自旋锁的思想是让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间内能获得锁，就可以避免进入阻塞状态。</li><li>自旋锁虽然能避免进入阻塞状态从而减少开销，但是它需要进行<strong>忙循环</strong>操作占用 CPU 时间，它只适用于<strong>共享数据的锁定状态很短的场景</strong>。</li><li>在 JDK 1.6 中引入了自适应的自旋锁。自适应意味着自旋的次数不再固定了，而是由前一次在同一个锁上的自旋次数及锁的拥有者的状态来决定。</li></ul><p><strong>锁消除</strong></p><ul><li><p>锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。</p></li><li><p>锁消除主要是通过<strong>逃逸分析</strong>来支持，如果堆上的共享数据不可能逃逸出去被其它线程访问到，那么就可以把它们当成私有数据对待，也就可以将它们的锁进行消除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concatString</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();    <span class="comment">// StringBuffer类是一个线程安全类 </span></span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    sb.append(s3);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>锁粗化</strong></p><ul><li>如果一系列的连续操作都对同一个对象反复加锁和解锁，频繁的加锁操作就会导致性能损耗。</li></ul><p><strong>轻量级锁</strong></p><ul><li>相对于传统的重量级锁而言，它使用 CAS 操作来避免重量级锁使用互斥量的开销。<strong>对于绝大部分的锁，在整个同步周期内都是不存在竞争的</strong>，因此也就不需要都使用互斥量进行同步，可以先采用 CAS 操作进行同步，如果 CAS 失败了再改用互斥量进行同步。</li></ul><p><strong>偏向锁</strong></p><ul><li>偏向于让第一个获取锁对象的线程，这个线程在之后获取该锁就不再需要进行同步操作，甚至连 CAS 操作也不再需要。</li><li>当锁对象第一次被线程获得的时候，进入偏向状态，标记为 1 01。同时使用 CAS 操作将线程 ID 记录到 Mark Word 中，如果 CAS 操作成功，这个线程以后每次进入这个锁相关的同步块就不需要再进行任何同步操作。</li><li>当有另外一个线程去尝试获取这个锁对象时，偏向状态就宣告结束，此时撤销偏向（Revoke Bias）后恢复到未锁定状态或者轻量级锁状态。</li></ul><h5 id="Java-对象头信息"><a href="#Java-对象头信息" class="headerlink" title="Java 对象头信息"></a>Java 对象头信息</h5><p>Mark Word 被设计成为一个非固定的数据结构，以便存储更多有效的数据，它会根据对象本身的状态复用自己的存储空间。 一个字节 32 位。</p><p><img src="https://mubu.com/document_image/d8afe36d-7bc3-4f58-b625-aa943c59fdf1-983181.jpg" alt="img"></p><h5 id="锁机制存在的问题"><a href="#锁机制存在的问题" class="headerlink" title="锁机制存在的问题"></a>锁机制存在的问题</h5><ul><li>在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题。</li><li>一个线程持有锁会导致其它所有需要此锁的线程挂起。</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能风险。</li></ul><h5 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h5><ul><li>独占锁是一种<strong>悲观锁</strong>，synchronized 就是一种独占锁，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁。</li><li>另一个更加有效的锁就是<strong>乐观锁</strong>。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因冲突而失败就重试，直到成功为止。<strong>乐观锁用到的机制就是CAS，Compare and Swap</strong>。</li></ul><h5 id="CAS机制（Compare-and-Swap）"><a href="#CAS机制（Compare-and-Swap）" class="headerlink" title="CAS机制（Compare and Swap）"></a>CAS机制（Compare and Swap）</h5><ul><li><p>CAS 操作包含三个操作数 —— <strong>内存位值（V）、预期原值（A）和新值(B)</strong>。 </p></li><li><p>如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值 。否则，处理器不做任何操作。</p></li><li><p>无论哪种情况，它都会在 CAS 指令之前返回该位置的值。（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前值。）</p></li><li><p>目的： 通过 CAS 机制实现<strong>非阻塞算法</strong>，较与 synchronized 阻塞算法（避免线程间上下文的切换），性能上有很大的提升。</p><p>存在的问题：</p><ul><li><strong>ABA问题</strong>。因为 CAS 需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A－2B－3A。</li><li><strong>循环时间长开销大</strong>。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</li><li>只能<strong>保证一个共享变量的原子操作</strong>。当对一个共享变量执行操作时，我们可以使用循环 CAS 的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性。解决办法有：使用锁或者将多个变量封装为一个对象 。</li></ul></li><li><p>concurrent (J.U.C)包的源代码实现原理</p><ul><li>声明共享变量为 volatile</li><li>使用 CAS 的原子条件更新来实现线程之间的同步</li><li>配合以 volatile 的读/写和 CAS 所具有的 volatile 读和写的内存语义来实现线程之间的通信。</li></ul></li></ul><h5 id="线程同步的多种实现"><a href="#线程同步的多种实现" class="headerlink" title="线程同步的多种实现"></a>线程同步的多种实现</h5><ul><li>Synchronized</li><li>Lock</li><li>Semaphore（1）</li><li>volatile 共享变量</li></ul><h5 id="生产者与消费者问题"><a href="#生产者与消费者问题" class="headerlink" title="生产者与消费者问题"></a>生产者与消费者问题</h5><p><a href="https://zhuanlan.zhihu.com/p/20300609" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/20300609</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;synchronized-与-Lock-的区别&quot;&gt;&lt;a href=&quot;#synchronized-与-Lock-的区别&quot; class=&quot;headerlink&quot; title=&quot;synchronized 与 Lock 的区别&quot;&gt;&lt;/a&gt;synchronized 与 Lock 的区别&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;synchronized&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在层次：Java 的关键字，在jvm层面上&lt;/li&gt;
&lt;li&gt;锁的释放：1、获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁&lt;/li&gt;
&lt;li&gt;锁的获取：假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待&lt;/li&gt;
&lt;li&gt;锁状态：无法判断&lt;/li&gt;
&lt;li&gt;锁类型：可重入 不可中断 非公平&lt;/li&gt;
&lt;li&gt;性能：适用于少量同步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lock&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;存在层次：一个类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;锁的释放：在 finally 语句块中必须释放锁，不然容易造成线程死锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;锁的获取：分情况而定，Lock 有多个锁获取的方式，可以尝试获得锁，线程可以不会一直等待&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;锁状态：可以判断&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;锁类型：可重入 可中断 可公平（默认为非公平）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;性能：适用于大量同步&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java 学习" scheme="http://mindyu.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="笔记整理" scheme="http://mindyu.com/tags/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
      <category term="面经" scheme="http://mindyu.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="synchronized优化" scheme="http://mindyu.com/tags/synchronized%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程与线程池</title>
    <link href="http://mindyu.com/2018/11/14/Java%20%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://mindyu.com/2018/11/14/Java 线程池/</id>
    <published>2018-11-14T07:16:41.000Z</published>
    <updated>2019-01-12T11:24:09.213Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h4 id="Java线程"><a href="#Java线程" class="headerlink" title="Java线程"></a>Java线程</h4><h5 id="Java线程状态"><a href="#Java线程状态" class="headerlink" title="Java线程状态"></a>Java线程状态</h5><blockquote><ol><li>初始(NEW)：新创建线程对象，但还没有调用start()方法。</li><li>运行(RUNNABLE)：Java 虚拟机中线程的可运行状态包括操作系统中线程的就绪（ready）和运行中（running）两种状态。即处于该状态时，线程可能正在等待来自操作系统的其他资源（如CPU）。</li><li>阻塞(BLOCKED)：表示线程阻塞于锁。</li><li>等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。</li><li>超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。</li><li>终止(TERMINATED)：表示该线程已经执行完毕。</li></ol></blockquote><a id="more"></a><h5 id="线程的状态变化图"><a href="#线程的状态变化图" class="headerlink" title="线程的状态变化图"></a>线程的状态变化图</h5><p><img src="https://hexoblog-1253306922.cos.ap-guangzhou.myqcloud.com/photo2018/Java%E7%AC%94%E8%AE%B0/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.jpeg" alt="img"></p><p>JDK1.8 线程状态源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a thread which has not yet started.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        NEW,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a runnable thread.  A thread in the runnable</span></span><br><span class="line"><span class="comment">         * state is executing in the Java virtual machine but it may</span></span><br><span class="line"><span class="comment">         * be waiting for other resources from the operating system</span></span><br><span class="line"><span class="comment">         * such as processor.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RUNNABLE,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a thread blocked waiting for a monitor lock.</span></span><br><span class="line"><span class="comment">         * A thread in the blocked state is waiting for a monitor lock</span></span><br><span class="line"><span class="comment">         * to enter a synchronized block/method or</span></span><br><span class="line"><span class="comment">         * reenter a synchronized block/method after calling</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        BLOCKED,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a waiting thread.</span></span><br><span class="line"><span class="comment">         * A thread is in the waiting state due to calling one of the</span></span><br><span class="line"><span class="comment">         * following methods:</span></span><br><span class="line"><span class="comment">         * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join() Thread.join&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#park() LockSupport.park&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span></span><br><span class="line"><span class="comment">         * perform a particular action.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">         * on an object is waiting for another thread to call</span></span><br><span class="line"><span class="comment">         * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span></span><br><span class="line"><span class="comment">         * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">         * is waiting for a specified thread to terminate.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        WAITING,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a waiting thread with a specified waiting time.</span></span><br><span class="line"><span class="comment">         * A thread is in the timed waiting state due to calling one of</span></span><br><span class="line"><span class="comment">         * the following methods with a specified positive waiting time:</span></span><br><span class="line"><span class="comment">         * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> #sleep Thread.sleep&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait(long) Object.wait&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join(long) Thread.join&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Thread state for a terminated thread.</span></span><br><span class="line"><span class="comment">         * The thread has completed execution.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TERMINATED;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h5><ul><li><p>thread.join() <a href="https://www.cnblogs.com/huangzejun/p/7908898.html" target="_blank" rel="noopener">https://www.cnblogs.com/huangzejun/p/7908898.html</a></p><ul><li>作用<ul><li>当我们调用某个线程的这个方法时，这个方法会挂起调用线程，直到被调用线程结束执行，调用线程才会继续执行。</li></ul></li><li>可以用来实现<strong>多个线程需要按一定的顺序执行</strong>的需求。</li></ul></li><li><p>Thread.yield() 线程让步（静态本地方法）</p><ul><li>作用<ul><li>让当前线程由“运行状态”进入到“就绪状态”，从而让其它具有相同优先级的等待线程获取执行权；但是，并不能保证在当前线程调用yield()之后，其它具有相同优先级的线程就一定能获得执行权；也有可能是当前线程又进入到“运行状态”继续运行！</li></ul></li></ul></li><li><p>Thread.sleep() 线程睡眠 （静态本地方法）</p><ul><li><p>作用</p><ul><li>让当前线程由“运行状态”进入到“阻塞状态”，并不会释放锁。</li></ul></li></ul></li></ul><h5 id="线程中断方法"><a href="#线程中断方法" class="headerlink" title="线程中断方法"></a>线程中断方法</h5><ul><li>interrupted()<ul><li>返回当前的线程的中断状态，并清除中断标识位。静态方法<br>public static boolean interrupted() {        return currentThread().isInterrupted(true);    }</li></ul></li><li>isInterrupted()<ul><li>返回调用该方法的对象所表示的线程的中断状态，且不会清除中断标识位。实例方法<br>public boolean isInterrupted() {        return isInterrupted(false);    }</li></ul></li></ul><p>代码测试：</p><p><img src="https://mubu.com/document_image/db2709d8-0f5f-458d-bf74-a95fb6f8d466-983181.jpg" alt="img"></p><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><h5 id="详细参数"><a href="#详细参数" class="headerlink" title="详细参数"></a>详细参数</h5><ul><li><strong>corePoolSize</strong>：核心池的大小。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是<strong>预创建线程</strong>的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；</li><li><strong>maximumPoolSize</strong>：线程池<strong>最大线程数</strong>，它表示在线程池中最多能创建多少个线程；</li><li><strong>keepAliveTime</strong>：表示<strong>线程没有任务执行时最多保持多久时间会终止</strong>。默认情况下，当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；</li><li>unit：参数keepAliveTime的时间单位</li><li><strong>workQueue</strong>：一个阻塞队列，用来存储等待执行的任务</li><li>threadFactory：线程工厂，主要用来创建线程</li><li>handler：表示当拒绝处理任务时的策略</li></ul><h5 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h5><ul><li><p>runState 表示当前线程池的状态，它是一个 volatile 变量用来保证线程之间的可见性，高3位表示状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> runState;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></li><li><p>当创建线程池后，初始时，线程池处于RUNNING状态；</p></li><li><p>如果调用了shutdown()方法，则线程池处于SHUTDOWN状态，此时线程池不接受新任务，但处理排队任务</p></li><li><p>如果调用了shutdownNow()方法，则线程池处于STOP状态，此时线程池不接受新任务，不处理排队任务，并中断正在进行的任务</p></li><li><p>当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态。</p></li></ul><p><strong>1.8 使用的原子类</strong></p><p><img src="https://mubu.com/document_image/7935a7c8-e708-4cd0-9220-09d2dc12f767-983181.jpg" alt="img"></p><h5 id="线程池的种类"><a href="#线程池的种类" class="headerlink" title="线程池的种类"></a>线程池的种类</h5><ul><li>fixThreadPool  固定线程<br>有指定的线程数的线程池，有核心的线程，里面有固定的线程数量，响应的速度快。正规的并发线程，多用于服务器。固定的线程数由系统资源设置。</li><li>cacheThreadPool  缓存线程池<br>只有非核心线程，最大线程数很大（Int.Max(values)），它会为每一个任务添加一个新的线程，这边有一个超时机制，当空闲的线程超过60s内没有用到的话，就会被回收。缺点就是没有考虑到系统的实际内存大小。</li><li>singleThreadPool   单线程线程池<br>只有一个核心线程，通过指定的顺序将任务一个个丢到线程，都乖乖的排队等待执行，不处理并发的操作，不会被回收。效率慢。</li><li>ScheduledThreadPool<br>唯一一个有延迟执行和周期重复执行的线程池。它的核心线程池固定，非核心线程的数量没有限制，但是闲置时会立即被回收。</li></ul><h5 id="线程池的实现-https-www-cnblogs-com-wxwall-p-7050698-html"><a href="#线程池的实现-https-www-cnblogs-com-wxwall-p-7050698-html" class="headerlink" title="线程池的实现 https://www.cnblogs.com/wxwall/p/7050698.html"></a>线程池的实现 <a href="https://www.cnblogs.com/wxwall/p/7050698.html" target="_blank" rel="noopener">https://www.cnblogs.com/wxwall/p/7050698.html</a></h5><p><strong>原理图</strong></p><p><img src="https://mubu.com/document_image/fbaf90a5-779a-4c70-95a2-f591d7c77276-983181.jpg" alt="img"></p><p><strong>实现要点</strong></p><ul><li>线程池里的核心线程数与最大线程数</li><li>线程池里真正工作的线程 worker</li><li>线程池里用来存取任务的队列 BlockingQueue</li><li>线程中的任务 task</li></ul><p><strong>阻塞队列 BlockingQueue</strong> <a href="http://ifeve.com/java-blocking-queue/" target="_blank" rel="noopener">http://ifeve.com/java-blocking-queue/</a></p><ul><li><p>定义</p><ul><li>一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。</li></ul></li><li><p>作用</p><ul><li>常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。</li></ul></li><li><p>四种处理方法</p><ul><li><p>put、take、offer、poll、add、remove 的区别</p><p><img src="https://mubu.com/document_image/abc70866-0760-4e45-b895-ac1968ac0801-983181.jpg" alt="img"></p></li><li><p>区别详解</p><ul><li>抛出异常：是指当阻塞队列满时候，再往队列里插入元素，会抛出IllegalStateException(“Queue full”)异常。当队列为空时，从队列里获取元素时会抛出NoSuchElementException异常 。实际上调用的还是返回特殊值的方法。</li><li>返回特殊值：插入方法会返回是否成功，成功则返回true。移除方法，则是从队列里拿出一个元素，如果没有则返回null</li><li>一直阻塞：当阻塞队列满时，如果生产者线程往队列里put元素，队列会一直阻塞生产者线程，直到拿到数据，或者响应中断退出。当队列空时，消费者线程试图从队列里take元素，队列也会阻塞消费者线程，直到队列可用。</li><li>超时退出：当阻塞队列满时，队列会阻塞生产者线程一段时间，如果超过一定的时间，生产者线程就会退出。</li></ul></li></ul></li></ul><p><strong>Java常用阻塞队列</strong></p><ul><li><p>ArrayBlockingQueue</p><p>ArrayBlockingQueue是一个用数组实现的有界阻塞队列。此队列按照先进先出（FIFO）的原则对元素进行排序。默认情况下不保证访问者公平的访问队列，所谓公平访问队列是指阻塞的所有生产者线程或消费者线程，当队列可用时，可以按照阻塞的先后顺序访问队列。通常情况下为了保证公平性会降低吞吐量。底层以数组的形式保存数据(实际上可看作一个循环数组)。在添加元素取出元素时会加锁。</p></li><li><p>LinkedBlockingQueue</p><p>一个用链表实现的有界阻塞队列。此队列的默认的最大长度为Integer.MAX_VALUE。此队列按照先进先出的原则对元素进行排序。</p></li><li><p>PriorityBlockingQueue</p><p>一个支持优先级的无界队列。默认情况下元素采取自然顺序排列，也可以通过比较器 comparator 来指定元素的排序规则。元素按照升序排列。</p></li><li><p>SynchronousQueue</p><p>一个不存储元素的阻塞队列。每一个 put 操作必须等待一个 take 操作，否则不能继续添加元素。SynchronousQueue 可以看成是一个传球手，负责把生产者线程处理的数据直接传递给消费者线程。队列本身并不存储任何元素，非常适合于传递性场景,比如在一个线程中使用的数据，传递给另外一个线程使用，SynchronousQueue的吞吐量高于LinkedBlockingQueue 和 ArrayBlockingQueue。</p></li></ul><p><strong>任务拒绝策略</strong></p><ul><li>ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。</li><li>ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</li><li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</li><li>ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</li></ul><h5 id="线程池的主要处理流程"><a href="#线程池的主要处理流程" class="headerlink" title="线程池的主要处理流程"></a>线程池的主要处理流程</h5><p><img src="https://mubu.com/document_image/b260e0bf-9055-419c-b565-6903bc9b1957-983181.jpg" alt="img"></p><h5 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h5><ul><li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Java线程&quot;&gt;&lt;a href=&quot;#Java线程&quot; class=&quot;headerlink&quot; title=&quot;Java线程&quot;&gt;&lt;/a&gt;Java线程&lt;/h4&gt;&lt;h5 id=&quot;Java线程状态&quot;&gt;&lt;a href=&quot;#Java线程状态&quot; class=&quot;headerlink&quot; title=&quot;Java线程状态&quot;&gt;&lt;/a&gt;Java线程状态&lt;/h5&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;初始(NEW)：新创建线程对象，但还没有调用start()方法。&lt;/li&gt;
&lt;li&gt;运行(RUNNABLE)：Java 虚拟机中线程的可运行状态包括操作系统中线程的就绪（ready）和运行中（running）两种状态。即处于该状态时，线程可能正在等待来自操作系统的其他资源（如CPU）。&lt;/li&gt;
&lt;li&gt;阻塞(BLOCKED)：表示线程阻塞于锁。&lt;/li&gt;
&lt;li&gt;等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。&lt;/li&gt;
&lt;li&gt;超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。&lt;/li&gt;
&lt;li&gt;终止(TERMINATED)：表示该线程已经执行完毕。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java 学习" scheme="http://mindyu.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="笔记整理" scheme="http://mindyu.com/tags/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
      <category term="面经" scheme="http://mindyu.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="线程池" scheme="http://mindyu.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
      <category term="线程" scheme="http://mindyu.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 内存模型与内存划分</title>
    <link href="http://mindyu.com/2018/11/13/Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%92%E5%88%86/"/>
    <id>http://mindyu.com/2018/11/13/Java 内存模型与内存划分/</id>
    <published>2018-11-13T02:06:41.000Z</published>
    <updated>2019-01-12T08:56:14.316Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h4 id="JVM-内存模型"><a href="#JVM-内存模型" class="headerlink" title="JVM 内存模型"></a>JVM 内存模型</h4><p><strong>主要目标</strong></p><ul><li>定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样底层细节。此处的变量与Java编程时所说的变量不一样，指包括了实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数，后者是线程私有的，不会被共享。</li></ul><p><strong>规则</strong></p><ul><li><p>所有的变量都存储在主内存中，每个线程还有自己的工作内存，线程的工作内存中保存了该线程使用到的变量到主内存副本拷贝，线程对变量的所有操作（读取、赋值）都必须在工作内存中进行，而不能直接读写主内存中的变量。<a id="more"></a></p><p><img src="https://mubu.com/document_image/78099ccf-e7f0-414e-b90d-ba6c27c0efab-983181.jpg" alt="img"></p></li></ul><p><strong>内存间交互操作</strong></p><ul><li>关于主内存与工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步到主内存之间的实现细节，Java内存模型定义了以下八种操作来完成<ul><li>lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。</li><li>unlock（解锁）：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read（读取）：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</li><li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li>use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作。</li><li>write（写入）：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中。</li></ul></li></ul><p><strong>重排序</strong></p><ul><li><p>种类</p><ul><li><p>编译器优化的重排序。编译器在不改变单线程程序语义放入前提下，可以重新安排语句的执行顺序。</p></li><li><p>指令级并行的重排序。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</p></li><li><p>内存系统的重排序。由于处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</p><p><img src="https://mubu.com/document_image/98b6179b-79eb-46fc-82cb-e764cbbb0cfb-983181.jpg" alt="img"></p></li></ul></li><li><p>如何避免重排序</p><ul><li><p>为了保证内存的可见性，Java 编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。</p></li><li><p>内存屏障类型</p><p><img src="https://mubu.com/document_image/91399535-fcb8-40f3-8935-829f00d0e453-983181.jpg" alt="img"></p></li><li><p>volatile 原理 <a href="https://www.jianshu.com/p/2ab5e3d7e510" target="_blank" rel="noopener">https://www.jianshu.com/p/2ab5e3d7e510</a></p><ul><li>在每个volatile写操作前插入StoreStore屏障，在写操作后插入StoreLoad屏障；</li><li>在每个volatile读操作前插入 LoadLoad屏障，在读操作后插入LoadStore屏障；</li></ul></li></ul></li></ul><p><strong>happens-before 原则</strong></p><p>​    happens-before 原则来辅助保证程序执行的原子性、可见性以及有序性的问题，它是判断数据是否存在竞争、线程是否安全的依据</p><ul><li><p>八条原则</p><ul><li>程序顺序原则：即在一个线程内必须保证语义串行性，也就是说按照代码顺序执行。</li><li>锁规则：解锁(unlock)操作必然发生在后续的同一个锁的加锁(lock)之前，也就是说，如果对于一个锁解锁后，再加锁，那么加锁的动作必须在解锁动作之后(同一个锁)。</li><li>volatile 规则： volatile 变量的写先发生于读，这保证了 volatile 变量的可见性，简单的理解就是，volatile 变量在每次被线程访问时，都强迫从主内存中读该变量的值，而当该变量发生变化时，又会强迫将最新的值刷新到主内存，任何时刻，不同的线程总是能够看到该变量的最新值。</li><li>线程启动规则：线程的start()方法先于它的每一个动作，即如果线程A在执行线程B的 start 方法之前修改了共享变量的值，那么当线程B执行 start 方法时，线程A对共享变量的修改对线程B可见</li><li>线程终止规则：线程的所有操作先于线程的终结，Thread.join() 方法的作用是等待当前执行的线程终止。假设在线程B终止之前，修改了共享变量，线程A从线程B的join方法成功返回后，线程B对共享变量的修改将对线程A可见。</li><li>线程中断规则：对线程 interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测线程是否中断。</li><li>对象终结规则：对象的构造函数执行，结束先于finalize()方法</li><li>传递性：A先于B ，B先于C 那么A必然先于C</li></ul></li></ul><p><strong>JVM 参数列表</strong></p><blockquote><p>java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:NewRatio=4 -XX:SurvivorRatio=4 -XX:MaxPermSize=16m -XX:MaxTenuringThreshold=0</p><p>-Xmx3550m：最大堆内存为3550M。</p><p>-Xms3550m：初始堆内存为3550M。此值可以设置与-Xmx相同,以避免每次垃圾回收完成后JVM重新分配内存。空闲空间小于40%时会扩大堆，空闲空间大于70%时会缩小堆。</p><p>-Xmn2g：设置年轻代大小为2G。整个堆大小=年轻代大小 + 年老代大小 + 永久代大小。永久代一般固定大小为64m,所以增大年轻代后,将会减小年老代大小。此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8。</p><p>-Xss128k：设置每个线程的堆栈大小。</p><p>-XX:NewRatio=4：设置年轻代(包括Eden和两个Survivor区)与年老代的比值。设置为4,则年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5</p><p>-XX:SurvivorRatio=4：设置年轻代中Eden区与Survivor区的大小比值。设置为4,则两个Survivor区与一个Eden区的比值为2:4,一个Survivor区占整个年轻代的1/6</p><p>-XX:MaxPermSize=16m：设置永久代大小为16m。</p><p>-XX:MaxTenuringThreshold=15：设置垃圾最大年龄。如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代。对于年老代比较多的应用,可以提高效率。如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象在年轻代的存活时间,增加在年轻代即被回收的概率。</p></blockquote><p><strong>JDK1.8 永久代</strong></p><ul><li>1.8之前32位机器默认永久代大小为64M，64位机器默认永久代大小为85M。永久代的垃圾回收和老年代的垃圾回收是绑定的，一旦其中一个区域的被占满，两个区都需要进行垃圾回收。存在的问题：1. 一旦类的元数据（描述数据的数据，对数据及信息资源的描述性信息。）超过设定的永久代大小，程序就会耗尽内存，并出现OOM。2. 元数据信息会随着每一次 Full GC 发生移动。3. 永久代的空间大小很难确定，类的总数、常量池的大小、方法的总数。</li><li>1.8取消永久代，将类的元数据信息移到了一个与堆不相连的本地内存区域（元空间）。</li><li>影响：<ul><li>将类的元数据分配在本地内存中，元空间的最大可分配空间就是系统的可用内存空间。</li><li>JVM可以自动根据类的元数据大小动态增加元空间的容量。</li></ul></li></ul><h4 id="Java-内存划分"><a href="#Java-内存划分" class="headerlink" title="Java 内存划分"></a>Java 内存划分</h4><p>运行时数据区：</p><ul><li><p>程序计数器（线程私有）</p><ul><li>在JVM规范中规定，如果线程执行的是非native方法，则程序计数器中保存的是当前需要执行的指令的地址；如果线程执行的是native方法，则程序计数器中的值是undefined。</li><li>由于程序计数器中存储的数据所占空间的大小不会随程序的执行而发生改变，因此，对于程序计数器是不会发生内存溢出现象(OutOfMemory)的。该内存区域是唯一一个java虚拟机规范没有规定任何OOM情况的区域。</li></ul></li><li><p>Java 虚拟机栈（线程私有）</p><ul><li><p>Java栈中存放的是一个个的栈帧，每个栈帧对应一个被调用的方法，在栈帧中包括局部变量表(Local Variables)、操作数栈(Operand Stack)、指向当前方法所属的类的运行时常量池的引用(Reference to runtime constant pool)、方法返回地址(Return Address)和一些额外的附加信息。</p><p><img src="https://mubu.com/document_image/c7c5e0cd-e108-4b46-bd92-7a53a2655d58-983181.jpg" alt="img"></p></li><li><p>当线程执行一个方法时，就会随之创建一个对应的栈帧，并将建立的栈帧压栈。当方法执行完毕之后，便会将栈帧出栈。因此可知，线程当前执行的方法所对应的栈帧必定位于Java栈的顶部。</p></li><li><p>生命周期与线程相同。</p></li><li><p>栈帧</p><ul><li>局部变量表里存储的是基本数据类型、returnAddress类型(指向一条字节码指令的地址)和对象引用,这个对象引用有可能是指向对象起始地址的一个指针,也有可能是代表对象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译期间确定的。</li><li>操作数栈的作用主要用来存储运算结果以及运算的操作数,它不同于局部变量表通过索引来访问,而是压栈和出栈的方式</li><li>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用,持有这个引用是为了支持方法调用过程中的动态链接。动态链接就是将常量池中的符号引用在运行期转化为直接引用。</li></ul></li></ul></li><li><p>本地方法栈（线程私有）</p><ul><li>本地方法栈与Java栈的作用和原理非常相似。区别只不过是Java栈是为执行Java方法服务的，而本地方法栈则是为执行本地方法（Native Method）服务的。</li></ul></li><li><p>堆（线程共享）</p><ul><li>用来存储对象本身的以及数组</li><li>堆也是Java垃圾收集器管理的主要区域。</li></ul></li><li><p>方法区（线程共享）</p><ul><li>存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等。</li><li>有时候也称为永久代,在该区内很少发生垃圾回收,但是并不代表不发生GC,在这里进行的GC主要是对方法区里的常量池和对类的卸载</li><li>在方法区中有一个非常重要的部分就是运行时常量池，它是每一个类或接口的常量池的运行时表示形式，在类和接口被加载到JVM后，对应的运行时常量池就被创建出来。当然并非Class文件常量池中的内容才能进入运行时常量池，在运行期间也可将新的常量放入运行时常量池中，比如String的intern()方法。</li></ul></li></ul><p>参考博客：</p><p><a href="https://www.cnblogs.com/dingyingsi/p/3760447.html" target="_blank" rel="noopener">https://www.cnblogs.com/dingyingsi/p/3760447.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;JVM-内存模型&quot;&gt;&lt;a href=&quot;#JVM-内存模型&quot; class=&quot;headerlink&quot; title=&quot;JVM 内存模型&quot;&gt;&lt;/a&gt;JVM 内存模型&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;主要目标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样底层细节。此处的变量与Java编程时所说的变量不一样，指包括了实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数，后者是线程私有的，不会被共享。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;所有的变量都存储在主内存中，每个线程还有自己的工作内存，线程的工作内存中保存了该线程使用到的变量到主内存副本拷贝，线程对变量的所有操作（读取、赋值）都必须在工作内存中进行，而不能直接读写主内存中的变量。
    
    </summary>
    
      <category term="Java 学习" scheme="http://mindyu.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="笔记整理" scheme="http://mindyu.com/tags/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
      <category term="面经" scheme="http://mindyu.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="Java内存模型" scheme="http://mindyu.com/tags/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="Java内存划分" scheme="http://mindyu.com/tags/Java%E5%86%85%E5%AD%98%E5%88%92%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Java GC笔记</title>
    <link href="http://mindyu.com/2018/11/13/Java%20GC%E7%AC%94%E8%AE%B0/"/>
    <id>http://mindyu.com/2018/11/13/Java GC笔记/</id>
    <published>2018-11-13T02:06:41.000Z</published>
    <updated>2019-01-12T14:58:43.951Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h4 id="GC-算法"><a href="#GC-算法" class="headerlink" title="GC 算法"></a>GC 算法</h4><h5 id="标记清除算法-Mark-Sweep"><a href="#标记清除算法-Mark-Sweep" class="headerlink" title="标记清除算法 Mark-Sweep"></a>标记清除算法 Mark-Sweep</h5><p>原理</p><ul><li>标记出所有需要回收的对象</li><li>标记完成后统一回收所有被标记的对象<img src="https://mubu.com/document_image/e4f0c0d5-4045-4f24-b6ae-8ad9bd67b5b8-983181.jpg" alt="img"></li></ul><p>缺点</p><ul><li>效率不高，标记和清除效率都不高</li><li>空间碎片问题，标记清除之后会产生大量不连续的内存碎片,空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时,无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作</li></ul><a id="more"></a><h5 id="复制算法-Copying"><a href="#复制算法-Copying" class="headerlink" title="复制算法 Copying"></a>复制算法 Copying</h5><p>原理</p><ul><li><p>将可用内存按容量划分为大小相等的两块,每次只使用其中的一块。</p></li><li><p>当这一块的内存用完了,就将还存活着的对象依次复制到另外一块上面,然后再把已使用过的内存空间一次性清理掉。</p><p><img src="https://mubu.com/document_image/bb382fc9-43e3-47a3-9ca6-b1c3731dc613-983181.jpg" alt="img"></p></li></ul><p>优点</p><ul><li>实现简单，运行高效</li><li>不用考虑内存碎片问题</li></ul><p>缺点</p><ul><li>可用内存缩小为原来的一半</li><li>在对象存活率较高的情况下，会进行较多的复制操作导致效率降低</li></ul><h5 id="标记整理算法-Mark-Compact"><a href="#标记整理算法-Mark-Compact" class="headerlink" title="标记整理算法 Mark-Compact"></a>标记整理算法 Mark-Compact</h5><p>原理</p><ul><li><p>标记</p></li><li><p>将所有存活的对象向一端移动，然后清理掉边界以外的内存</p><p><img src="https://mubu.com/document_image/e70278a1-4648-4b87-9277-68237fb0efae-983181.jpg" alt="img"></p></li></ul><h5 id="分代收集算法-Generational-Collection"><a href="#分代收集算法-Generational-Collection" class="headerlink" title="分代收集算法 Generational Collection"></a>分代收集算法 Generational Collection</h5><p>原理</p><ul><li><p>根据对象存活周期的不同将内存划分为几块。</p></li><li><p>一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。</p></li></ul><p>  在新生代中,每次垃圾收集时都发现有大批对象死去,只有少量存活,那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。</p><p>  老年代中因为对象存活率高、没有额外空间对它进行分配担保,就必须使用“标记—清理”或者“标记—整理”算法来进行回收。</p><h4 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h4><h5 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h5><p>Serial（串行）垃圾收集器是最基本、发展历史最悠久的收集器</p><p>特点</p><ul><li>针对新生代；</li><li>采用复制算法；</li><li>单线程收集；</li><li>进行垃圾收集时，必须暂停所有工作线程，直到完成，即会”Stop The World”；</li></ul><p>Serial/Serial Old组合收集器运行示意图</p><p><img src="https://mubu.com/document_image/b5ba06ff-4688-4d46-91e8-64245ee2b45c-983181.jpg" alt="img"></p><h5 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h5><p>ParNew 垃圾收集器是 Serial 收集器的多线程版本。</p><p>特点</p><ul><li>新生代收集器；</li><li>采用复制算法；</li><li>多线程收集；</li></ul><p>ParNew/Serial Old组合收集器运行示意图</p><p><img src="https://mubu.com/document_image/316e4e38-9858-4b95-863e-7530388bb69a-983181.jpg" alt="img"></p><h5 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h5><p>与吞吐量关系密切，也称为吞吐量收集器（Throughput Collector）吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间）</p><p>高吞吐量即减少垃圾收集时间，让用户代码获得更长的运行时间</p><p>特点</p><ul><li>新生代收集器；</li><li>采用复制算法；</li><li>多线程收集；</li><li>它的关注点与其他收集器不同<ul><li>CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间；</li><li>Parallel Scavenge 收集器的目标则是达一个可控制的吞吐量（Throughput）</li></ul></li><li>GC自适应的调节策略（GC Ergonomiscs）<ul><li>只需设置好内存数据大小（如”-Xmx”设置最大堆）；</li><li>然后使用”-XX:MaxGCPauseMillis”或”-XX:GCTimeRatio”给JVM设置一个优化目标；</li><li>那些具体细节参数的调节就由JVM自适应完成；</li></ul></li></ul><h5 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h5><p>Serial Old 是 Serial 收集器的老年代版本；</p><p>特点</p><ul><li>针对老年代；</li><li>采用”标记-整理”算法（还有压缩，Mark-Sweep-Compact）；</li><li>单线程收集；</li></ul><p>Serial/Serial Old收集器运行示意图</p><p><img src="https://mubu.com/document_image/916c2bb2-09dd-4f5d-b59b-d5ac58b1c133-983181.jpg" alt="img"></p><p>应用场景</p><ul><li>主要用于 Client 模式；</li><li>在 Server 模式有两大用途<ul><li>在JDK1.5及之前，与 Parallel Scavenge 收集器搭配使用（JDK1.6有Parallel Old收集器可搭配）</li><li>作为CMS收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用</li></ul></li></ul><h5 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a>Parallel Old 收集器</h5><p>Parallel Old 垃圾收集器是 Parallel Scavenge 收集器的老年代版本；JDK1.6中才开始提供</p><p>特点</p><ul><li>针对老年代；</li><li>采用”标记-整理”算法；</li><li>多线程收集；</li></ul><p>Parallel Scavenge/Parallel Old 收集器运行示意图</p><p><img src="https://mubu.com/document_image/cfc359f4-21a0-4f03-a4b5-ae39ac349047-983181.jpg" alt="img"></p><p>使用场景</p><ul><li>JDK1.6及之后用来代替老年代的 Serial Old 收集器；</li><li>特别是在Server模式，多CPU的情况下；</li><li>这样在注重吞吐量以及CPU资源敏感的场景，就有了 Parallel Scavenge 加 Parallel Old收集器的”给力”应用组合</li></ul><h5 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h5><p>并发标记清理（Concurrent Mark Sweep，CMS）收集器也称为并发低停顿收集器（Concurrent Low Pause Collector）或低延迟（low-latency）垃圾收集器</p><p>特点</p><ul><li>针对老年代；</li><li>基于”标记-清除”算法(不进行压缩操作，产生内存碎片)；</li><li>以获取最短回收停顿时间为目标；</li><li>并发收集、低停顿；</li><li>需要更多的内存（缺点）</li></ul><p>应用场景</p><ul><li>与用户交互较多的场景；</li><li>希望系统停顿时间最短，注重服务的响应速度；以给用户带来较好的体验；</li><li>如常见WEB、B/S系统的服务器上的应用；</li></ul><p>运行过程</p><ul><li>初始标记（CMS initial mark）<ul><li>仅标记一下GC Roots能直接关联到的对象；</li><li>速度很快；</li><li>但需要”Stop The World”；</li></ul></li><li>并发标记（CMS concurrent mark）<ul><li>进行GC Roots Tracing的过程；</li><li>刚才产生的集合中标记出存活对象；</li><li>应用程序也在运行；</li><li>并不能保证可以标记出所有的存活对象；</li></ul></li><li>重新标记（CMS remark）<ul><li>为了修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录；</li><li>需要”Stop The World”，且停顿时间比初始标记稍长，但远比并发标记短；</li><li>采用多线程并行执行来提升效率；</li></ul></li><li>并发清除（CMS concurrent sweep）<ul><li>回收所有的垃圾对象；</li></ul></li></ul><p>缺点</p><ul><li><p>对CPU资源非常敏感</p><ul><li>并发收集虽然不会暂停用户线程，但因为占用一部分CPU资源，还是会导致应用程序变慢，总吞吐量降低。</li><li>CMS 的默认收集线程数量是=(CPU数量+3)/4；</li></ul></li><li><p>无法处理浮动垃圾</p><ul><li>在并发清除时，用户线程新产生的垃圾，称为浮动垃圾；</li></ul></li><li><p>产生大量内存碎片</p><ul><li>CMS 基于”标记-清除”算法，清除后不进行压缩操作；可通过配置实现内存碎片整理</li></ul></li></ul><p>promotion failed – concurrent mode failure</p><ul><li>Minor GC后， surviver 空间容纳不了剩余对象，将要放入老年代，老年代有碎片或者不能容纳这些对象，即 CMS 预留内存空间无法满足程序需要，就会出现一次”Concurrent Mode Failure”失败。</li><li>解决方案<ul><li>让 CMS 在进行一定次数的 Full GC（标记清除）的时候进行一次标记整理算法，在一定程度上控制碎片的数量。 使用标记整理清除碎片<br>-XX:UseCMSCompactAtFullCollection -XX:CMSFullGCBeforeCompaction=5</li><li>增大新生代或者surviver区空间大小</li></ul></li></ul><p>concurrent mode failure</p><ul><li>将大对象放入老年代空间时，老年代空间无法满足程序需要，就会出现一次”Concurrent Mode Failure”失败。这时JVM启用后备预案：临时启用Serail Old收集器，而导致另一次 Full GC 的产生，此时代价较大(会Stop the world)，所以CMS预留内存空间不能设置得太小。</li><li>解决方案<ul><li>调低触发 CMS GC 执行的阀值。CMS GC 触发主要由 CMSInitiatingOccupancyFraction 值决定，默认情况是当老年代已用空间为68%时，即触发 CMS GC。尽早进行CMS操作，使其预留空间变大</li><li>增大老年代空间。</li></ul></li></ul><p>CMS 收集器运行示意图</p><p><img src="https://mubu.com/document_image/415ade9c-b92f-40c2-9f51-830bdaaaf757-983181.jpg" alt="img"></p><h5 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h5><p>G1（Garbage-First）是JDK7-u4才推出商用的收集器；</p><p>特点</p><ul><li>并行与并发</li><li>分代收集，收集范围包括新生代和老年代   </li><li>结合多种垃圾收集算法，空间整合，不产生碎片</li><li>可预测的停顿：低停顿的同时实现高吞吐量</li></ul><p>应用场景</p><ul><li>面向服务端应用，针对具有大内存、多处理器的机器；</li><li>最主要的应用是为需要低GC延迟，并具有大堆的应用程序提供解决方案；</li><li>如：在堆大小约6GB或更大时，可预测的暂停时间可以低于0.5秒；</li></ul><p>运作过程</p><ul><li><p>初始标记（Initial Marking）</p><ul><li>仅标记一下GC Roots能直接关联到的对象；</li><li>且修改TAMS（Next Top at Mark Start）,让下一阶段并发运行时，用户程序能在正确可用的 Region 中创建新对象；</li><li>需要”Stop The World”，但速度很快；</li></ul></li><li><p>并发标记（Concurrent Marking）</p><ul><li>进行 GC Roots Tracing 的过程；</li><li>刚才产生的集合中标记出存活对象；</li><li>耗时较长，但应用程序也在运行；</li><li>并不能保证可以标记出所有的存活对象；</li></ul></li><li><p>最终标记（Final Marking）</p><ul><li>为了修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录；</li><li>上一阶段对象的变化记录在线程的Remembered Set Log；</li><li>这里把Remembered Set Log合并到Remembered Set中；</li><li>需要”Stop The World”，且停顿时间比初始标记稍长，但远比并发标记短；</li><li>采用多线程并行执行来提升效率；</li></ul></li><li><p>筛选回收（Live Data Counting and Evacuation）</p><ul><li>首先排序各个 Region 的回收价值和成本；</li><li>然后根据用户期望的GC停顿时间来制定回收计划；</li><li>最后按计划回收一些价值高的 Region 中垃圾对象；</li><li>回收时采用”复制”算法，从一个或多个Region复制存活对象到堆上的另一个空的Region，并且在此过程中压缩和释放内存；</li><li>可以并发进行，降低停顿时间，并增加吞吐量；</li></ul></li></ul><p>G1收集器运行示意图</p><p><img src="https://mubu.com/document_image/ca0c2332-d94f-44b0-bed2-a33fd9910cb5-983181.jpg" alt="img"></p><h4 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h4><h5 id="收集器设置"><a href="#收集器设置" class="headerlink" title="收集器设置"></a>收集器设置</h5><ul><li>-XX:+UseSerialGC:设置串行收集器</li><li>-XX:+UseParallelGC:设置并行收集器</li><li>-XX:+UseParalledlOldGC:设置并行年老代收集器</li><li>-XX:+UseConcMarkSweepGC:设置并发收集器</li></ul><h5 id="垃圾回收统计信息"><a href="#垃圾回收统计信息" class="headerlink" title="垃圾回收统计信息"></a>垃圾回收统计信息</h5><ul><li>-XX:+PrintGC</li><li>-XX:+PrintGCDetails</li><li>-XX:+PrintGCTimeStamps</li><li>-Xloggc:filename</li></ul><h5 id="并行收集器设置"><a href="#并行收集器设置" class="headerlink" title="并行收集器设置"></a>并行收集器设置</h5><ul><li>-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数。</li><li>-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间</li><li>-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)</li></ul><h5 id="并发收集器设置"><a href="#并发收集器设置" class="headerlink" title="并发收集器设置"></a>并发收集器设置</h5><ul><li>-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。</li><li>-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时,使用的CPU数。并行收集线程数。</li></ul><h5 id="垃圾收集器期望的目标"><a href="#垃圾收集器期望的目标" class="headerlink" title="垃圾收集器期望的目标"></a>垃圾收集器期望的目标</h5><ul><li>停顿时间<ul><li>停顿时间越短就适合需要与用户交互的程序；</li><li>良好的响应速度能提升用户体验；</li></ul></li><li>吞吐量<ul><li>高吞吐量则可以高效率地利用CPU时间，尽快完成运算的任务；</li><li>主要适合在后台计算而不需要太多交互的任务；</li></ul></li><li>覆盖区<ul><li>在达到前面两个目标的情况下，尽量减少堆的内存空间；</li><li>可以获得更好的空间局部性；</li></ul></li></ul><h4 id="面试常见的问题"><a href="#面试常见的问题" class="headerlink" title="面试常见的问题"></a>面试常见的问题</h4><h5 id="对象提升原则"><a href="#对象提升原则" class="headerlink" title="对象提升原则"></a>对象提升原则</h5><ul><li>对象优先分配在 Eden 区，空间不够时，执行 Minor GC 。</li><li>大对象直接进入老年代（需要大量连续内存空间的对象）。目的：避免在 Eden 区和两个 Survivor 区之间发生大量的内存拷贝。</li><li>长期存活的对象进入老年代。Survivor 区中的对象每经过一次 Minor GC ，其对象年龄就+1。</li><li>动态判断对象的年龄。如果 Survivor 区中的相同年龄的所有对象的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代。</li><li>空间分配担保。每次 Minor GC 时，计算 Survivor 区移至老年区的对象平均大小，是否大于老年区剩余空间大小。是否需要 Full GC。</li></ul><h5 id="触发-Full-GC-的情况"><a href="#触发-Full-GC-的情况" class="headerlink" title="触发 Full GC 的情况"></a>触发 Full GC 的情况</h5><ul><li>老年代空间不足</li><li>永久代被占满</li><li>CMS GC时出现 Promotion Failed 和 Concurrent Mode Failure（产生的浮动垃圾）</li><li>空间分配担保失败（晋升到老年代的平均大小大于老年代的剩余空间）</li></ul><h5 id="Stop-the-World"><a href="#Stop-the-World" class="headerlink" title="Stop the World"></a>Stop the World</h5><ul><li>GC 事件/过程发生过程当中停止所有应用程序线程的执行。</li><li>停顿保证系统状态在某一瞬间的一致性，并且不会产生新的垃圾，有利于垃圾回收器更好的标记垃圾对象。</li></ul><h5 id="判断对象是否存活"><a href="#判断对象是否存活" class="headerlink" title="判断对象是否存活"></a>判断对象是否存活</h5><ul><li>引用计数法 问题： 循环引用问题</li><li>GC ROOTS 可达行分析法<ul><li>Java 虚拟机栈引用的对象</li><li>本地方法栈引用的对象</li><li>方法区静态变量引用的对象</li><li>方法区常量引用的对象</li></ul></li></ul><h5 id="GC是在什么时候，对什么东西，做了什么事情"><a href="#GC是在什么时候，对什么东西，做了什么事情" class="headerlink" title="GC是在什么时候，对什么东西，做了什么事情"></a><strong>GC是在什么时候，对什么东西，做了什么事情</strong></h5><ul><li>堆中年轻代的 eden 区满执行 minor gc，提升到老年代的对象大于老年代剩余空间大小则执行 full gc。我们无法控制 GC 发生时间，另外 System.gc 只是建议 JVM 进行 GC 。</li><li>从 gc root 开始搜索找不到的对象，而且经过一次标记、清理，仍然没有复活的对象。</li><li>删除不使用的对象，回收内存空间；运行默认的 finalize，JVM 对年轻代执行复制算法，对老年代执行标记清理/标记整理算法。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;GC-算法&quot;&gt;&lt;a href=&quot;#GC-算法&quot; class=&quot;headerlink&quot; title=&quot;GC 算法&quot;&gt;&lt;/a&gt;GC 算法&lt;/h4&gt;&lt;h5 id=&quot;标记清除算法-Mark-Sweep&quot;&gt;&lt;a href=&quot;#标记清除算法-Mark-Sweep&quot; class=&quot;headerlink&quot; title=&quot;标记清除算法 Mark-Sweep&quot;&gt;&lt;/a&gt;标记清除算法 Mark-Sweep&lt;/h5&gt;&lt;p&gt;原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标记出所有需要回收的对象&lt;/li&gt;
&lt;li&gt;标记完成后统一回收所有被标记的对象&lt;img src=&quot;https://mubu.com/document_image/e4f0c0d5-4045-4f24-b6ae-8ad9bd67b5b8-983181.jpg&quot; alt=&quot;img&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;效率不高，标记和清除效率都不高&lt;/li&gt;
&lt;li&gt;空间碎片问题，标记清除之后会产生大量不连续的内存碎片,空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时,无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java 学习" scheme="http://mindyu.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="垃圾回收器" scheme="http://mindyu.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/"/>
    
      <category term="GC算法" scheme="http://mindyu.com/tags/GC%E7%AE%97%E6%B3%95/"/>
    
      <category term="笔记整理" scheme="http://mindyu.com/tags/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
      <category term="面经" scheme="http://mindyu.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java 集合笔记</title>
    <link href="http://mindyu.com/2018/11/12/Java%20%E9%9B%86%E5%90%88%E7%AC%94%E8%AE%B0/"/>
    <id>http://mindyu.com/2018/11/12/Java 集合笔记/</id>
    <published>2018-11-12T08:06:41.000Z</published>
    <updated>2019-01-12T11:26:45.020Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h4 id="Java-集合关系图"><a href="#Java-集合关系图" class="headerlink" title="Java 集合关系图"></a>Java 集合关系图</h4><p><img src="https://mubu.com/document_image/1cc193b0-f4d2-4d6f-a8a6-fb5f0f257956-983181.jpg" alt="img"> </p><h4 id="Iterator-和-ListIterator-的区别"><a href="#Iterator-和-ListIterator-的区别" class="headerlink" title="Iterator 和 ListIterator 的区别"></a>Iterator 和 ListIterator 的区别</h4><p><strong>Iterator 接口</strong></p><ul><li>可以应用于所有的集合，Set、List和Map和这些集合的子类型</li><li>只能顺序向后遍历.</li><li>只能遍历，使用迭代器的方法可以删除元素。</li></ul><p><strong>ListIterator</strong></p><ul><li>只能用于List及其子类型。</li><li>有add方法，可以向List中添加对象</li><li>有hasPrevious()和previous()方法，可以实现逆向（顺序向前）遍历</li><li>可以定位当前索引的位置，nextIndex()和previousIndex()可以实现。</li><li>可以实现对象的修改，set()方法可以实现。</li></ul><a id="more"></a><h4 id="HashSet与TreeSet的区别"><a href="#HashSet与TreeSet的区别" class="headerlink" title="HashSet与TreeSet的区别"></a>HashSet与TreeSet的区别</h4><p><strong>HashSet</strong></p><ul><li><p>内部使用 HashMap 存储对象，将对象存储在 map 的 key 处，而 map 的 value 默认为一个静态的 object 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure></li><li><p>HashSet 实现了 Set 接口，它不允许集合中出现重复元素。当我们提到HashSet时，第一件事就是在将对象存储在HashSet之前，要确保重写hashCode() 方法和equals() 方法，这样才能比较对象的值是否相等，确保集合中没有储存相同的对象。</p></li></ul><p><strong>TreeSet</strong></p><ul><li><p>通过 TreeMap 实现，而 TreeMap 基于红黑树实现排序的效果。</p><p><img src="https://mubu.com/document_image/c0a55a08-5121-4c5c-aeeb-0d04dbad2357-983181.jpg" alt="img"></p></li><li><p>特点</p><ul><li>TreeSet是用来排序的, 可以指定一个顺序, 对象存入之后会按照指定的顺序排列</li></ul></li><li><p>使用方式</p><ul><li>a.自然顺序(Comparable)<ul><li>TreeSet类的add()方法中会把存入的对象提升为Comparable类型</li><li>调用对象的compareTo()方法和集合中的对象比较</li><li>根据compareTo()方法返回的结果进行存储</li></ul></li><li>b.比较器顺序(Comparator)<ul><li>创建TreeSet的时候可以制定一个Comparator</li><li>如果传入了Comparator的子类对象, 那么TreeSet就会按照比较器中的顺序排序</li><li>add()方法内部会自动调用Comparator接口中compare()方法排序</li><li>调用的对象是compare方法的第一个参数,集合中的对象是compare方法的第二个参数</li></ul></li><li>c.两种方式的区别<ul><li>TreeSet构造函数什么都不传, 默认按照类中 Comparable 的顺序(没有就报错ClassCastException)</li><li>TreeSet如果传入Comparator, 就优先按照Comparator</li></ul></li></ul></li></ul><h4 id="ArrayList与LinkedList的区别"><a href="#ArrayList与LinkedList的区别" class="headerlink" title="ArrayList与LinkedList的区别"></a>ArrayList与LinkedList的区别</h4><p><strong>ArrayList</strong></p><ul><li>基于动态数组实现</li><li>支持随机访问</li><li>不利于插入与删除</li></ul><p><strong>LinkedList</strong></p><ul><li>基于链表实现</li><li>新增与删除操作只需移动指针</li><li>访问时需要遍历</li></ul><h4 id="ArrayList与Vector的区别"><a href="#ArrayList与Vector的区别" class="headerlink" title="ArrayList与Vector的区别"></a>ArrayList与Vector的区别</h4><p><strong>ArrayList</strong></p><ul><li>默认长度为 10</li><li>扩容时*1.5，更节省空间</li></ul><p><strong>Vector</strong></p><ul><li>方法都是同步的，线程安全</li><li>默认长度也是 10</li><li>扩容时*2</li></ul><h4 id="CopyOnWrite容器（写时复制的容器）"><a href="#CopyOnWrite容器（写时复制的容器）" class="headerlink" title="CopyOnWrite容器（写时复制的容器）"></a>CopyOnWrite容器（写时复制的容器）</h4><p>原理：</p><ul><li>当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。</li></ul><p>优势：</p><ul><li>可以对 CopyOnWrite 容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以 CopyOnWrite 容器也是一种读写分离的思想，读和写不同的容器。</li></ul><p>缺点：</p><ul><li>内存占用问题<ul><li>因为CopyOnWrite的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存，旧的对象和新写入的对象。注意:在复制的时候只是复制容器里的引用，只是在写的时候会创建新对象添加到新容器里，而旧容器的对象还在使用，所以有两份对象内存。</li></ul></li><li>数据一致性问题<ul><li>CopyOnWrite 容器只能保证数据的最终一致性，不能保证数据的实时一致性。</li></ul></li></ul><p>使用场景：</p><ul><li><p>适用于读多写少的并发场景</p></li><li><p>CopyOnWriteArrayList</p><ul><li>添加的时候是需要加锁的</li><li>读的时候不需要加锁，如果读的时候有多个线程正在向CopyOnWriteArrayList添加数据，读还是会读到旧的数据，因为写的时候不会锁住旧的CopyOnWriteArrayList。</li></ul></li></ul><h4 id="ConcurrentHashMap、Collections-synchronizedMap、HashMap与HashTable的区别"><a href="#ConcurrentHashMap、Collections-synchronizedMap、HashMap与HashTable的区别" class="headerlink" title="ConcurrentHashMap、Collections.synchronizedMap、HashMap与HashTable的区别"></a>ConcurrentHashMap、Collections.synchronizedMap、HashMap与HashTable的区别</h4><p><strong><em>equals 方法和 hashCode 方法</em></strong></p><ul><li>重写 equals 方法时必须要重写 hashCode 方法<ul><li>在一个应用程序执行期间，如果一个对象的 equals 方法做比较所用到的信息没有被修改的话，那么对该对象调用 hashCode 方法多次，它必须始终如一地返回同一个整数。在同一个应用程序的多次执行过程中，这个整数可以不同，即这个应用程序这次执行返回的整数与下一次执行返回的整数可以不一致。</li><li>如果两个对象根据 equals(Object) 方法是相等的，那么调用这两个对象中任一个对象的 hashCode 方法必须产生同样的整数结果。</li><li>如果两个对象根据 equals(Object) 方法是不相等的，那么调用这两个对象中任意一个对象的hashCode方法，不要求必须产生不同的整数结果。</li></ul></li></ul><p>静态类部类 Node&lt;K,V&gt; 重写了 hashCode 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;       </span><br><span class="line"><span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value); </span><br><span class="line"><span class="comment">// 会去调用key和value重写的hashCode 方法，然后异或</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String 的 hashCode <code>h = 31 * h + val[i];</code></p><ul><li>为什么乘 31<ul><li>31是一个素数，素数作用就是如果我用一个数字来乘以这个素数，那么最终的出来的结果只能被素数本身和被乘数还有1来整除！。(减少冲突)</li><li>31可以 由 i*31== (i&lt;&lt;5)-i 来表示,现在很多虚拟机里面都有做相关优化.（提高算法效率）</li><li>选择系数的时候要选择尽量大的系数。因为如果计算出来的hash地址越大，所谓的“冲突”就越少，查找起来效率也会提高。（减少冲突）</li><li>31只占用5bits,相乘造成数据溢出的概率较小。</li></ul></li></ul><p><strong><em>Hash 冲突的解决方法</em></strong></p><ul><li><p>开放定址法</p><ul><li>线性探测再散列   di = 1 , 2 , 3 , … , m-1</li><li>平方探测再散列   di = 1^2 , -1^2 , 2^2 , -2^2 , 3^2 , -3^2 , … , k^2 ,  -k^2 (避免聚集)</li><li>随机探测再散列   di 是一组伪随机数列</li></ul></li><li><p>链地址法</p></li><li><p>再哈希 （有多个 hashCode 方法）</p></li><li><p>建立公共溢出区</p></li></ul><p>  <strong>HashMap</strong></p><ul><li>capacity    ：当前数组容量，始终保持 2^n，可以扩容，扩容后数组大小为当前的 2 倍。loadFactor：负载因子，默认为 0.75。threshold：扩容的阈值，等于 capacity * loadFactor</li><li>继承自 AbstractMap，实现了 Map 接口</li><li>线程不安全</li><li>只有containsValue和containsKey方法</li><li>允许有一个 null 键和多个 null 值</li><li>重新计算 hash 值<br><code>return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16); // 高16位与低16位异或运算</code></li><li>默认容量为 16 ，扩容时 *2（总是 2 的次方，原因是可以使用位运算取代取模运算）</li><li>1.7与1.8的区别<ul><li>1.7 采用头插法，问题是多线程下扩容可能导致死锁。</li><li>1.8 采用尾插法；当链表长度&gt;=8时，采用红黑树，提高检索效率。</li></ul></li></ul><p><strong>HashTable</strong>    </p><ul><li>继承自 Dictionary，实现 Map 、Enumeration接口</li><li>线程安全</li><li>有containsValue、contains（同containsValue）和containsKey方法</li><li><p>键和值都不允许有 null。put(null, null)时，编译可以通过，但是运行时会抛出空指针异常</p></li><li><p>直接使用对象的 hash 值</p></li><li>默认容量为 11 ，扩容时 *2+1（保证为奇数）<br>为什么保证为奇数？在应用数据分布在等差数据集合(如偶数)上时，如果公差与桶容量有公约数n，则至少有 (n-1)/n 数量的桶是利用不到的。 实际上 HashMap 也会有此问题，并且不能指定桶容量。所以 HashMap 会在取模哈希前先做一次哈希。</li></ul><p><strong>ConcurrentHashMap</strong> <a href="http://www.importnew.com/22007.html" target="_blank" rel="noopener">http://www.importnew.com/22007.html</a></p><p><em>JDK 1.7实现</em></p><p>一个ConcurrentHashMap由多个segment(分段锁)（默认为16个）组成，每个segment包含一个 Entry 的数组。这里比HashMap多了一个segment类。该类继承了ReentrantLock类，所以本身是一个锁。当多线程对ConcurrentHashMap操作时，不是完全锁住map，而是锁住相应的segment。这样提高了并发效率。 </p><p>Segment 数组不可以扩容，每个segment中的Entry的数组初始大小为2，可以扩容。</p><p>ConcurrentHashMap 提供并发的检索和更新操作，功能规范和 hashtable 一样。</p><p>更新操作的并发级别是可以配置的，由 concurrencyLevel 决定，作为hint。这个参数将整个hash表分割成相互独立的子表，无竞争操作。这个 concurrencyLevel 的设置根据使用场景的并发修改量来确定，过大则浪费内存空间，过小则影响并发性能。最好是在构造的时候就确定。</p><p>当需要遍历、size()、empty()时，需要获取所有的 segment 的锁，效率降低。</p><p>执行 size() 时，先尝试不加锁，如果连续两次不加锁得到的结果一致，则认为这个值是正确的。如果连续执行三次，依然不满足，则对每一个 segment 进行加锁求 size。</p><p>不允许空键、空值。同hashtable,异hashmap。</p><p>迭代元素不会抛出并发修改异常，迭代元素只是迭代器创建时数据结构的快照。迭代同时只能被一个线程使用。</p><p><em>JDK 1.8实现</em></p><p>当链表中的元素超过了 8 个以后，会将链表转换为红黑树，在这些位置进行查找的时候可以降低时间复杂度为 O(logN)。</p><p>put 的详细过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line"> <span class="comment">// 得到 hash 值</span></span><br><span class="line"> <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line"> <span class="comment">// 用于记录相应链表的长度</span></span><br><span class="line"> <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">     Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">     <span class="comment">// 如果数组"空"，进行数组初始化</span></span><br><span class="line">     <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">         <span class="comment">// 初始化数组，后面会详细介绍</span></span><br><span class="line">         tab = initTable();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 找该 hash 值对应的数组下标，得到第一个节点 f</span></span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 如果数组该位置为空，</span></span><br><span class="line">         <span class="comment">// 用一次 CAS 操作将这个新值放入其中即可，这个 put 操作差不多就结束了，可以拉到最后面了</span></span><br><span class="line">         <span class="comment">// 如果 CAS 失败，那就是有并发操作，进到下一个循环就好了</span></span><br><span class="line">         <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,<span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">             <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// hash 居然可以等于 MOVED，这个需要到后面才能看明白，不过从名字上也能猜到，肯定是因为在扩容</span></span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">         <span class="comment">// 帮助数据迁移，这个等到看完数据迁移部分的介绍后，再理解这个就很简单了</span></span><br><span class="line">         tab = helpTransfer(tab, f);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">else</span> &#123; <span class="comment">// 到这里就是说，f 是该位置的头结点，而且不为空</span></span><br><span class="line"></span><br><span class="line">         V oldVal = <span class="keyword">null</span>;</span><br><span class="line">         <span class="comment">// 获取数组该位置的头结点的监视器锁</span></span><br><span class="line">         <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">             <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123; <span class="comment">// 头结点的 hash 值大于 0，说明是链表</span></span><br><span class="line">                     <span class="comment">// 用于累加，记录链表的长度</span></span><br><span class="line">                     binCount = <span class="number">1</span>;</span><br><span class="line">                     <span class="comment">// 遍历链表</span></span><br><span class="line">                     <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                         K ek;</span><br><span class="line">                         <span class="comment">// 如果发现了"相等"的 key，判断是否要进行值覆盖，然后也就可以 break 了</span></span><br><span class="line">                         <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                             ((ek = e.key) == key ||</span><br><span class="line">                              (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                             oldVal = e.val;</span><br><span class="line">                             <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                 e.val = value;</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                         &#125;</span><br><span class="line">                         <span class="comment">// 到了链表的最末端，将这个新值放到链表的最后面</span></span><br><span class="line">                         Node&lt;K,V&gt; pred = e;</span><br><span class="line">                         <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                             pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                             <span class="keyword">break</span>;</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123; <span class="comment">// 红黑树</span></span><br><span class="line">                     Node&lt;K,V&gt; p;</span><br><span class="line">                     binCount = <span class="number">2</span>;</span><br><span class="line">                     <span class="comment">// 调用红黑树的插值方法插入新节点</span></span><br><span class="line">                     <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                    value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                         oldVal = p.val;</span><br><span class="line">                         <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                             p.val = value;</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// binCount != 0 说明上面在做链表操作</span></span><br><span class="line">         <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="comment">// 判断是否要将链表转换为红黑树，临界值和 HashMap 一样，也是 8</span></span><br><span class="line">             <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                 <span class="comment">// 这个方法和 HashMap 中稍微有一点点不同，那就是它不是一定会进行红黑树转换，</span></span><br><span class="line">                 <span class="comment">// 如果当前数组的长度小于 64，那么会选择进行数组扩容，而不是转换为红黑树</span></span><br><span class="line">                 <span class="comment">//    具体源码我们就不看了，扩容部分后面说</span></span><br><span class="line">                 treeifyBin(tab, i);</span><br><span class="line">             <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                 <span class="keyword">return</span> oldVal;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// </span></span><br><span class="line"> addCount(<span class="number">1L</span>, binCount);</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <em>详细步骤：</em></p><ul><li><p>获取table数组</p></li><li><p>若为null,则初始化initTable</p></li><li><p>通过hash值找到对应的hash桶，若该桶中没有元素，则先采用CAS机制put新节点，成功则跳出循环</p></li><li><p>如果当前节点hash值为-1，则说明正在扩容，去帮助扩容helpTransfer(tab, f)</p></li><li><p>否则对该头节点进行加锁。</p></li><li><p>如果当前结点hash值&gt;=0，则说明是链表形式，遍历链表，若找到hash值相同且key.equals(ek)，则更新该节点中的value，若未找到则在链表尾添加新节点。</p></li><li><p>如果当前结点hash值小于0，判断如果 f instanceof TreeBin ，那么就是红黑树的结构。</p></li><li><p>如果再链表中添加节点，判断链表长度是否达到了8，是否需要转换为红黑树。</p></li></ul><ul><li><p>检索操作get不阻塞，很可能和更新操作重叠，总能得到最近更新完成的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        <span class="keyword">volatile</span> V val;</span><br><span class="line">        <span class="keyword">volatile</span> Node&lt;K,V&gt; next;    <span class="comment">// next 也具有 volatile 的特性，可以保证总能得到最近更新完成的值。</span></span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  size() 方法可以直接获取 ConcurrentHashMap 中元素的个数。CounterCell 静态内部类包含一个 volatile long value，此 value 表示每一个 hash 桶中元素的数量。然后使用一个 CounterCell 的数组保存每个 hash 中的元素个数。求 size 时只需要统计对数组累加即可。当添加或者删除节点时，采用 CAS 机制修改 CounterCell 数组中的元素的值。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sun</span>.misc.Contended <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterCell</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line">    CounterCell(<span class="keyword">long</span> x) &#123; value = x; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  扩容：tryPresize<br>  sizeCtl 字段用于初始化和扩容时，为负数表示正在初始化或者扩容，-1表示初始化，该数+1表示正在扩容的线程数。</p><p>  数据迁移：transfer<br>  transferIndex 字段表示扩容时，下一个任务的位置。</p><h4 id="Collections-synchronizedMap"><a href="#Collections-synchronizedMap" class="headerlink" title="Collections.synchronizedMap"></a>Collections.synchronizedMap</h4><p>类似与 HashTable 的实现，为每一个方法都加上 synchronized 关键字。</p><p>SynchronizedMap 为 Collections 类中的一个内部类，保存一个map对象和一个Object对象的互斥量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K,V&gt; m;     <span class="comment">// Backing Map</span></span><br><span class="line"><span class="keyword">final</span> Object      mutex;            <span class="comment">// Object on which to synchronize</span></span><br><span class="line">SynchronizedMap(Map&lt;K,V&gt; m) &#123;</span><br><span class="line">    <span class="keyword">this</span>.m = Objects.requireNonNull(m);</span><br><span class="line">    mutex = <span class="keyword">this</span>;        <span class="comment">// mutex默认为当前对象，也可以传递一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用 map 对象时，先对 mutex 加锁，然后再调用原来 map 的自身的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mutex) &#123;<span class="keyword">return</span> m.size();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><p>为 HashMap 的每个元素添加一个前驱和后继指针形成双链表结构，通过 accessOrder 字段设置链表顺序，为 true ,则按 LRU 顺序（每次访问将元素移到链尾）；为 false 则按插入顺序。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Java-集合关系图&quot;&gt;&lt;a href=&quot;#Java-集合关系图&quot; class=&quot;headerlink&quot; title=&quot;Java 集合关系图&quot;&gt;&lt;/a&gt;Java 集合关系图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://mubu.com/document_image/1cc193b0-f4d2-4d6f-a8a6-fb5f0f257956-983181.jpg&quot; alt=&quot;img&quot;&gt; &lt;/p&gt;
&lt;h4 id=&quot;Iterator-和-ListIterator-的区别&quot;&gt;&lt;a href=&quot;#Iterator-和-ListIterator-的区别&quot; class=&quot;headerlink&quot; title=&quot;Iterator 和 ListIterator 的区别&quot;&gt;&lt;/a&gt;Iterator 和 ListIterator 的区别&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Iterator 接口&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以应用于所有的集合，Set、List和Map和这些集合的子类型&lt;/li&gt;
&lt;li&gt;只能顺序向后遍历.&lt;/li&gt;
&lt;li&gt;只能遍历，使用迭代器的方法可以删除元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ListIterator&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只能用于List及其子类型。&lt;/li&gt;
&lt;li&gt;有add方法，可以向List中添加对象&lt;/li&gt;
&lt;li&gt;有hasPrevious()和previous()方法，可以实现逆向（顺序向前）遍历&lt;/li&gt;
&lt;li&gt;可以定位当前索引的位置，nextIndex()和previousIndex()可以实现。&lt;/li&gt;
&lt;li&gt;可以实现对象的修改，set()方法可以实现。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java 学习" scheme="http://mindyu.com/categories/Java-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="笔记整理" scheme="http://mindyu.com/tags/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
      <category term="面经" scheme="http://mindyu.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="Java集合" scheme="http://mindyu.com/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 常用命令集合</title>
    <link href="http://mindyu.com/2018/04/28/Ubuntu16-04-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/"/>
    <id>http://mindyu.com/2018/04/28/Ubuntu16-04-常用命令集合/</id>
    <published>2018-04-28T05:27:17.000Z</published>
    <updated>2018-05-07T13:32:43.094Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>方法一：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install 软件名         <span class="comment">//最常用方法</span></span><br><span class="line">sudo apt-get remove 软件名 <span class="comment">//卸载软件</span></span><br><span class="line">sudo apt-get update   <span class="comment">//更新软件列表，会访问源列表里的每个网址，并读取软件列表，然后保存在本地电脑</span></span><br><span class="line">sudo apt-get upgrade   <span class="comment">//更新软件，把本地已安装的软件，与刚update软件进行对比，如果发现已安装的软件版本太低，就会提示你更新。</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>方法二：</p><ul><li>deb软件包可直接安装</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  dpkg  -<span class="selector-tag">i</span>  package<span class="selector-class">.deb</span>        <span class="comment">//deb包安装方法</span></span><br></pre></td></tr></table></figure><p>deb详解：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dpkg -r package  删除包 </span><br><span class="line">dpkg -P package  删除包（包括配置文件）</span><br><span class="line">dpkg -L package  列出与该包关联的文件 </span><br><span class="line">dpkg -l packag  显示该包的版本e</span><br><span class="line">dpkg –unpack package<span class="selector-class">.deb</span>  解开 deb 包的内容 </span><br><span class="line">dpkg -S keyword  搜索所属的包内容 </span><br><span class="line">dpkg -l  列出当前已安装的包</span><br><span class="line">dpkg -c package<span class="selector-class">.deb</span>    列出 deb 包的内容 </span><br><span class="line">dpkg –configure package  配置包</span><br></pre></td></tr></table></figure><p>方法三:</p><ul><li>rpm软件包安装<br>Ubuntu的软件包格式是deb，如果要安装rpm的包，则要先用alien把rpm转换成deb。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install alien  <span class="comment">//安装alien工具</span></span><br><span class="line"></span><br><span class="line">alien -d *<span class="selector-class">.rpm</span><span class="comment">//转换rpm包为deb包，然后再按方法二安装</span></span><br><span class="line"></span><br><span class="line">alien -<span class="selector-tag">i</span> *<span class="selector-class">.rpm</span><span class="comment">//直接对rpm包进行安装</span></span><br></pre></td></tr></table></figure><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><ul><li>常用命令：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~                       <span class="comment">//当前用户主目录 </span></span><br><span class="line">cd ~                    <span class="comment">//home目录（/开头是绝对路径；.开头是相对路径）</span></span><br><span class="line">pwd                     <span class="comment">//获取当前路径</span></span><br><span class="line">mkdir mydir             <span class="comment">//新建目录mydir</span></span><br><span class="line">cp test(此处可为路径) /opt/test   <span class="comment">//将当前目录下的test复制到test中</span></span><br><span class="line">rm                      <span class="comment">//删除文件</span></span><br><span class="line">mv  oldname newname            <span class="comment">//重命名</span></span><br><span class="line">remove <span class="string">'y/a-z/A-Z/'</span> *<span class="selector-class">.c</span>  <span class="comment">//删文件</span></span><br><span class="line">cat test                <span class="comment">//查看文件test;-n显示行号</span></span><br><span class="line">file test               <span class="comment">//查看文件类型</span></span><br><span class="line">ls                         <span class="comment">//查看当前目录下的文件</span></span><br><span class="line">ls -l 文件名称               <span class="comment">//查看详细信息（文件夹将-l改为-ld）</span></span><br></pre></td></tr></table></figure><ul><li>文件权限说明：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件属性 连接数 文件拥有者 所属群组 文件大小 文件修改时间 文件名</span></span><br><span class="line">drwxrwxr-x  <span class="number">9</span> mindyu mindyu <span class="number">4096</span> <span class="number">4</span>月  <span class="number">29</span> <span class="number">01</span>:<span class="number">15</span> Blog</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E5%91%BD%E4%BB%A4/ls-l.png" alt="文件详细权限"><br>r可读，w可写，x 可执行，-不可读/写/执行<br>文件属性占10个位置<br>例如：<br>d rwx rwx r-x<br>第一个字符指定了文件类型：<br>‘- ’ 代表非目录的文件<br>‘d’ 代表一个目录。<br>第二段是文件拥有者User的属性，<br>第三段是文件所属群组Group的属性，<br>第四段是对于其它用户Other的属性。</p><ul><li>权限修改<br>方法一：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//chmod [-R] 模式 文件</span></span><br><span class="line">chmod abc file</span><br></pre></td></tr></table></figure><p>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。r=4，w=2，x=1</p><p>例子：<br>若要rwx属性则4+2+1=7；<br>若要rw-属性则4+2=6；<br>若要r-x属性则4+1=5。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="number">600</span> ××× （只有所有者有读和写的权限）</span><br><span class="line">sudo chmod <span class="number">644</span> ××× （所有者有读和写的权限，组用户和其他用户只有读的权限）</span><br><span class="line">sudo chmod <span class="number">777</span> ××× （每个人都有读和写以及执行的权限）</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [ugoa] &#123;+|-|=&#125; [rwxst] 文件</span><br></pre></td></tr></table></figure><p>用户参数：u 文件主     g 同组用户     o 其他用户     a 所有用户<br>操作方法：+ 增加后列权限     - 取消后列权限     = 置成后列权限<br>操作参数：r 可读     w 可写     x 可执行     s 运行时可置UID     t 运行时可置GID </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u+rw abc<span class="selector-class">.txt</span>      <span class="comment">//给用户增加读写权限</span></span><br><span class="line">chmod o-rwx abc<span class="selector-class">.txt</span>         <span class="comment">//不允许其他用户读写执行</span></span><br><span class="line">chmod g=rx abc<span class="selector-class">.txt</span>          <span class="comment">//只允许群组读取和执行</span></span><br></pre></td></tr></table></figure><h2 id="apt-get常用命令"><a href="#apt-get常用命令" class="headerlink" title="apt-get常用命令"></a>apt-get常用命令</h2><p>  update - 取回更新的软件包列表信息<br>  upgrade - 进行一次升级<br>  install - 安装新的软件包(注：软件包名称是 libc6 而非 libc6.deb)<br>  remove - 卸载软件包<br>  purge - 卸载并清除软件包的配置<br>  autoremove - 卸载所有自动安装且不再使用的软件包<br>  dist-upgrade - 发布版升级，见 apt-get(8)<br>  dselect-upgrade - 根据 dselect 的选择来进行升级<br>  build-dep - 为源码包配置所需的编译依赖关系<br>  clean - 删除所有已下载的包文件<br>  autoclean - 删除已下载的旧包文件<br>  check - 核对以确认系统的依赖关系的完整性<br>  source - 下载源码包文件<br>  download - 下载指定的二进制包到当前目录<br>  changelog - 下载指定软件包，并显示其changelog</p><h2 id="解压缩命令"><a href="#解压缩命令" class="headerlink" title="解压缩命令"></a>解压缩命令</h2><p>.tar<br>解包：<code>tar xvf FileName.tar</code><br>打包：<code>tar cvf FileName.tar DirName</code> 将DirName文件夹打包成一个FileName.tar文件<br>打包：将一大堆文件或目录变成一个总的文件，<br>压缩：将一个大的文件通过一些压缩算法变成一个小文件。</p><p>.gz<br>解压1：<code>gunzip FileName.gz</code><br>解压2：<code>gzip -d FileName.gz</code><br>压缩：<code>gzip FileName</code></p><p>.tar.gz 和 .tgz<br>解压：<code>tar zxvf FileName.tar.gz</code><br>压缩：<code>tar zcvf FileName.tar.gz DirName</code></p><p>.bz2<br>解压1：<code>bzip2 -d FileName.bz2</code><br>解压2：<code>bunzip2 FileName.bz2</code><br>压缩： <code>bzip2 -z FileName</code></p><p>.tar.bz2<br>解压：<code>tar jxvf FileName.tar.bz2</code><br>压缩：<code>tar jcvf FileName.tar.bz2 DirName</code></p><p>.bz<br>解压1：<code>bzip2 -d FileName.bz</code><br>解压2：<code>bunzip2 FileName.bz</code><br>压缩：未知</p><p>.tar.bz<br>解压：<code>tar jxvf FileName.tar.bz</code><br>压缩：未知</p><p>.Z<br>解压：<code>uncompress FileName.Z</code><br>压缩：<code>compress FileName</code></p><p>.tar.Z<br>解压：<code>tar Zxvf FileName.tar.Z</code><br>压缩：<code>tar Zcvf FileName.tar.Z DirName</code></p><p>.zip<br>解压：<code>unzip FileName.zip</code><br>压缩：<code>zip FileName.zip DirName</code></p><p>.rar<br>解压：<code>rar x FileName.rar</code><br>压缩：<code>rar a -r FileName.rar DirName</code><br>解压需要安装：<code>sudo apt-get install unrar</code><br>压缩需要安装：<code>sudo apt-get install rar</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;软件安装&quot;&gt;&lt;a href=&quot;#软件安装&quot; class=&quot;headerlink&quot; title=&quot;软件安装&quot;&gt;&lt;/a&gt;软件安装&lt;/h2&gt;&lt;p&gt;方法一：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install 软件名         &lt;span class=&quot;comment&quot;&gt;//最常用方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get remove 软件名			 &lt;span class=&quot;comment&quot;&gt;//卸载软件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update				   &lt;span class=&quot;comment&quot;&gt;//更新软件列表，会访问源列表里的每个网址，并读取软件列表，然后保存在本地电脑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get upgrade			   &lt;span class=&quot;comment&quot;&gt;//更新软件，把本地已安装的软件，与刚update软件进行对比，如果发现已安装的软件版本太低，就会提示你更新。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Ubuntu学习" scheme="http://mindyu.com/categories/Ubuntu%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ubuntu16.04" scheme="http://mindyu.com/tags/Ubuntu16-04/"/>
    
      <category term="Linux命令" scheme="http://mindyu.com/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04 常用软件安装</title>
    <link href="http://mindyu.com/2018/04/26/Ubuntu%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/"/>
    <id>http://mindyu.com/2018/04/26/Ubuntu系统的使用及常用命令集合/</id>
    <published>2018-04-26T01:24:17.000Z</published>
    <updated>2018-05-07T13:32:43.096Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Ubuntu系统尝鲜"><a href="#Ubuntu系统尝鲜" class="headerlink" title="Ubuntu系统尝鲜"></a>Ubuntu系统尝鲜</h2><p>不知何时起，对Linux操作系统充满了好奇心，想去接触一番。    都说学编程搞开发的都离不开Linux操作系统，个人觉得Linux操作系统更适合学习，少了各种弹窗，界面更加清爽，系统任由你自己去操控，系统也更加稳定，许多的服务器也基本上都是Linux操作系统。然后就自己倒腾，在Windows上装了一个Ubuntu16.04LTS的双系统，通过日常是的使用去渐渐熟悉Linux操作系统，以及各种命令的使用～<a id="more"></a></p><h2 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h2><ol><li><a href="https://github.com/shadowsocks" target="_blank" rel="noopener">Shadowsocks安装</a></li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5 </span><br><span class="line"></span><br><span class="line">      sudo apt-get update</span><br><span class="line"></span><br><span class="line">      sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure><p><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/shadowsocks.png" alt="enter description here"><br>在Ubuntu系统上使用还需要设置系统代理，在 设置-》网络-》网络代理 中设置代理模式，最好设置为自动代理方式，然后添加一个pac文件，应用到整个系统即可。</p><ol start="2"><li><p>小书匠安装<br>一款Markdown编辑器，支持多平台使用。详细的<a href="http://www.mindyu.com/2018/04/28/Ubuntu%E5%AE%89%E8%A3%85%E5%B0%8F%E4%B9%A6%E5%8C%A0%E5%B9%B6%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener">安装及添加桌面快捷方式</a>可见我的另一篇博客。</p></li><li><p>安装搜狗输入法<br>其实个人感觉系统自带的输入法也还可以。<br> 3.1 在官网下载搜狗输入法安装包<br> 3.2 切换到deb包所在的目录，并执行以下命令：<br><code>sudo dkpg -i deb包名</code><br> 3.3 若出现由于缺少相关依赖文件的错误。执行以下命令，安装所缺少的依赖文件，然后再次使用3.2命令完成安装：<br><code>sudo apt-get -f install</code><br> 3.4 在“语言支持”面板，添加汉语支持，并将输入法系统设置为fcitx。然后重启<br> 3.5 在Dash中搜索fcitx configuartion，在Input Method中添加和配置sogoupinyin即可</p></li><li><p>JDK安装</p><ul><li><p>添加ppa</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装oracle-java-installer</p></li></ul></li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JDK8</span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JDK7</span><br><span class="line">sudo apt-get install oracle-java7-installer</span><br></pre></td></tr></table></figure><p>安装时会提示你同意Oracle的服务条款，选择ok，然后选择yes</p><ol start="5"><li><p>Eclipse安装<br>安装Eclipse<br><code>sudo apt-get install eclipse</code><br>启动Eclipse<br><code>eclipse</code><br>以及快捷方式制作，可见<a href="http://www.mindyu.com/2018/04/28/Ubuntu%E5%AE%89%E8%A3%85%E5%B0%8F%E4%B9%A6%E5%8C%A0%E5%B9%B6%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener">小书匠安装的详细博客</a></p></li><li><p>MyEclipse安装</p></li></ol><ul><li>在<a href="http://www.myeclipsecn.com/download/" target="_blank" rel="noopener">官方中文网</a>下载MyEclipse安装包</li><li>我现在的是离线版，解压后为.run为后缀名的文件</li><li>双击执行，然后就和windows安装过程一样。选择安装目录比如/opt/MyEclipse/，一路Next即可。最后一步取消勾选。不立即打开MyEclipse。</li><li>然后下载对应的破解包，解压之后，执行cracker.jar包<br><code>java -jar cracker.jar</code></li><li>之后的步骤和Windows破解过程一样。<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/myeclipse.png" alt="enter description here"><br>如果你一遍成功，那么就恭喜你。 我第一次安装失败了，因为破解包的问题，所以要确保破解包的正确性。 失败之后存在一个卸载不干净的问题。我也没有找到解决办法。 换了一台电脑，另外找了一个破解包，完美破解。</li></ul><ol start="7"><li>Google浏览器安装</li></ol><ul><li>下载 Chrome（Linux 版）<a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">https://www.google.cn/intl/zh-CN/chrome/</a></li><li>终端下输入如下内容来安装.deb文件<br><code>sudo dpkg -i 软件包名.deb</code></li><li>然后在Dash中搜索Google，打开即可。</li></ul><p>使用中可能遇到两个问题：<br> （1）重启之后，Google浏览器就打不开了<br> （2）设置新标签页打开网页</p><p> 解决方案：<br> 问题1：<br> 网上的解决办法，大多是删除chrome的配置文件<br> <code>rm -r~/.config/google-chrome</code><br> 但是指标不治本，下次打开依然会出现问题<br> 真正的解决方案是：<br> 安装gnome-keyring。因为在登录谷歌账户之后，chrome会使用gnome-keyring来保护你的账户。<br> <code>sudo apt install gnome-keyring</code></p><p> 问题2：<br> 打开google页面，任意搜索一个内容，在搜索结果页面的上面靠中间位置有一个设置，点击设置然后选择 搜索设置 ，即进入如下页面。<br>     <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/google%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F.png" alt="enter description here"><br>    然后勾选结果打开方式的 在新的浏览器窗口中打开所选的每条搜索结果即可。</p><ol start="8"><li>系统监视器<br>实时查看电脑的cpu，内存占用率，更可以查看网速<br>安装：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor </span><br><span class="line"></span><br><span class="line">      sudo apt-get update  </span><br><span class="line"></span><br><span class="line">      sudo apt-get install indicator-sysmonitor</span><br></pre></td></tr></table></figure></li></ol><p><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/sysmonitor.png" alt="    "></p><ol start="9"><li>WPS 安装</li></ol><ul><li>在<a href="http://community.wps.cn/download/" target="_blank" rel="noopener">WPS官网下载alpha版本</a>，我下载的是wps-office_10.1.0.5672~a21_amd64.deb</li><li>执行安装命令：<br><code>sudo dpkg -i wps-office_10.1.0.5672~a21_amd64.deb</code></li><li>安装完成后，在Dash中即可搜索到，打开会发现字体缺失的问题<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/wps_%E7%BC%BA%E5%A4%B1%E5%AD%97%E4%BD%93.png" alt="enter description here"></li><li>下载<a href="http://pan.baidu.com/s/1mh0lcbY" target="_blank" rel="noopener">字体包</a></li><li>创建目录：<br><code>sudo mkdir /usr/share/fonts/wps-office</code></li><li>将下载的字体复制到创建的目录：<br><code>sudo cp -r wps_symbol_fonts.zip /usr/share/fonts/wps-office</code></li><li>切换到<code>/usr/share/fonts/wps-office</code>目录解压字体包：<br><code>sudo unzip wps_symbol_fonts.zip</code></li><li>解压后删除字体包：<br><code>sudo rm -r wps_symbol_fonts.zip</code><br>再次打开就不会提示缺失字体包了！<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/wps.png" alt="enter description here"></li></ul><ol start="10"><li>下载工具uget安装</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:plushuang-tw/uget-stable</span><br><span class="line"></span><br><span class="line">　　 sudo apt-get update</span><br><span class="line"></span><br><span class="line">　　 sudo apt-get install uget</span><br></pre></td></tr></table></figure><p><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/ubuntu%E8%BD%AF%E4%BB%B6/uget.png" alt="enter description here"><br>终端和浏览器下载东西比较慢的时候可以试试，下载速度还是比较可观！</p><p>参考博客：<br><a href="https://www.cnblogs.com/wadxy1314/p/6880264.html" target="_blank" rel="noopener">https://www.cnblogs.com/wadxy1314/p/6880264.html</a></p><p><a href="https://blog.csdn.net/Jesse_Mx/article/details/52816928" target="_blank" rel="noopener">https://blog.csdn.net/Jesse_Mx/article/details/52816928</a></p><p><a href="https://blog.csdn.net/u011324454/article/details/78497021" target="_blank" rel="noopener">https://blog.csdn.net/u011324454/article/details/78497021</a></p><p><a href="https://blog.csdn.net/VectorWWW/article/details/78820156" target="_blank" rel="noopener">https://blog.csdn.net/VectorWWW/article/details/78820156</a></p><p><a href="https://my.oschina.net/renwofei423/blog/635798" target="_blank" rel="noopener">https://my.oschina.net/renwofei423/blog/635798</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ubuntu系统尝鲜&quot;&gt;&lt;a href=&quot;#Ubuntu系统尝鲜&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu系统尝鲜&quot;&gt;&lt;/a&gt;Ubuntu系统尝鲜&lt;/h2&gt;&lt;p&gt;不知何时起，对Linux操作系统充满了好奇心，想去接触一番。    都说学编程搞开发的都离不开Linux操作系统，个人觉得Linux操作系统更适合学习，少了各种弹窗，界面更加清爽，系统任由你自己去操控，系统也更加稳定，许多的服务器也基本上都是Linux操作系统。然后就自己倒腾，在Windows上装了一个Ubuntu16.04LTS的双系统，通过日常是的使用去渐渐熟悉Linux操作系统，以及各种命令的使用～
    
    </summary>
    
      <category term="Ubuntu学习" scheme="http://mindyu.com/categories/Ubuntu%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ubuntu16.04" scheme="http://mindyu.com/tags/Ubuntu16-04/"/>
    
      <category term="Linux命令" scheme="http://mindyu.com/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装小书匠并创建桌面快捷方式</title>
    <link href="http://mindyu.com/2018/04/24/Ubuntu%E5%AE%89%E8%A3%85%E5%B0%8F%E4%B9%A6%E5%8C%A0%E5%B9%B6%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
    <id>http://mindyu.com/2018/04/24/Ubuntu安装小书匠并创建桌面快捷方式/</id>
    <published>2018-04-24T15:47:16.000Z</published>
    <updated>2018-05-07T13:32:43.095Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="小书匠简介"><a href="#小书匠简介" class="headerlink" title="小书匠简介"></a>小书匠简介</h2><p> <a href="http://soft.xiaoshujiang.com/" target="_blank" rel="noopener">小书匠编辑器</a>是一款专为markdown写作而设计的编辑器。 支持多种编辑模式。单栏编辑，双栏编辑，三栏编辑，实时预览，全屏写作，全屏阅读…想怎么切换，就怎么切换，就是这样随心所欲。 多种主题选择、丰富的语法支持、第三方同步等功能特色。<br>原先在windows上习惯了使用小书匠，然后就想着在Ubuntu上也装一个。<a id="more"></a><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E5%B0%8F%E4%B9%A6%E5%8C%A0/xsj_stand.png" alt="enter description here"></p><h2 id="小书匠安装"><a href="#小书匠安装" class="headerlink" title="小书匠安装"></a>小书匠安装</h2><p>小书匠已经托管到github，首先下载对应版本到本地。<br><code>https://github.com/suziwen/markdownxiaoshujiang</code></p><p>解压下载下来的zip文件到指定文件夹：<br><code># unzip Story-writer-linux64.zip.zip -d /opt/Story-Writer/</code></p><p>切换到解压出来的文件夹根目录，然后启动软件<br><code># ./Story-writer</code>即可启动软件</p><p><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E5%B0%8F%E4%B9%A6%E5%8C%A0/story_writer.png" alt="小书匠"></p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>但是存在两个问题：</p><ol><li>无快捷方式，每次打开过于麻烦</li><li>不能设置小书匠为系统默认打开.md文件</li></ol><h2 id="创建小书匠桌面快捷方式"><a href="#创建小书匠桌面快捷方式" class="headerlink" title="创建小书匠桌面快捷方式"></a>创建小书匠桌面快捷方式</h2><p>对于没有快捷方式这个问题，让我很容易想到当初安装Eclipse的时候也没有快捷启动方式。然后在网上找到解决方案。</p><ol><li><p>UBuntu的菜单图标保存在/usr/share/applications目录下，所以先在该目录下建一个eclipse.desktop文件<br><code>sudo gedit /usr/share/applications/eclipse.desktop</code></p></li><li><p>在文件中输入以下内容</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-<span class="number">8</span></span><br><span class="line">Name=Eclipse Platfrom          <span class="comment">//图标名字，可修改</span></span><br><span class="line">Comment=Eclipse IDE   <span class="comment">//注释，可修改</span></span><br><span class="line">Exec=/opt/eclipse/eclipse      <span class="comment">//Eclipse文件夹下eclipse的路径</span></span><br><span class="line">Icon=/opt/eclipse/icon.xpm     //Eclipse文件夹下图标icon.xpm的路径</span><br><span class="line">Terminal=false</span><br><span class="line">StartupNotify=true</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br></pre></td></tr></table></figure><p>3.对该文件进行赋权<br><code>chmod u+x /usr/share/applications/eclipse.desktop</code></p><p>4.双击eclipse的图标就可以运行，然后复制到桌面就可以了</p><p>根据Ecllipse图标的制作，同理，然后试了小书匠是否也可以。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-<span class="number">8</span></span><br><span class="line">Name=Story_Writer          </span><br><span class="line">Comment=Story_Writer</span><br><span class="line">Exec=/opt/Story_Writer/Story-writer</span><br><span class="line">Icon=/opt/Story_Writer/Story-writer.png</span><br><span class="line">Terminal=false</span><br><span class="line">StartupNotify=true</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br></pre></td></tr></table></figure><p>如图：<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E5%B0%8F%E4%B9%A6%E5%8C%A0.png" alt="小书匠图标"></p><p>然后就出现了一个Story_Writer的快捷方式，双击即可打开小书匠。是不是很简单～</p><p> 对于另一个问题目前还没找到解决方案….  原谅我还只是一个小白。如果有幸你可以看到，请留言我！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小书匠简介&quot;&gt;&lt;a href=&quot;#小书匠简介&quot; class=&quot;headerlink&quot; title=&quot;小书匠简介&quot;&gt;&lt;/a&gt;小书匠简介&lt;/h2&gt;&lt;p&gt; &lt;a href=&quot;http://soft.xiaoshujiang.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小书匠编辑器&lt;/a&gt;是一款专为markdown写作而设计的编辑器。 支持多种编辑模式。单栏编辑，双栏编辑，三栏编辑，实时预览，全屏写作，全屏阅读…想怎么切换，就怎么切换，就是这样随心所欲。 多种主题选择、丰富的语法支持、第三方同步等功能特色。&lt;br&gt;原先在windows上习惯了使用小书匠，然后就想着在Ubuntu上也装一个。
    
    </summary>
    
      <category term="Ubuntu学习" scheme="http://mindyu.com/categories/Ubuntu%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Ubuntu16.04" scheme="http://mindyu.com/tags/Ubuntu16-04/"/>
    
      <category term="小书匠" scheme="http://mindyu.com/tags/%E5%B0%8F%E4%B9%A6%E5%8C%A0/"/>
    
      <category term="Markdown" scheme="http://mindyu.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>浅析素数环问题</title>
    <link href="http://mindyu.com/2018/03/18/%E6%B5%85%E6%9E%90%E7%B4%A0%E6%95%B0%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
    <id>http://mindyu.com/2018/03/18/浅析素数环问题/</id>
    <published>2018-03-18T03:51:06.000Z</published>
    <updated>2018-04-11T01:37:10.810Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="素数环的实现"><a href="#素数环的实现" class="headerlink" title="素数环的实现"></a>素数环的实现</h2><p><strong>问题描述</strong><br> 从1到n这n个整数围成一个圆环，若其中任意2个相邻的数字相加，结果均为素数，那么这个环就成为素数环。<br>  现在要求输入一个n，求n个数围成一圈有多少种素数环，规定第一个数字是1。<a id="more"></a></p><p> <strong>设计思路</strong><br>  1.数据结构：res数组用于保存最后满足描述的情况，isUsed数组用于标记1-n这些数字是否被使用，已达到不重复的效果。<br>  2.规定第一个数字为1，res[0] = 1;<br>  3.依次后面的值有两个限制 a.不能和前面的数字重复 b.和前一个数字相加为素数。</p><p><strong>代码实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> max = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[max];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span>[] isUsed = <span class="keyword">new</span> <span class="keyword">boolean</span>[max];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; isUsed.length; i++) &#123;</span><br><span class="line">res[i] = i+<span class="number">1</span>;</span><br><span class="line">isUsed[i] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">N = sc.nextInt();</span><br><span class="line"><span class="keyword">while</span>(N!=<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"Case "</span>+ k++ +<span class="string">":"</span>);</span><br><span class="line"><span class="keyword">if</span> (N%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">primeRing(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"No Answer"</span>);</span><br><span class="line">&#125;</span><br><span class="line">N = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sc.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归实现，输出素数环</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">primeRing</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;          </span><br><span class="line"><span class="keyword">if</span> (cur==N &amp;&amp; isPrime(res[cur-<span class="number">1</span>]+res[<span class="number">0</span>])) &#123;   <span class="comment">// 执行完成，并且首尾相加也是素数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N-<span class="number">1</span>; i++) &#123;</span><br><span class="line">System.out.print(res[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;System.out.print(res[N-<span class="number">1</span>]);</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;      <span class="comment">// 选取一个满足条件的值，继续递归</span></span><br><span class="line"><span class="keyword">if</span> (!isUsed[i] &amp;&amp; isPrime(i+res[cur-<span class="number">1</span>])) &#123;</span><br><span class="line">res[cur] = i;</span><br><span class="line">isUsed[i] = <span class="keyword">true</span>;</span><br><span class="line">primeRing(cur+<span class="number">1</span>);</span><br><span class="line">isUsed[i] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为素数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">3</span>) &#123;    <span class="comment">// 两数相加必定大于2，所以小于3的值不用考虑</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= Math.sqrt(x); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (x%i==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>运行结果</strong><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E7%B4%A0%E6%95%B0%E7%8E%AF.png" alt="素数环"></p><h2 id="素数表格"><a href="#素数表格" class="headerlink" title="素数表格"></a>素数表格</h2><p><strong>问题描述</strong><br> 前两天遇到一个问题和素数有关，从1到n中选择9个数字，填入3*3的表格中，使得相邻的数字相加和为素数。输出所有的情况。</p><p> <strong>设计思路</strong><br> 在CSDN上面看到过一片关于这个问题的博客。<a href="http://blog.csdn.net/yinxusen/article/details/6281687" target="_blank" rel="noopener">相邻两方格内的两个整数之和为质数-经典算法详解</a>。理解起来可能还要一时半会儿。但是我觉得有了上述素数环的理解以及实现，只需要稍微修改一下上面的代码就可以达到表格的要求。<br> 1.将3*3二维表格转换为一维数组。以下表格的数值代表数组中的位置。</p><table><thead><tr><th>0</th><th>1</th><th>2</th></tr></thead><tbody><tr><td>7</td><td>8</td><td>3</td></tr><tr><td>6</td><td>5</td><td>4</td></tr></tbody></table><p>2.问题可以简化为数组0-7下标组成一个素数环。然后数组res[8]同时与res<a href="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E7%B4%A0%E6%95%B0%E7%8E%AF.png" target="_blank" rel="noopener">1</a>、res<a href="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E7%B4%A0%E6%95%B0%E8%A1%A8%E6%A0%BC.png" target="_blank" rel="noopener">3</a>、res[5]、res[7]分别相加合为素数。</p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> max = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[max];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span>[] isUsed = <span class="keyword">new</span> <span class="keyword">boolean</span>[max];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; isUsed.length; i++) &#123;</span><br><span class="line">res[i] = i+<span class="number">1</span>;</span><br><span class="line">isUsed[i] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">N = sc.nextInt();</span><br><span class="line">primeRing(<span class="number">1</span>);</span><br><span class="line">sc.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归实现，输出素数环</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">primeRing</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;          </span><br><span class="line"><span class="keyword">if</span> (cur==<span class="number">8</span> &amp;&amp; isPrime(res[cur-<span class="number">1</span>]+res[<span class="number">0</span>])) &#123;   <span class="comment">// res[0]+res[7]和也为素数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;      <span class="comment">// 选取最后一个满足条件的值，填入res[8]位置</span></span><br><span class="line"><span class="keyword">if</span> (!isUsed[i] &amp;&amp; isPrime(i+res[<span class="number">1</span>]) &amp;&amp; isPrime(i+res[<span class="number">3</span>]) &amp;&amp; isPrime(i+res[<span class="number">5</span>]) &amp;&amp; isPrime(i+res[<span class="number">7</span>])) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)       <span class="comment">// 输出第一行</span></span><br><span class="line">System.out.print(res[j]+<span class="string">" "</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.print(res[<span class="number">7</span>]+<span class="string">" "</span>);  <span class="comment">// 输出第二行</span></span><br><span class="line">System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">System.out.print(res[<span class="number">3</span>]+<span class="string">" "</span>);</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">6</span>; j &gt; <span class="number">3</span>; j--)   <span class="comment">// 输出第三行</span></span><br><span class="line">System.out.print(res[j]+<span class="string">" "</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur&lt;<span class="number">8</span>)&#123;  <span class="comment">// 数组0-7下标组成一个素数环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;      <span class="comment">// 选取一个满足条件的值，继续递归</span></span><br><span class="line"><span class="keyword">if</span> (!isUsed[i] &amp;&amp; isPrime(i+res[cur-<span class="number">1</span>])) &#123;</span><br><span class="line">res[cur] = i;</span><br><span class="line">isUsed[i] = <span class="keyword">true</span>;</span><br><span class="line">primeRing(cur+<span class="number">1</span>);</span><br><span class="line">isUsed[i] = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为素数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">3</span>) &#123;    <span class="comment">// 两数相加必定大于2，所以小于3的值不用考虑</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= Math.sqrt(x); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (x%i==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行截图</strong><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/%E7%B4%A0%E6%95%B0%E8%A1%A8%E6%A0%BC.png" alt="3*3表格素数"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;素数环的实现&quot;&gt;&lt;a href=&quot;#素数环的实现&quot; class=&quot;headerlink&quot; title=&quot;素数环的实现&quot;&gt;&lt;/a&gt;素数环的实现&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;br&gt; 从1到n这n个整数围成一个圆环，若其中任意2个相邻的数字相加，结果均为素数，那么这个环就成为素数环。&lt;br&gt;  现在要求输入一个n，求n个数围成一圈有多少种素数环，规定第一个数字是1。
    
    </summary>
    
      <category term="算法分析" scheme="http://mindyu.com/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据结构" scheme="http://mindyu.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="素数环问题" scheme="http://mindyu.com/tags/%E7%B4%A0%E6%95%B0%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
    
      <category term="3*3素数表格" scheme="http://mindyu.com/tags/3-3%E7%B4%A0%E6%95%B0%E8%A1%A8%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>浅析n元素出栈序列</title>
    <link href="http://mindyu.com/2018/02/24/%E6%B5%85%E6%9E%90n%E5%85%83%E7%B4%A0%E5%87%BA%E6%A0%88%E5%BA%8F%E5%88%97/"/>
    <id>http://mindyu.com/2018/02/24/浅析n元素出栈序列/</id>
    <published>2018-02-24T06:34:21.000Z</published>
    <updated>2018-03-18T03:53:15.689Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="栈的简介"><a href="#栈的简介" class="headerlink" title="栈的简介"></a>栈的简介</h2><p>   栈（stack）又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。遵循后进先出的原则。<a id="more"></a></p><h2 id="n个元素出栈顺序种数"><a href="#n个元素出栈顺序种数" class="headerlink" title="n个元素出栈顺序种数"></a>n个元素出栈顺序种数</h2><ol><li><p><strong>问题描述</strong><br>有n个元素依次进栈，请问总共有多少种出栈序列？</p></li><li><p><strong>算法分析</strong><br>首先列举出简单的情况：<br>当1个元素进栈，有1种出栈顺序；<br>当2个元素进栈，有2种出栈顺序；<br>当3个元素进栈，有5种出栈顺序 ；<br>我们把n个元素的出栈个数的记为f(n), 则对于1，2，3有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(1) = 1     //即 1</span><br><span class="line">f(2) = 2     //即 12、21</span><br><span class="line">f(3) = 5     //即 123、132、213、321、231</span><br></pre></td></tr></table></figure></li></ol><p>对于f(4)，我们假定是a,b,c,d四个元素。任意一个元素在其出栈序列中只有4个位置。取元素a分别讨论其在出栈序列中的位置：<br>1.当a元素在位置1时，只可能是a先入栈，然后出栈。接下来就是其它三个元素b,c,d的出栈序列，也就是子问题f(3)。<br>2.元素a在位置2处，有一个元素比a先出栈可能的序列即f(1)，另外两个元素在位置3，4即f(2)。<br>3.元素a在位置3处，有两个元素比a先出栈可能的序列即f(2)，另外两个元素在位置4即f(1)。<br>4.元素a在位置4处，有三个元素比a先出栈可能的序列即f(3).<br>那么f(4) =  f(3) + f(2) <em> f(1) + f(1) </em> f(2) + f(3);<br>然后推广到n，按同理我们可以很容易的得到：<br>f(n) = f(0)<em>f(n-1) + f(1)</em>f(n-2) + … + f(n-1)*f(0) </p><p>上式也就是<strong>卡特兰数（Catalen）</strong>:<br>卡特兰数的通项公式为：<img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/catalen1.png" alt="enter description here"><br>变换形式：<img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/catalen.png" alt="enter description here"><br>另类递归式：  C(n)=((4<em>n-2)/(n+1))</em>C(n-1);</p><p>卡特兰数的应用：<br>1.括号化问题。<br>    矩阵链乘： P=a1×a2×a3×……×an，依据乘法结合律，不改变其顺序，只用括号表示成对的乘积，试问有几种括号化的方案？(C(n-1)种)</p><p>2.出栈次序问题。<br>    n个元素依次进栈，请问总共有多少种出栈序列？<br>    案例：2012腾讯实习招聘笔试题<br>在图书馆一共6个人在排队，3个还《面试宝典》一书，3个在借《面试宝典》一书，图书馆此时没有了面试宝典了，求他们排队的总数？<br>    解析：还书相当于入栈，借书相当于出栈。只有当栈内元素不为空时才可以借书。C(3) = 5。借书3个人，还书3个人求全排列。<br>    总数为5<em>3!</em>3! = 180。</p><p>3.将多边行划分为三角形问题。<br>将一个凸N+2多边形区域分成三角形区域的方法数?<br>类似：一位大城市的律师在她住所以北n个街区和以东n个街区处工作。每天她走2n个街区去上班。如果她<br>从不穿越（但可以碰到）从家到办公室的对角线，那么有多少条可能的道路？</p><p>类似：在圆上选择2n个点,将这些点成对连接起来使得所得到的n条线段不相交的方法数?</p><p>4.给顶节点组成二叉树的问题。<br>给定N个节点，能构成多少种不同的二叉树？<br>（能构成Cn个）<br>Catalan数的解法:<br>Catalan数的组合公式为 Cn=C(2n,n) / (n+1);<br>此数的递归公式为 C(n ) = C(n-1)<em>(4</em>n-2) / (n+1)</p><ol start="2"><li><strong>代码实现</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">Catalen_1(arr, n);</span><br><span class="line"><span class="comment">//Catalen_2(arr, n);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sc.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Catalen_1</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 递推关系式   f(n) = f(0)*f(n-1) + f(1)*f(n-2) + … + f(n-1)*f(0) </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[i] += arr[j] * arr[i-<span class="number">1</span>-j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Catalen_2</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 递推关系式  C(n)=((4*n-2)/(n+1))*C(n-1)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    arr[i] = arr[i-<span class="number">1</span>] * (<span class="number">4</span>*i-<span class="number">2</span>) / (i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>运行结果</strong><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/CatalenCode.png" alt="enter description here"></li></ol><h2 id="n个元素出栈序列输出"><a href="#n个元素出栈序列输出" class="headerlink" title="n个元素出栈序列输出"></a>n个元素出栈序列输出</h2><p>1.<strong>设计思路</strong><br>所需数据结构，1栈2队列，输入队列从头部取出数据压入栈中，数据出栈进入输出队列。最终输出队列即为出栈序列的情况。<br>采用递归的方式，将大问题分解为小问题。栈存在两种状态：1.输入队列入栈，2.输出队列出栈。</p><p>2.<strong>代码实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">n = sc.nextInt();<span class="comment">// 元素个数</span></span><br><span class="line">Stack&lt;Integer&gt; s = <span class="keyword">new</span> Stack&lt;Integer&gt;(); </span><br><span class="line">Queue&lt;Integer&gt; in = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">in.offer(i);</span><br><span class="line">&#125;</span><br><span class="line">Queue&lt;Integer&gt; out = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">printAllOutStackSeq(in, s, out);</span><br><span class="line"></span><br><span class="line">    sc.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAllOutStackSeq</span><span class="params">(Queue&lt;Integer&gt; in, Stack&lt;Integer&gt; s, Queue&lt;Integer&gt; out)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (out.size()==n) &#123;      <span class="comment">// 所有元素都出栈了</span></span><br><span class="line"> <span class="keyword">while</span>( !out.isEmpty() )&#123;  </span><br><span class="line">          System.out.print(out.poll()+<span class="string">""</span>);; </span><br><span class="line">     &#125;  </span><br><span class="line"> System.out.println();</span><br><span class="line"> <span class="keyword">return</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Queue&lt;Integer&gt; inCopy = <span class="keyword">new</span> LinkedList&lt;Integer&gt;(in);</span><br><span class="line">Stack&lt;Integer&gt; sCopy = (Stack&lt;Integer&gt;) s.clone(); </span><br><span class="line">Queue&lt;Integer&gt; outCopy = <span class="keyword">new</span> LinkedList&lt;Integer&gt;(out);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( !s.empty() ) &#123;<span class="comment">// 出栈，将元素出栈，push到结果队列中  </span></span><br><span class="line">        out.offer( s.pop() ); </span><br><span class="line">        printAllOutStackSeq( inCopy, s, out );   </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( !in.isEmpty() ) &#123; <span class="comment">// 入栈，将输入队列出队，进行入栈  </span></span><br><span class="line">sCopy.push(in.poll());</span><br><span class="line">printAllOutStackSeq( in, sCopy, outCopy );   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.<strong>运行结果</strong><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/outStackSeq.png" alt="输出所有出栈序列"></p><h2 id="判断一个序列是否是可能的出栈序列"><a href="#判断一个序列是否是可能的出栈序列" class="headerlink" title="判断一个序列是否是可能的出栈序列"></a>判断一个序列是否是可能的出栈序列</h2><p>1.<strong>设计思路</strong><br>输入一个序列，判断该序列是否可能是正确的出栈序列（反向推理）。<br>代码中A代表着有序的输入队列（1，2，3….，n）<br>代码中B代表着所输入的目标序列的下标，从下标为1的位置开始匹配。<br>代码中S代表栈，进行入栈、出栈操作。<br><code>A == target[B]</code> 当前输入队列头元素与目标序列B位置元素相同，也就是输入队列元素取头元素进行入栈，然后立即出栈。<br><code>!s.isEmpty() &amp;&amp; s.peek() == target[B]</code> 当前栈顶元素与目标序列B位置元素相同，也就是栈内元素出栈。<br><code>A &lt;= n</code> 上述两种情况都不满足时，也就是输入队列的头元素一直进行入栈操作。<br>最后也不入栈也不出栈，也不就意味着目标序列不是出栈序列。</p><p>2.<strong>代码实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">while</span>(sc.hasNext())&#123;</span><br><span class="line"><span class="keyword">int</span> n = sc.nextInt();<span class="comment">// 元素个数</span></span><br><span class="line"><span class="keyword">if</span> (n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span>[] target = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">Stack&lt;Integer&gt; s = <span class="keyword">new</span> Stack&lt;Integer&gt;(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">target[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A = <span class="number">1</span>, B = <span class="number">1</span>, flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(B &lt;= n)&#123;</span><br><span class="line"><span class="keyword">if</span> (A == target[B]) &#123;</span><br><span class="line">A++;B++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (!s.isEmpty() &amp;&amp; s.peek() == target[B]) &#123;</span><br><span class="line">s.pop(); B++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (A &lt;= n ) &#123;</span><br><span class="line">s.push(A++);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">flag = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(flag==<span class="number">1</span>?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    sc.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.<strong>运行结果</strong><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2018/isOutStackSeq.png" alt="判断一个序列是否是可能的出栈序列"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;栈的简介&quot;&gt;&lt;a href=&quot;#栈的简介&quot; class=&quot;headerlink&quot; title=&quot;栈的简介&quot;&gt;&lt;/a&gt;栈的简介&lt;/h2&gt;&lt;p&gt;   栈（stack）又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。遵循后进先出的原则。
    
    </summary>
    
      <category term="算法分析" scheme="http://mindyu.com/categories/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="栈" scheme="http://mindyu.com/tags/%E6%A0%88/"/>
    
      <category term="数据结构" scheme="http://mindyu.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="卡特兰数" scheme="http://mindyu.com/tags/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"/>
    
      <category term="Catalen" scheme="http://mindyu.com/tags/Catalen/"/>
    
  </entry>
  
  <entry>
    <title>操作系统经典算法之银行家算法</title>
    <link href="http://mindyu.com/2017/12/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8B%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/"/>
    <id>http://mindyu.com/2017/12/13/操作系统经典算法之银行家算法/</id>
    <published>2017-12-13T02:22:50.000Z</published>
    <updated>2018-02-25T14:06:45.152Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p><strong>1. 银行家算法的实现思想</strong><br>     允许进程动态地申请资源，系统在每次实施资源分配之前，先计算资源分配的安全性，若此次资源分配安全（即资源分配后，系统能按某种顺序来为每个进程分配其所需的资源，直至最大需求，使每个进程都可以顺利地完成），便将资源分配给进程，否则不分配资源，让进程等待。</p><p><strong>2. 死锁的概念</strong><br>　　死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。 <a id="more"></a> 此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。<br>银行家算法是避免死锁的一种重要方法。 操作系统按照银行家制定的规则为进程分配资源，当进程首次申请资源时，要测试该进程对资源的最大需求量，如果系统现存的资源可以满足它的最大需求量则按当前的申请量分配资源，否则就推迟分配。当进程在执行中继续申请资源时，先测试该进程已占用的资源数与本次申请的资源数之和是否超过了该进程对资源的最大需求量。若超过则拒绝分配资源，若没有超过则再测试系统现存的资源能否满足该进程尚需的最大资源量，若能满足则按当前的申请量分配资源，否则也要推迟分配。</p><p><strong>3. 产生死锁的必要条件</strong><br>①　<strong>互斥条件</strong>：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。<br>②　<strong>请求和保持条件</strong>：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。<br>③　<strong>不可抢占条件</strong>：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。<br>④　<strong>循环等待条件</strong>：指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，•••，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。 </p><p><strong>4.功能实现</strong><br>     理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和解除死锁。所以，在系统设计、进程调度等方面注意如何能够不让这四个必要条件同时成立，如何确定资源的合理分配算法，避免进程永久占据系统资源。此外，也要防止进程在处于等待状态的情况下占用资源,在系统运行过程中，对进程发出的每一个系统能够满足的资源申请进行动态检查，并根据检查结果决定是否分配资源，若分配后系统可能发生死锁，则不予分配，否则予以分配 。因此，对资源的分配要给予合理的规划。</p><h2 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h2><p><strong>1.数据结构</strong><br>1) 可利用资源向量Available。这是一个含有m个元素的数组，其中的而每一个元素代表一类可利用资源数目，其初始值是系统中所配置的该类全部可用资源的数目，其数值随该类资源的分配和回收而动态的改变。如果Available[j]=K,则表示系统中现有Rj类资源K个。</p><p>2) 最大需求矩阵Max。这是一个n * m的矩阵，它定义了系统中n个进程中的每一个进程对m类资源的最大需求。如果Max[i,j]=K；则表示进程i需要Rj类资源的最大数目为K。</p><p>3) 分配矩阵Allocation。这也是一个n * m的矩阵，它定义了系统中每一类资源当前已分配给每一进程的资源数。如果Allocation[i,j]=K，则表示进程i当前已分得Rj类资源的数目为K。</p><p>4) 需求矩阵Need。这也是一个n * m的矩阵，用以表示每一个进程尚需的各类资源数。如果Need[i,j]=K,则表示进程i还需要Rj类资源K个，方能完成任务。<br>      上述三个矩阵间存在下述关系：<br><strong>Need[i,j]=Max[i,j]-Allocation[i,j]</strong></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>第一部分：银行家算法模块<br>1．如果Request&lt;=Need,则转向2;否则,出错<br>2．如果Request&lt;=Available,则转向3,否则等待<br>3．系统试探分配请求的资源给进程<br>4．系统执行安全性算法    </p><p>第二部分:安全性算法模块</p><ol><li>设置两个向量<br>①　工作向量:Work=Available(表示系统可提供给进程继续运行所需要的各类资源数目)<br>②　Finish:表示系统是否有足够资源分配给进程(True:有;False:没有).初始化为False  </li><li>若Finish[i]=False&amp;&amp;Need&lt;=Work,则执行3;否则执行4(i为资源类别)</li><li>进程P获得第i类资源,则顺利执行直至完成，并释放资源: Work=Work+Allocation; Finish[i]=true;转2  </li><li>若所有进程的Finish[i]=true,则表示系统安全;否则,不安全! </li></ol><h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><p><strong>1.银行家算法</strong><br>  设Request i是进程Pi的申请向量，如果Request i[j]=K,则表示进程Pi需要K个Rj类型的资源。当Pi发出资源请求后，系统按下述步骤进行检查：<br>1) 如果Request i[j]&lt;=Need[i,j]，便转向步骤2）；否则认为出错，因为它所需要的资源数已经超过它所宣布的最大值。<br>2) 如果Request i[j]&lt;=Available[i,j]，便转向步骤3）；否则，表示尚无足够资源，Pi需等待。<br>3) 系统试探着把资源分配给进程Pi，并修改下面数据结构中的数值：<br>       Available[j]:=Available[j]-Request i[j];<br>       Allocation[i,j]:=Allocation[i,j]+Request i[j];<br>       Need[i,j]:=Need[i,j]-Request i[j];<br>4) 系统执行安全性算法，检查此次资源分配后系统是否处于安全状态。若安全，才正式将资源分配给进程Pi，以完成本次分配；否则，将本次的试探分配作废，恢复原来的资源分配状态，让进程Pi等待。</p><p><strong>2.安全性算法</strong><br>系统所执行的安全性算法可描述如下：<br>1) 设置两个向量<br>①　工作向量Work，它表示系统可提供给进程继续运行所需的各类资源数目，它含有m个元素，在执行安全算法开始时，Work：=Available。<br>②　Finish，它表示系统是否有足够的资源分配给进程，使之运行完成。开始时先做Finish[i]:=false;当有足够资源分配给进程时，再令Finish[i]:=ture.<br>2) 从进程集合中找到一个满足下述条件的进程：<br>①　Finish[i]=false;<br>②　Need[i,j]&lt;=Work[j];若找不到，执行步骤3），否则，执行步骤4）。<br>3） 当进程Pi获得资源后，可顺利执行，直至完成，并释放出分配给它的资源，故应执行：<br>     Work[j]:=Work[j]+Allocation[i,j];<br>     Finish[i]:=true;<br>     Go to step 2;<br>4) 如果所有进程的Finish[i]=true都满足，则表示系统处于安全状态；否则，系统处于不安全状态。</p><p><strong>代码流程图：</strong><br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="代码流程图"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Available[<span class="number">10</span>];<span class="comment">//可使用资源向量</span></span><br><span class="line"><span class="keyword">int</span> Max[<span class="number">10</span>][<span class="number">10</span>];<span class="comment">//最大需求矩阵</span></span><br><span class="line"><span class="keyword">int</span> Allocation[<span class="number">10</span>][<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">//分配矩阵</span></span><br><span class="line"><span class="keyword">int</span> Need[<span class="number">10</span>][<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//需求矩阵</span></span><br><span class="line"><span class="keyword">int</span> Work[<span class="number">10</span>];                   <span class="comment">//工作向量</span></span><br><span class="line"><span class="keyword">bool</span> Finish[<span class="number">10</span>];                 <span class="comment">//是否有足够的资源分配，状态标志</span></span><br><span class="line"><span class="keyword">int</span> Request[<span class="number">10</span>][<span class="number">10</span>];<span class="comment">//进程申请资源向量</span></span><br><span class="line"><span class="keyword">int</span> Pause[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">0</span> &#125;;<span class="comment">//各类资源总数</span></span><br><span class="line"><span class="keyword">int</span> List[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//系统资源种类数</span></span><br><span class="line"><span class="keyword">int</span> m;<span class="comment">//总的进程数</span></span><br><span class="line"><span class="keyword">int</span> a;<span class="comment">//当前申请的进程号</span></span><br><span class="line"><span class="keyword">int</span> l, e, z = <span class="number">0</span>;<span class="comment">//计数器</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>, c = <span class="number">0</span>, f = <span class="number">0</span>, g;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//显示菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*************************银行家算法**************************\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n\t1:初始化数据"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n  \t2:设置进程资源申请"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n  \t3:查看资源分配状态"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n  \t4:退出程序"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n\t\t\t 请输入你的选择: "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示资源分配状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainshow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"       最大需求量         已分配       尚需要量 \n进程"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"       最大需求           已分配       尚需要量 \n进程"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %d类"</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nP[%d]"</span>, i);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Max[i][j]);<span class="comment">//最大需求</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Allocation[i][j]);     <span class="comment">//分配</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Need[i][j]);<span class="comment">//需求</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n系统剩余资源量：   "</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   %d "</span>, Available[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//安全性检测</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">securitycheck</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"**************************安全性检测**************************\n\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"       工作向量尚需求量已分配工作向量+已分配Finish \n进程 "</span>);</span><br><span class="line"><span class="keyword">for</span> (c = <span class="number">1</span>; c &lt;= <span class="number">4</span>; c++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %d类"</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">Pause[j] = Available[j];  <span class="comment">//Pause[i]为防止在下面安全性检查时修改到Available[i]而定义的备份</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">Finish[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">b = <span class="number">0</span>;   <span class="comment">//计数器初始化</span></span><br><span class="line"><span class="keyword">if</span> (!Finish[i])&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)        <span class="comment">//资源种类数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Need[i][j] &lt;= Pause[j])     <span class="comment">//可使用资源向量备份，若3类资源均满足条件</span></span><br><span class="line">&#123;</span><br><span class="line">b = b + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b == n)</span><br><span class="line">&#123;</span><br><span class="line">Finish[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nP[%d] "</span>, i);        <span class="comment">//依次输出进程安全序列  </span></span><br><span class="line"><span class="keyword">for</span> (l = <span class="number">1</span>; l &lt;= n; l++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Pause[l]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Need[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Allocation[i][j]=Pause[j]-Need[i][j];</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Allocation[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  %2d "</span>, Pause[j] + Allocation[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   true"</span>);</span><br><span class="line"><span class="keyword">for</span> (l = <span class="number">1</span>; l &lt;= n; l++)</span><br><span class="line">&#123;</span><br><span class="line">Pause[l] = Pause[l] + Allocation[i][l];   <span class="comment">//回收该进程资源</span></span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Finish[i] == <span class="literal">true</span>) f = f + <span class="number">1</span>;     <span class="comment">//统计Finish[i]＝＝true的个数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (f == m)     <span class="comment">//全为true</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"处于安全状态"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n系统剩余资源量：   "</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   %d "</span>, Available[i]);</span><br><span class="line">&#125;</span><br><span class="line">f = <span class="number">0</span>;<span class="comment">//将计数器f重新初始化，为下一次提出新的进程申请做准备</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"处于不安全状态"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">Available[i] = Available[i] + Request[a][i];</span><br><span class="line">Allocation[a][i] = Allocation[a][i] - Request[a][i];</span><br><span class="line">Need[a][i] = Need[a][i] + Request[a][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入系统的资源种类数："</span>);</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入%d类资源总数(以空格分隔)： "</span>, n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入进程总数："</span>);</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"进程P[%d]对这%d类资源的最大需求量(以空格分隔)： "</span>, i, n);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;Max[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"进程P[%d]对这%d类资源已分配数(以空格分隔)： "</span>, i, n);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;Allocation[i][j]);</span><br><span class="line">Need[i][j] = Max[i][j] - Allocation[i][j];     <span class="comment">//尚需资源数为   最大-已分配</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] -= Allocation[j][i];     <span class="comment">//各类资源总数-各进程分配的资源数 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">Available[i] = arr[i];</span><br><span class="line">securitycheck();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程申请资源</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainrequest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入申请资源的进程："</span>);</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入进程P[%d]对%d类资源的申请量："</span>, a, i);</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;Request[a][i]);</span><br><span class="line"><span class="keyword">if</span> (Request[a][i] &gt; Need[a][i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n出错！进程申请的资源数多于它自己申报的最大需求量\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Request[a][i] &gt; Available[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nP[%d]请求的资源数大于可用资源数，必须等待\n"</span>, a);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//以下是试探性分配</span></span><br><span class="line">Available[i] = Available[i] - Request[a][i];</span><br><span class="line">Allocation[a][i] = Allocation[a][i] + Request[a][i];</span><br><span class="line">Need[a][i] = Need[a][i] - Request[a][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ret = securitycheck();</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> key = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Need[a][j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">key++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (key == n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">Available[j] += Allocation[a][j];</span><br><span class="line">Allocation[a][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">menu();</span><br><span class="line">scanf_s(<span class="string">"%d"</span>, &amp;key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"><span class="keyword">switch</span> (key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">initialize();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">mainrequest();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">mainshow();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n\t\t谢谢使用 \n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\t\tMade by 杨陈强!\n\n\n"</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><p>程序菜单界面：<br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%95%8C%E9%9D%A2.png" alt="银行家算法界面"></p><p>初始化数据：（模拟课本113例子）<br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="银行家数据初始化"></p><p>T0时刻的安全性：<br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6T0%E5%AE%89%E5%85%A8%E6%80%A7.png" alt="银行家T0时刻安全性"><br>由上图可知，存在安全序列{P2,P4,P1,P3,P5},（存在多种情况，此处只寻找到一种可行的情况）故系统处于安全状态。</p><p>P2请求资源：<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6P2%E8%AF%B7%E6%B1%82.png" alt="进程P2请求资源"><br>P2发出请求向量Request2（1，0，2），系统按银行家算法进行检查。然后再通过安全性算法检查此时系统是否处于安全状态。上图为安全状态！</p><p>银行家算法测试:<br>当进程1申请的资源大于系统剩余的资源时，提示进程必须等待！<br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95%E6%B5%8B%E8%AF%95.png" alt="银行家算法测试"></p><p>安全性算法测试：<br>当进程1申请的资源过多时，导致各进程处于请求与保持状态，提示系统处于不安全状态！并且此次资源申请无效<br> <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6%E5%AE%89%E5%85%A8%E6%80%A7%E6%B5%8B%E8%AF%95.png" alt="银行家安全性测试"></p><p>查看资源分配情况：（依然处于第一次P2请求资源结束的状态）<br>  <img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%93%B6%E8%A1%8C%E5%AE%B6%E6%9F%A5%E7%9C%8B%E8%B5%84%E6%BA%90%E6%83%85%E5%86%B5.png" alt="查看当前资源情况"></p><p>通过这次课程设计，让我对银行家算法（避免死锁）有了更深入的理解，同时借鉴网上一些优秀的实现过程，自己理解并修改而记之！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; title=&quot;需求分析&quot;&gt;&lt;/a&gt;需求分析&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1. 银行家算法的实现思想&lt;/strong&gt;&lt;br&gt;     允许进程动态地申请资源，系统在每次实施资源分配之前，先计算资源分配的安全性，若此次资源分配安全（即资源分配后，系统能按某种顺序来为每个进程分配其所需的资源，直至最大需求，使每个进程都可以顺利地完成），便将资源分配给进程，否则不分配资源，让进程等待。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 死锁的概念&lt;/strong&gt;&lt;br&gt;　　死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。
    
    </summary>
    
      <category term="学习笔记" scheme="http://mindyu.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="操作系统" scheme="http://mindyu.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="算法" scheme="http://mindyu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用Android Canvas绘制折线图</title>
    <link href="http://mindyu.com/2017/12/08/%E4%BD%BF%E7%94%A8Android-Canvas%E7%BB%98%E5%88%B6%E6%8A%98%E7%BA%BF%E5%9B%BE/"/>
    <id>http://mindyu.com/2017/12/08/使用Android-Canvas绘制折线图/</id>
    <published>2017-12-08T01:17:58.000Z</published>
    <updated>2018-02-25T14:06:45.147Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="优化画图方法"><a href="#优化画图方法" class="headerlink" title="优化画图方法"></a>优化画图方法</h2><p> 原先磁感应力检测仪项目的绘图方法一直是采用的Android AChartEngine方法，简单介绍一下AChartEngine，它是 Android 平台的图表开发库, 能绘制 折线图, 饼图, 气泡图, 柱状图, 散点图, 面积图等统计图表。网上有很多例子，推荐一个<a href="http://www.cnblogs.com/wangfeng520/p/5610540.html" target="_blank" rel="noopener">Android 图表绘制 achartengine 示例解析</a>。该方法优点：使用简单，只需要将数据传入到数据集，并设置相应渲染器的绘制颜色，线的粗细等等。缺点：当数据量较大时，在移动与缩放时会显得比较卡顿。<br> <a id="more"></a><br> 接下来就介绍一种新的绘制方法：<strong>Android Canvas方法</strong><br> 当我们在自定义 View的时候，我们经常需要绘制一些自己想要的效果。通过Canvas对象我们就可以绘制出我们自己想要的效果。比如折线图、平面图等等。<br>对于一些简单的原理操作网上有很多Demo，推荐一个我在简书上面看到的一篇<a href="http://www.jianshu.com/p/f69873371763" target="_blank" rel="noopener">Android Canvas 方法总结</a>，里面介绍了关于Canvas的平移、缩放、旋转，以及后面使用Canvas对象绘制直线、各种形状以及文字。通过图形的展示，我相信很快就可以看懂啦！</p><p>正式开始我做的内容： </p><ul><li>首先贴一张我们所需要最终达到的效果图<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E6%8A%98%E7%BA%BF%E5%9B%BE%E5%8F%8A%E6%9B%B2%E7%BA%BF%E5%9B%BE%E5%AE%8C%E6%95%B4%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C.png" width="50%" height="50%"></li></ul><p>1.<strong>坐标线的绘制：</strong><br>此时需要注意的是Canvas画布的坐标是以 <em>左上角为坐标原点的，水平向右为X轴的正方向，垂直向下为Y轴的正方向</em>，而为了美观以及需求，我们需要将<strong>坐标原点设置在左下角，同时Y轴的正方向为垂直向上</strong>。而达到最终效果。坐标原点设置在左下角可以通过简单的平移画布而实现坐标（0，0）位于View的左下角，但是方向岂不是还要通过翻转？ 这里其实并没有翻转这个方法，我指的其实就是通过坐标数据计算它对应的位置。画布的坐标原点并非你所显示的坐标原点。这样会使得画图麻烦很多。此时通过一个巧妙地方法，坐标数据的Y值我给它一个负号，那么如果是（2，5）和（3，7），而我实际将它们绘制在画布上的（2，-5）和（3，-7）；而-7比-5小，正好-7就在-5的上方，从而模拟出正方形为垂直向上。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制坐标线</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawAxis</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    canvasWidth -= <span class="number">140f</span>;        <span class="comment">//留有边距以显示坐标对应的值</span></span><br><span class="line">    canvasHeight -= <span class="number">140f</span>;</span><br><span class="line">    canvas.translate(<span class="number">110f</span>, canvasHeight + <span class="number">40f</span>);     <span class="comment">// 使画布向 x 轴正向移动 110f，向 y 轴移动 40f</span></span><br><span class="line">    canvas.drawLine(<span class="number">0</span>, <span class="number">0</span>, canvasWidth, <span class="number">0</span>, paint);   <span class="comment">// 绘制 x 轴</span></span><br><span class="line">    canvas.drawLine(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,-canvasHeight, paint);  <span class="comment">// 绘制 y 轴</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.<strong>坐标刻度的绘制</strong><br>坐标主要需要完成动态的适配，当平移和缩放的时候坐标动态显示，并且完成它们之间的间距控制，所显示的画布上坐标轴上只显示2-6个坐标，避免坐标刻度太密而使得刻度值挤在一块无法显示。实现思路是：<br>a.通过<code>float interval = measureInterval(xDistance/xScale);        //每组值得间隔</code>计算当前显示区域的相邻坐标的间距。<br>b.通过<code>int n = (int) Math.ceil((xDistance/xScale)/interval);      //一组有几个值</code>计算当前显示区域的坐标数量也就对于上述的（2-6）<br>c.通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> first = (<span class="keyword">int</span>) Math.floor((xStart-((<span class="number">1</span>-xScale)/<span class="number">2</span>+xTranslate/canvasWidth)*xDistance/xScale)/interval);</span><br></pre></td></tr></table></figure></p><p>计算出所显示的首坐标的位置。<br>d.循环n次，依次显示n个从first+i开始的坐标刻度值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所需要的坐标属性：</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">float</span> xDistance;              <span class="comment">// x 方向总距离</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">float</span> yDistance;              <span class="comment">// y 方向总距离</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">float</span> xStart=<span class="number">0</span>, yStart=<span class="number">0</span>;     <span class="comment">// 起始点坐标</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">float</span> xTranslate = <span class="number">0</span>, yTranslate = <span class="number">0</span>;   <span class="comment">// 分别控制 x 和 y 方向的平移距离，单位为屏幕像素，达到手指移动多少，坐标平移多少</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">float</span> xScale = <span class="number">1</span>, yScale = <span class="number">1</span>;           <span class="comment">// 分别控制 x 和 y 方向的缩放程度</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//绘制坐标值及刻度</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCoordinates</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        String number;</span><br><span class="line">        DecimalFormat df1 = <span class="keyword">new</span> DecimalFormat(<span class="string">"0.0"</span>);</span><br><span class="line">        DecimalFormat df2 = <span class="keyword">new</span> DecimalFormat(<span class="string">"0.00"</span>);</span><br><span class="line">        DecimalFormat df3 = <span class="keyword">new</span> DecimalFormat(<span class="string">"0.000"</span>);</span><br><span class="line">        <span class="comment">// 绘制 x 轴坐标</span></span><br><span class="line">        canvas.save();  <span class="comment">// 保存画布状态</span></span><br><span class="line">        canvas.clipRect(<span class="number">0</span>, <span class="number">0</span>, canvasWidth, <span class="number">60f</span>);                   <span class="comment">// 切割画布，使坐标显示在一定范围内</span></span><br><span class="line">        canvas.translate((<span class="number">1</span> - xScale) / <span class="number">2</span> * canvasWidth, <span class="number">0</span>);       <span class="comment">// 缩放时，平移使得与折线图一致</span></span><br><span class="line">        canvas.translate(xTranslate, <span class="number">0</span>);                           <span class="comment">// 使坐标跟着图形一起平移</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> interval = measureInterval(xDistance/xScale);        <span class="comment">//每组值得间隔</span></span><br><span class="line">        <span class="keyword">int</span> n = (<span class="keyword">int</span>) Math.ceil((xDistance/xScale)/interval);      <span class="comment">//一组有几个值</span></span><br><span class="line">        <span class="keyword">int</span> first = (<span class="keyword">int</span>) Math.floor((xStart-((<span class="number">1</span>-xScale)/<span class="number">2</span>+xTranslate/canvasWidth)*xDistance/xScale)/interval);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (interval &lt; <span class="number">0.01</span>)&#123;</span><br><span class="line">                number = df3.format((first+i)*interval);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (interval &lt;= <span class="number">0.1</span>)&#123;</span><br><span class="line">                number = df2.format((first+i)*interval);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (interval &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                number = df1.format((first+i)*interval);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                number = String.valueOf((first+i)*(<span class="keyword">int</span>)interval);</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.drawLine((canvasWidth * (first+i) * interval / xDistance * xScale), <span class="number">0f</span>,</span><br><span class="line">                    (canvasWidth * (first+i) * interval / xDistance * xScale), <span class="number">10f</span>,paint);</span><br><span class="line">            canvas.drawText(</span><br><span class="line">                    number,</span><br><span class="line">                    (canvasWidth * (first+i) * interval / xDistance * xScale),</span><br><span class="line">                    <span class="number">40f</span>,</span><br><span class="line">                    paint);</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.restore();   <span class="comment">// 使画布返回上一个状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制 y 轴坐标</span></span><br><span class="line">        canvas.save();  <span class="comment">// 保存画布状态</span></span><br><span class="line">        canvas.clipRect(-<span class="number">110f</span>, -canvasHeight, <span class="number">0</span>, <span class="number">0</span>);                        <span class="comment">// 切割画布，使坐标显示在一定范围内</span></span><br><span class="line">        canvas.translate(<span class="number">0</span>, -(<span class="number">1</span> - yScale) / <span class="number">2</span> * canvasHeight);              <span class="comment">// 缩放时平移使得与折线图一致</span></span><br><span class="line">        canvas.translate(<span class="number">0</span>, (yTranslate/yScale-yStart/yDistance*canvasHeight)*yScale);      <span class="comment">// 使坐标跟着图形一起平移</span></span><br><span class="line">        interval = measureInterval(yDistance/yScale);                       <span class="comment">//每组值得间隔</span></span><br><span class="line"><span class="comment">//        Log.d("Chart","interval="+interval);</span></span><br><span class="line">        n = (<span class="keyword">int</span>) Math.ceil((yDistance/yScale)/interval);                   <span class="comment">//一组有几个值</span></span><br><span class="line"><span class="comment">//        Log.d("Chart","n="+n);</span></span><br><span class="line">        first = -(<span class="keyword">int</span>) Math.floor((yStart+yDistance/yScale/<span class="number">2</span>*(<span class="number">1</span>-yScale)-yTranslate/yScale/canvasHeight*yDistance)/interval);</span><br><span class="line"><span class="comment">//        Log.d("Chart","first="+first);</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (interval &lt; <span class="number">0.01</span>)&#123;</span><br><span class="line">                number = df3.format((first+i)*interval);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (interval &lt;= <span class="number">0.1</span>)&#123;</span><br><span class="line">                number = df2.format((first+i)*interval);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (interval &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                number = df1.format((first+i)*interval);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                number = String.valueOf((first+i)*(<span class="keyword">int</span>)interval);</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.drawLine(-<span class="number">10f</span>, -(canvasHeight * (first+i) * interval / yDistance * yScale),</span><br><span class="line">                    <span class="number">0f</span>, -(canvasHeight * (first+i) * interval / yDistance * yScale),paint);</span><br><span class="line">            canvas.drawText(</span><br><span class="line">                    number,</span><br><span class="line">                    -<span class="number">5f</span>,</span><br><span class="line">                    -(canvasHeight * (first+i) * interval / yDistance * yScale)-<span class="number">4</span>,</span><br><span class="line">                    paint);</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.restore();   <span class="comment">// 使画布返回上一个状态</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以下为坐标完成动态适配的效果图：<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E5%9D%90%E6%A0%87%E5%8A%A8%E6%80%81%E9%80%82%E9%85%8D%E6%95%88%E6%9E%9C.png" width="50%" height="50%"></p><p>3.<strong>折线与图形的绘制</strong><br>由于需要绘制两种不同的图形，去噪图（折线图）和扫描图（平面图），此处将画图方法抽象出来：子类通过重写drawAction方法来完成各自所需绘制的图形。同时后期如果需要绘制其他类型的图，继承此抽象类然后重写自己的drawAction方法即可实现不同类型的图形绘制。<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/ChartService%E6%8A%BD%E8%B1%A1%E7%B1%BB.jpg" alt="AbstractChartService画图抽象类"><br>以下为折线图的drawAction方法：<br>根据平移与缩放值，将画布进行相应的平移与缩放，同时设置图形的缩放中心，以所显示图形的中心点为缩放中心。然后设置画笔样式及颜色，通过所获取的xList与yList值连接相邻点达到绘制折线的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制曲线</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawAction</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 裁切矩形，把画面控制在坐标平面内</span></span><br><span class="line">        canvas.clipRect(<span class="number">0</span>, <span class="number">0</span>, canvasWidth, -canvasHeight);</span><br><span class="line">        <span class="comment">// 手势缩放移动</span></span><br><span class="line">        canvas.translate(xTranslate/xScale, yTranslate/yScale-yStart/yDistance*canvasHeight);</span><br><span class="line">        <span class="keyword">float</span> px = (canvasWidth / <span class="number">2</span> - xTranslate/xScale);</span><br><span class="line">        <span class="keyword">float</span> py = (canvasHeight / <span class="number">2</span> + yTranslate/yScale-yStart/yDistance*canvasHeight);</span><br><span class="line">        canvas.scale(xScale, yScale, px, -py);               <span class="comment">//以图的中心点缩放</span></span><br><span class="line"></span><br><span class="line">        paint.setDither(<span class="keyword">true</span>);                           <span class="comment">//设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满，图像更加清晰</span></span><br><span class="line">        paint.setFilterBitmap(<span class="keyword">true</span>);                     <span class="comment">//如果该项设置为true，则图像在动画进行中会滤掉对Bitmap图像的优化操作，加快显示速度，本设置项依赖于dither和xfermode的设置</span></span><br><span class="line">        paint.setStyle(Paint.Style.FILL_AND_STROKE);     <span class="comment">//设置画笔的样式，Style.FILL: 实心   STROKE:空心   FILL_OR_STROKE:同时实心与空心</span></span><br><span class="line">        paint.setStrokeJoin(Paint.Join.ROUND);           <span class="comment">//设置绘制时各图形的结合方式，如平滑效果等  BEVEL斜角</span></span><br><span class="line">        <span class="comment">//paint.setStrokeWidth(4/xScale);                  //当画笔样式为STROKE或FILL_OR_STROKE时，设置笔刷的粗细度</span></span><br><span class="line">        <span class="keyword">int</span>[] colors = GlobalParameter.getInstance().getColors();</span><br><span class="line">        <span class="comment">// 绘制图形</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;showIDs.size(); i++) &#123;           <span class="comment">//通道数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt; yList.get(showIDs.get(i)).size()-<span class="number">1</span>; j++) &#123;</span><br><span class="line">                paint.setColor(colors[showIDs.get(i)]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((yList.get(showIDs.get(i)).get(j+<span class="number">1</span>)-yList.get(showIDs.get(i)).get(j))&lt;<span class="number">15</span>&amp;&amp;(yList.get(showIDs.get(i)).get(j+<span class="number">1</span>)-yList.get(showIDs.get(i)).get(j))&gt;-<span class="number">15</span>)&#123;</span><br><span class="line">                    paint.setStrokeWidth(<span class="number">3</span>/yScale);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    paint.setStrokeWidth(<span class="number">3</span>/xScale);</span><br><span class="line">                &#125;</span><br><span class="line">                canvas.drawLine(        <span class="comment">//xDistance x方向的总距离</span></span><br><span class="line">                        xList.get(j) / xDistance * canvasWidth,</span><br><span class="line">                        -yList.get(showIDs.get(i)).get(j) / yDistance * canvasHeight,</span><br><span class="line">                        xList.get(j+<span class="number">1</span>) / xDistance * canvasWidth,</span><br><span class="line">                        -yList.get(showIDs.get(i)).get(j+<span class="number">1</span>) / yDistance * canvasHeight,</span><br><span class="line">                        paint</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (points!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            paint.setColor(Color.RED);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;points.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                canvas.drawLine(        <span class="comment">//xDistance x方向的总距离</span></span><br><span class="line">                        points.get(i).getX() / xDistance * canvasWidth,</span><br><span class="line">                        -points.get(i).getY() / yDistance * canvasHeight,</span><br><span class="line">                        points.get(i+<span class="number">1</span>).getX() / xDistance * canvasWidth,</span><br><span class="line">                        -points.get(i+<span class="number">1</span>).getY() / yDistance * canvasHeight,</span><br><span class="line">                        paint</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        initPaints();   <span class="comment">//画笔reset</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以下为PopWindow弹出框中横屏显示折线图的效果：<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E5%A4%A7%E5%9B%BE%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C.png" width="50%" height="50%"></p><p>4.<strong>Touch手势事件的监听</strong><br>Android Canvas 没有提供有关手势缩放的功能，但我们可以利用onTouchListener 来监测手势，并根据手势的不同对扫描图作不同处理，比如移动和缩放。采用接口回调机制，在所需用到AbstractChartService对象处，进行手势监控，减少抽象类间的耦合性。</p><p>通过设置OnTouchListener监听，只要有手指触碰到绘制的图形，就会触发 onTouch 方法，同时通过判断event.getAction() 获取到手势的不同动作，来完成你所重写的响应事件。重写onTouch方法，通过 event.getAction() 获取到的值，自动判断执行哪一个 case 中的代码，即通过监测不同的动作来对图形作出相应处理。我们的处理主要就是移动和缩放，通过event.getX、event.getY方法所获取的手势点击的屏幕坐标，计算图形的平移及缩放值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置折线图的触摸事件，使扫描图保持同步平移和缩放</span></span><br><span class="line">      chartView.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View view, MotionEvent event)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">                  <span class="comment">// 一根手指按下时</span></span><br><span class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                      <span class="keyword">if</span> (!mPopupWindow.isShowing()) &#123;      <span class="comment">//大图未显示时</span></span><br><span class="line">                          <span class="comment">// 双击扫描图跳转到大图</span></span><br><span class="line">                          <span class="keyword">if</span> (event.getEventTime() - chartView.getUpTime() &lt; <span class="number">200</span>) &#123;</span><br><span class="line">                              addToBigchartLayout(chartView);</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                      chartView.setxDown(event.getX());</span><br><span class="line">                      chartView.setyDown(event.getY());</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  <span class="comment">// 手指抬起时</span></span><br><span class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                      chartView.setUpTime(event.getEventTime());</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  <span class="comment">// 手指移动时</span></span><br><span class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                      <span class="comment">// 只有一根手指移动时</span></span><br><span class="line">                      <span class="keyword">if</span> (event.getPointerCount() == <span class="number">1</span> &amp;&amp; event.getAction() != <span class="number">261</span></span><br><span class="line">                              &amp;&amp; chartView.getxDown() != <span class="number">0</span> &amp;&amp; chartView.getyDown() != <span class="number">0</span> ) &#123;</span><br><span class="line">                          <span class="comment">// 实现图形平移</span></span><br><span class="line">                          chartView.setxTranslate(chartView.getxTranslate()+(event.getX() - chartView.getxDown()) );</span><br><span class="line">                          chartView.setyTranslate(chartView.getyTranslate()+(event.getY() - chartView.getyDown()) );</span><br><span class="line">                          chartView.setxDown(event.getX());</span><br><span class="line">                          chartView.setyDown(event.getY());</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="comment">// 有两根手指移动时</span></span><br><span class="line">                      <span class="keyword">else</span> <span class="keyword">if</span> (event.getPointerCount() == <span class="number">2</span>) &#123;</span><br><span class="line">                          <span class="comment">// 实现扫描图缩放</span></span><br><span class="line">                          <span class="keyword">double</span> xLenMove = Math.abs(event.getX(<span class="number">0</span>) - event.getX(<span class="number">1</span>));</span><br><span class="line">                          <span class="keyword">double</span> yLenMove = Math.abs(event.getY(<span class="number">0</span>) - event.getY(<span class="number">1</span>));</span><br><span class="line">                          <span class="keyword">double</span> lenMove = Math.sqrt(xLenMove * xLenMove + yLenMove * yLenMove);</span><br><span class="line">                          <span class="comment">// 动态更新</span></span><br><span class="line">                          <span class="comment">// 设置最小缩放比例为 0.4</span></span><br><span class="line">                          <span class="keyword">if</span> (chartView.getxScale() + (lenMove / chartView.getLenDown() - <span class="number">1</span>) &gt; <span class="number">0.4</span>) &#123;</span><br><span class="line">                              chartView.setxScale((<span class="keyword">float</span>) (chartView.getxScale() + (lenMove / chartView.getLenDown()  - <span class="number">1</span>)));</span><br><span class="line">                              chartView.setyScale((<span class="keyword">float</span>) (chartView.getyScale() + (lenMove / chartView.getLenDown()  - <span class="number">1</span>)));</span><br><span class="line">                              chartView.setLenDown(lenMove);</span><br><span class="line">                          &#125;</span><br><span class="line">                          chartView.setxDown(<span class="number">0</span>);</span><br><span class="line">                          chartView.setyDown(<span class="number">0</span>);</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  <span class="comment">// 有两根手指按下时</span></span><br><span class="line">                  <span class="keyword">case</span> <span class="number">261</span>:</span><br><span class="line">                      <span class="keyword">double</span> xLenDown = Math.abs(event.getX(<span class="number">0</span>) - event.getX(<span class="number">1</span>));</span><br><span class="line">                      <span class="keyword">double</span> yLenDown = Math.abs(event.getY(<span class="number">0</span>) - event.getY(<span class="number">1</span>));</span><br><span class="line">                      chartView.setLenDown(Math.sqrt(xLenDown * xLenDown + yLenDown * yLenDown));</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  <span class="comment">// 两根手指中的一根抬起时</span></span><br><span class="line">                  <span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP:</span><br><span class="line">                      chartView.setxDown(<span class="number">0</span>);</span><br><span class="line">                      chartView.setyDown(<span class="number">0</span>);</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  <span class="keyword">default</span>:</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              chartView.postInvalidate();   <span class="comment">//手势完成时重绘</span></span><br><span class="line">              scanView.setxTranslate(chartView.getxTranslate());</span><br><span class="line">              scanView.setxScale(chartView.getxScale());</span><br><span class="line">              scanView.postInvalidate();</span><br><span class="line">              <span class="comment">// 只有当返回 false 时才会开启手势检测效果，否则折线图将无法移动和缩放</span></span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><p>最后通过计算的平移值以及缩放值，重绘图形。</p><ul><li>完成以上步骤就可以在其它Activity中使用自己封装的对象来完成各种不同图形的绘制。如下是适配设备校准的绘图方法：<br><img src="http://hexoblog-1253306922.cosgz.myqcloud.com/photo2017/%E9%80%82%E9%85%8D%E8%AE%BE%E5%A4%87%E6%A0%A1%E5%87%86%E7%9A%84%E7%BB%98%E5%88%B6%E6%96%B9%E6%B3%95.png" width="50%" height="50%"></li></ul><p>项目源码可见我的Github仓库<a href="https://github.com/Mindyu/LCJCSystem" target="_blank" rel="noopener">漏磁检测系统</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;优化画图方法&quot;&gt;&lt;a href=&quot;#优化画图方法&quot; class=&quot;headerlink&quot; title=&quot;优化画图方法&quot;&gt;&lt;/a&gt;优化画图方法&lt;/h2&gt;&lt;p&gt; 原先磁感应力检测仪项目的绘图方法一直是采用的Android AChartEngine方法，简单介绍一下AChartEngine，它是 Android 平台的图表开发库, 能绘制 折线图, 饼图, 气泡图, 柱状图, 散点图, 面积图等统计图表。网上有很多例子，推荐一个&lt;a href=&quot;http://www.cnblogs.com/wangfeng520/p/5610540.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android 图表绘制 achartengine 示例解析&lt;/a&gt;。该方法优点：使用简单，只需要将数据传入到数据集，并设置相应渲染器的绘制颜色，线的粗细等等。缺点：当数据量较大时，在移动与缩放时会显得比较卡顿。&lt;br&gt;
    
    </summary>
    
      <category term="安卓学习" scheme="http://mindyu.com/categories/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="安卓" scheme="http://mindyu.com/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="漏磁检测" scheme="http://mindyu.com/tags/%E6%BC%8F%E7%A3%81%E6%A3%80%E6%B5%8B/"/>
    
      <category term="Andriod" scheme="http://mindyu.com/tags/Andriod/"/>
    
  </entry>
  
</feed>
